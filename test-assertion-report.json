{
  "timestamp": "2025-07-30T23:35:12.623Z",
  "summary": {
    "totalTests": 912,
    "fakeTests": 0,
    "suspiciousTests": 449,
    "testsWithOnlyTrivialAssertions": 365
  },
  "tests": [
    {
      "file": "tests/index.test.ts",
      "line": 41,
      "name": "should create server with correct info",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 42,
          "type": "toBeDefined",
          "value": "expect(server).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/index.test.ts",
      "line": 46,
      "name": "should register tool handlers",
      "issues": [
        "Line 57: Suspicious pattern: expect(true).toBe(true);",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 57,
          "type": "toBe",
          "value": "expect(true).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/index.test.ts",
      "line": 223,
      "name": "should return correct tool names",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 233,
          "type": "toEqual",
          "value": "expect(toolNames).toEqual([",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/index.test.ts",
      "line": 560,
      "name": "should read configuration from environment variables",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 565,
          "type": "toBe",
          "value": "expect(process.env.CACHE_SIZE).toBe('5000');",
          "isMeaningful": false
        },
        {
          "line": 566,
          "type": "toBe",
          "value": "expect(process.env.RATE_LIMIT).toBe('50');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/index.rateLimit.test.ts",
      "line": 250,
      "name": "should create rate limiter with environment configuration",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 260,
          "type": "toHaveBeenCalled",
          "value": "expect(MockedRateLimiter).toHaveBeenCalled();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 23,
      "name": "should return false for invalid timezones",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 24,
          "type": "toBe",
          "value": "expect(validateTimezone('Invalid/Zone')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 25,
          "type": "toBe",
          "value": "expect(validateTimezone('NotATimezone')).toBe(false);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 54,
      "name": "should reject invalid formats",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 55,
          "type": "toBe",
          "value": "expect(validateDateFormat('not-a-date')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 56,
          "type": "toBe",
          "value": "expect(validateDateFormat('2024-13-01')).toBe(false); // Invalid month",
          "isMeaningful": true
        },
        {
          "line": 57,
          "type": "toBe",
          "value": "expect(validateDateFormat('2024-01-32')).toBe(false); // Invalid day",
          "isMeaningful": true
        },
        {
          "line": 58,
          "type": "toBe",
          "value": "expect(validateDateFormat('')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 59,
          "type": "toBe",
          "value": "expect(validateDateFormat('Mon, 01 Jan 2024 12:00:00 GMT')).toBe(false); // RFC2822 not supported by parseISO",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 76,
      "name": "should reject invalid units",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 77,
          "type": "toBe",
          "value": "expect(validateTimeUnit('week')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 78,
          "type": "toBe",
          "value": "expect(validateTimeUnit('milliseconds')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 79,
          "type": "toBe",
          "value": "expect(validateTimeUnit('century')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 80,
          "type": "toBe",
          "value": "expect(validateTimeUnit('')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 81,
          "type": "toBe",
          "value": "expect(validateTimeUnit('day')).toBe(false); // Singular not accepted",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 93,
      "name": "should reject invalid patterns",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 94,
          "type": "toBe",
          "value": "expect(validateRecurrencePattern('hourly')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 95,
          "type": "toBe",
          "value": "expect(validateRecurrencePattern('biweekly')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 96,
          "type": "toBe",
          "value": "expect(validateRecurrencePattern('quarterly')).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 97,
          "type": "toBe",
          "value": "expect(validateRecurrencePattern('')).toBe(false);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 108,
      "name": "should reject invalid days",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 109,
          "type": "toBe",
          "value": "expect(validateDayOfWeek(-1)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 110,
          "type": "toBe",
          "value": "expect(validateDayOfWeek(7)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 111,
          "type": "toBe",
          "value": "expect(validateDayOfWeek(10)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 112,
          "type": "toBe",
          "value": "expect(validateDayOfWeek(1.5)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 113,
          "type": "toBe",
          "value": "expect(validateDayOfWeek(NaN)).toBe(false);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 124,
      "name": "should reject invalid days",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 125,
          "type": "toBe",
          "value": "expect(validateDayOfMonth(0)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 126,
          "type": "toBe",
          "value": "expect(validateDayOfMonth(32)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 127,
          "type": "toBe",
          "value": "expect(validateDayOfMonth(-5)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 128,
          "type": "toBe",
          "value": "expect(validateDayOfMonth(15.5)).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 129,
          "type": "toBe",
          "value": "expect(validateDayOfMonth(NaN)).toBe(false);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 134,
      "name": "should create error with all fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 141,
          "type": "toEqual",
          "value": "expect(error).toEqual({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/validation.test.ts",
      "line": 148,
      "name": "should create error without details",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 151,
          "type": "toEqual",
          "value": "expect(error).toEqual({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.test.ts",
      "line": 30,
      "name": "should increase process maxListeners to 20",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 36,
          "type": "toBe",
          "value": "expect(process.getMaxListeners()).toBe(20);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.test.ts",
      "line": 41,
      "name": "should return current configuration",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 47,
          "type": "toEqual",
          "value": "expect(config).toEqual({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.test.ts",
      "line": 55,
      "name": "should not emit warning with configured limits",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 81,
          "type": "unknown",
          "value": "expect(maxListenerWarnings).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.env.test.ts",
      "line": 51,
      "name": "should handle invalid MAX_LISTENERS gracefully",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 60,
          "type": "toBe",
          "value": "expect(config.defaultMaxListeners).toBe(20);",
          "isMeaningful": true
        },
        {
          "line": 61,
          "type": "toBe",
          "value": "expect(config.processMaxListeners).toBe(20);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.env.test.ts",
      "line": 90,
      "name": "should handle zero as invalid and use default",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 99,
          "type": "toBe",
          "value": "expect(config.defaultMaxListeners).toBe(20);",
          "isMeaningful": true
        },
        {
          "line": 100,
          "type": "toBe",
          "value": "expect(config.processMaxListeners).toBe(20);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/serverConfig.env.test.ts",
      "line": 103,
      "name": "should handle negative values as invalid",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 112,
          "type": "toBe",
          "value": "expect(config.defaultMaxListeners).toBe(20);",
          "isMeaningful": true
        },
        {
          "line": 113,
          "type": "toBe",
          "value": "expect(config.processMaxListeners).toBe(20);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 15,
      "name": "should create rate limiter with default values",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 17,
          "type": "toBeDefined",
          "value": "expect(rateLimiter).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 21,
      "name": "should create rate limiter with custom values",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 23,
          "type": "toBeDefined",
          "value": "expect(rateLimiter).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 27,
      "name": "should read from environment variables",
      "issues": [
        "Line 38: Suspicious pattern: // Should be able to make 200 requests"
      ],
      "assertions": [
        {
          "line": 35,
          "type": "toBe",
          "value": "expect(info.limit).toBe(200);",
          "isMeaningful": true
        },
        {
          "line": 36,
          "type": "toBe",
          "value": "expect(info.window).toBe(120000);",
          "isMeaningful": true
        },
        {
          "line": 40,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 44,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 57,
      "name": "should allow requests under the limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 58,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 59,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 60,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 61,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 62,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 65,
      "name": "should deny requests over the limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 68,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 72,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 75,
      "name": "should allow requests after window expires",
      "issues": [
        "Line 81: Suspicious pattern: // Should be denied",
        "Line 87: Suspicious pattern: // Should be allowed again",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 82,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 88,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 91,
      "name": "should use sliding window algorithm",
      "issues": [
        "Line 104: Suspicious pattern: // Should be denied (at limit)",
        "Line 111: Suspicious pattern: // Should allow 3 more requests",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 105,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 112,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 113,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 114,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 117,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 127,
      "name": "should return current usage count",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 128,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 131,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(1);",
          "isMeaningful": false
        },
        {
          "line": 135,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(3);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 138,
      "name": "should exclude expired requests from count",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 141,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(2);",
          "isMeaningful": false
        },
        {
          "line": 146,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 156,
      "name": "should return 0 when under limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 158,
          "type": "toBe",
          "value": "expect(rateLimiter.getRetryAfter()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 161,
      "name": "should return time until oldest request expires",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 170,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 174,
          "type": "toBe",
          "value": "expect(rateLimiter.getRetryAfter()).toBe(7);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 177,
      "name": "should handle edge case of no requests",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 178,
          "type": "toBe",
          "value": "expect(rateLimiter.getRetryAfter()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 187,
      "name": "should clear all request history",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 192,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(3);",
          "isMeaningful": false
        },
        {
          "line": 196,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 197,
          "type": "toBe",
          "value": "expect(rateLimiter.checkLimit()).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 202,
      "name": "should clean up old timestamps automatically",
      "issues": [
        "Line 219: Suspicious pattern: // Should only have 1 request in memory",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 211,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(100);",
          "isMeaningful": false
        },
        {
          "line": 220,
          "type": "toBe",
          "value": "expect(rateLimiter.getCurrentUsage()).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 230,
      "name": "should return rate limiter information",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 237,
          "type": "toEqual",
          "value": "expect(info).toEqual({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.test.ts",
      "line": 246,
      "name": "should show retry after when at limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 254,
          "type": "toEqual",
          "value": "expect(info).toEqual({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.env.test.ts",
      "line": 57,
      "name": "should handle invalid environment variable values gracefully",
      "issues": [
        "Line 64: Suspicious pattern: // Should fall back to defaults when parsing fails",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 65,
          "type": "toBe",
          "value": "expect(info.limit).toBe(100);",
          "isMeaningful": true
        },
        {
          "line": 66,
          "type": "toBe",
          "value": "expect(info.window).toBe(60000);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.debug.test.ts",
      "line": 28,
      "name": "should log rate limiter creation when debug is enabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 39,
          "type": "toContain",
          "value": "expect(output).toContain('mcp:rate-limit');",
          "isMeaningful": false
        },
        {
          "line": 40,
          "type": "toContain",
          "value": "expect(output).toContain('Creating rate limiter');",
          "isMeaningful": false
        },
        {
          "line": 41,
          "type": "toContain",
          "value": "expect(output).toContain('limit: 5');",
          "isMeaningful": false
        },
        {
          "line": 42,
          "type": "toContain",
          "value": "expect(output).toContain('window: 10000ms');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.debug.test.ts",
      "line": 45,
      "name": "should log when requests are allowed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 53,
          "type": "toContain",
          "value": "expect(output).toContain('Request allowed');",
          "isMeaningful": false
        },
        {
          "line": 54,
          "type": "toContain",
          "value": "expect(output).toContain('usage: 1/2');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.debug.test.ts",
      "line": 57,
      "name": "should log when rate limit is exceeded",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 67,
          "type": "toContain",
          "value": "expect(output).toContain('Rate limit exceeded');",
          "isMeaningful": false
        },
        {
          "line": 68,
          "type": "toContain",
          "value": "expect(output).toContain('usage: 2/2');",
          "isMeaningful": false
        },
        {
          "line": 69,
          "type": "toContain",
          "value": "expect(output).toContain('retry after:');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.debug.test.ts",
      "line": 72,
      "name": "should not log when debug is disabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 79,
          "type": "unknown",
          "value": "expect(stderrOutput).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/rateLimit.debug.test.ts",
      "line": 82,
      "name": "should log cleanup operations",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 98,
          "type": "toContain",
          "value": "expect(output).toContain('Cleaned up');",
          "isMeaningful": false
        },
        {
          "line": 99,
          "type": "toContain",
          "value": "expect(output).toContain('old requests');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 38,
      "name": "should output to stderr when DEBUG env is set",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 45,
          "type": "toContain",
          "value": "expect(output).toContain('mcp:server');",
          "isMeaningful": false
        },
        {
          "line": 46,
          "type": "toContain",
          "value": "expect(output).toContain('test message');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 49,
      "name": "should not output when DEBUG env is not set",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 55,
          "type": "unknown",
          "value": "expect(stderrOutput).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 58,
      "name": "should support multiple namespaces",
      "issues": [
        "Line 64: Suspicious pattern: debug.tools('tools message'); // Should not output",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 67,
          "type": "toContain",
          "value": "expect(output).toContain('server message');",
          "isMeaningful": false
        },
        {
          "line": 68,
          "type": "toContain",
          "value": "expect(output).toContain('rate limit message');",
          "isMeaningful": false
        },
        {
          "line": 69,
          "type": "toContain",
          "value": "expect(output).not.toContain('tools message');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 72,
      "name": "should support wildcard namespace",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 81,
          "type": "toContain",
          "value": "expect(output).toContain('server message');",
          "isMeaningful": false
        },
        {
          "line": 82,
          "type": "toContain",
          "value": "expect(output).toContain('rate limit message');",
          "isMeaningful": false
        },
        {
          "line": 83,
          "type": "toContain",
          "value": "expect(output).toContain('tools message');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 88,
      "name": "should log environment variables when debug is enabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 97,
          "type": "toContain",
          "value": "expect(output).toContain('=== MCP Server Environment ===');",
          "isMeaningful": false
        },
        {
          "line": 98,
          "type": "toContain",
          "value": "expect(output).toContain('RATE_LIMIT: 50');",
          "isMeaningful": false
        },
        {
          "line": 99,
          "type": "toContain",
          "value": "expect(output).toContain('RATE_LIMIT_WINDOW: 30000');",
          "isMeaningful": false
        },
        {
          "line": 100,
          "type": "toContain",
          "value": "expect(output).toContain('DEBUG: mcp:init');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 103,
      "name": "should show defaults when environment variables are not set",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 112,
          "type": "toContain",
          "value": "expect(output).toContain('RATE_LIMIT: 100 (default)');",
          "isMeaningful": false
        },
        {
          "line": 113,
          "type": "toContain",
          "value": "expect(output).toContain('RATE_LIMIT_WINDOW: 60000 (default)');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 116,
      "name": "should not log when debug is disabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 122,
          "type": "unknown",
          "value": "expect(stderrOutput).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 127,
      "name": "should format objects for debug output",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 136,
          "type": "toContain",
          "value": "expect(output).toContain('Test object:');",
          "isMeaningful": false
        },
        {
          "line": 137,
          "type": "toContain",
          "value": "expect(output).toContain('foo');",
          "isMeaningful": false
        },
        {
          "line": 138,
          "type": "toContain",
          "value": "expect(output).toContain('bar');",
          "isMeaningful": false
        },
        {
          "line": 139,
          "type": "toContain",
          "value": "expect(output).toContain('nested');",
          "isMeaningful": false
        },
        {
          "line": 140,
          "type": "toContain",
          "value": "expect(output).toContain('42');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 143,
      "name": "should not output when namespace is disabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 149,
          "type": "unknown",
          "value": "expect(stderrOutput).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/debug.test.ts",
      "line": 154,
      "name": "should be able to debug rate limit operations",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 165,
          "type": "toContain",
          "value": "expect(output).toContain('Creating rate limiter with limit=100, window=60000ms');",
          "isMeaningful": false
        },
        {
          "line": 166,
          "type": "toContain",
          "value": "expect(output).toContain('Request allowed. Current usage: 1/100');",
          "isMeaningful": false
        },
        {
          "line": 167,
          "type": "toContain",
          "value": "expect(output).toContain('Rate limit exceeded. Retry after: 45s');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/utils/config.test.ts",
      "line": 68,
      "name": "should fall back to UTC if system timezone is invalid",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 76,
          "type": "toBe",
          "value": "expect(config.defaultTimezone).toBe('UTC');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/config.test.ts",
      "line": 105,
      "name": "should ignore DEFAULT_TIMEZONE if invalid",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 114,
          "type": "toBe",
          "value": "expect(config.defaultTimezone).toBe('America/Indianapolis');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/config.test.ts",
      "line": 199,
      "name": "should handle Intl.DateTimeFormat throwing an error",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 205,
          "type": "toBe",
          "value": "expect(config.defaultTimezone).toBe('UTC');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/config.test.ts",
      "line": 208,
      "name": "should handle resolvedOptions() throwing an error",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 217,
          "type": "toBe",
          "value": "expect(config.defaultTimezone).toBe('UTC');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/utils/config.test.ts",
      "line": 236,
      "name": "should return a complete TimeServerConfig object",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 238,
          "type": "unknown",
          "value": "expect(config).toHaveProperty('defaultTimezone');",
          "isMeaningful": false
        },
        {
          "line": 239,
          "type": "toBe",
          "value": "expect(typeof config.defaultTimezone).toBe('string');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 160,
      "name": "should handle input with explicit timezone offset",
      "issues": [
        "Line 167: Suspicious pattern: timezone: 'America/New_York', // Should be ignored"
      ],
      "assertions": [
        {
          "line": 170,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-15T12:00:00.000+05:30');",
          "isMeaningful": true
        },
        {
          "line": 171,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-14T12:00:00.000+05:30');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 286,
      "name": "should throw error for invalid time format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 289,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 306,
      "name": "should throw error for invalid unit",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 309,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 326,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 329,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 347,
      "name": "should throw error for NaN amount",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 350,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 422,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 439,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different cache keys",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 444,
      "name": "should always include all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 454,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('original');",
          "isMeaningful": false
        },
        {
          "line": 455,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('result');",
          "isMeaningful": false
        },
        {
          "line": 456,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix_original');",
          "isMeaningful": false
        },
        {
          "line": 457,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix_result');",
          "isMeaningful": false
        },
        {
          "line": 460,
          "type": "toBe",
          "value": "expect(typeof result.original).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 461,
          "type": "toBe",
          "value": "expect(typeof result.result).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 462,
          "type": "toBe",
          "value": "expect(typeof result.unix_original).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 463,
          "type": "toBe",
          "value": "expect(typeof result.unix_result).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 466,
      "name": "should format times consistently with milliseconds",
      "issues": [
        "Line 476: Suspicious pattern: // Should have .000 milliseconds format"
      ],
      "assertions": [
        {
          "line": 477,
          "type": "toMatch",
          "value": "expect(result.original).toMatch(/\\.\\d{3}/);",
          "isMeaningful": true
        },
        {
          "line": 478,
          "type": "toMatch",
          "value": "expect(result.result).toMatch(/\\.\\d{3}/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 483,
      "name": "should use system timezone when no timezone parameter provided",
      "issues": [
        "Line 493: Suspicious pattern: // Should interpret input time as America/New_York time"
      ],
      "assertions": [
        {
          "line": 494,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-20T12:00:00.000-05:00');",
          "isMeaningful": true
        },
        {
          "line": 495,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-20T11:00:00.000-05:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/subtractTime.test.ts",
      "line": 498,
      "name": "should use explicit timezone parameter over system default",
      "issues": [
        "Line 509: Suspicious pattern: // Should use Asia/Tokyo, not the system default"
      ],
      "assertions": [
        {
          "line": 510,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-20T12:00:00.000+09:00');",
          "isMeaningful": true
        },
        {
          "line": 511,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-20T11:00:00.000+09:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrenceWrapper.test.ts",
      "line": 18,
      "name": "should return correct shape with next, unix, and days_until",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 24,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('next');",
          "isMeaningful": false
        },
        {
          "line": 25,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix');",
          "isMeaningful": false
        },
        {
          "line": 26,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('days_until');",
          "isMeaningful": false
        },
        {
          "line": 27,
          "type": "toBe",
          "value": "expect(typeof result.next).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 28,
          "type": "toBe",
          "value": "expect(typeof result.unix).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 29,
          "type": "toBe",
          "value": "expect(typeof result.days_until).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrenceWrapper.test.ts",
      "line": 172,
      "name": "should throw for invalid pattern",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 173,
          "type": "unknown",
          "value": "expect(() => {",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrenceWrapper.test.ts",
      "line": 181,
      "name": "should throw for missing required parameters",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 182,
          "type": "unknown",
          "value": "expect(() => {",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrenceWrapper.test.ts",
      "line": 203,
      "name": "should cache results with same parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 212,
          "type": "toEqual",
          "value": "expect(result1).toEqual(result2);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 356,
      "name": "should handle pattern case-insensitively",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 360,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 375,
      "name": "should default missing parameters appropriately",
      "issues": [
        "Line 383: Suspicious pattern: // Should return next week same day"
      ],
      "assertions": [
        {
          "line": 384,
          "type": "toBe",
          "value": "expect(weeklyResult.days_until).toBe(7);",
          "isMeaningful": true
        },
        {
          "line": 387,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 402,
      "name": "should handle DST transitions",
      "issues": [
        "Line 413: Suspicious pattern: // Should handle DST transition correctly"
      ],
      "assertions": [
        {
          "line": 414,
          "type": "toBe",
          "value": "expect(result.days_until).toBe(1);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 419,
      "name": "should throw error for invalid pattern",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 422,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 437,
      "name": "should throw error for invalid day_of_week",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 440,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 456,
      "name": "should throw error for invalid day_of_month",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 459,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 474,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 490,
      "name": "should throw error for invalid time format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 493,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 508,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 524,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 527,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 543,
      "name": "should throw error for invalid start_from date",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 546,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 593,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 611,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]);",
          "isMeaningful": false
        },
        {
          "line": 612,
          "type": "toBe",
          "value": "expect(calls[1][0]).not.toBe(calls[2][0]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 617,
      "name": "should return all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 624,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('next');",
          "isMeaningful": false
        },
        {
          "line": 625,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix');",
          "isMeaningful": false
        },
        {
          "line": 626,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('days_until');",
          "isMeaningful": false
        },
        {
          "line": 627,
          "type": "toBe",
          "value": "expect(typeof result.next).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 628,
          "type": "toBe",
          "value": "expect(typeof result.unix).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 629,
          "type": "toBe",
          "value": "expect(typeof result.days_until).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 632,
      "name": "should return ISO8601 format for next",
      "issues": [
        "Line 639: Suspicious pattern: // Should match ISO8601 format"
      ],
      "assertions": [
        {
          "line": 640,
          "type": "toMatch",
          "value": "expect(result.next).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 655,
      "name": "should calculate days_until as whole days",
      "issues": [
        "Line 663: Suspicious pattern: // Should be 0 (same day) even though it's hours in the future"
      ],
      "assertions": [
        {
          "line": 664,
          "type": "toBe",
          "value": "expect(result.days_until).toBe(0);",
          "isMeaningful": true
        },
        {
          "line": 671,
          "type": "toBe",
          "value": "expect(tomorrowResult.days_until).toBe(1);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 689,
      "name": "should still use UTC when empty string timezone provided (backward compatibility)",
      "issues": [
        "Line 699: Suspicious pattern: // Should use UTC, not system timezone"
      ],
      "assertions": [
        {
          "line": 700,
          "type": "toMatch",
          "value": "expect(result.next).toMatch(/2025-01-15T14:00:00/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/nextOccurrence.test.ts",
      "line": 758,
      "name": "should handle system timezone in cache key",
      "issues": [
        "Line 766: Suspicious pattern: // Should include system timezone in cache key when no timezone provided"
      ],
      "assertions": [
        {
          "line": 767,
          "type": "unknown",
          "value": "expect(mockedCache.set).toHaveBeenCalledWith(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getCurrentTime.test.ts",
      "line": 88,
      "name": "should handle include_offset=false",
      "issues": [
        "Line 97: Suspicious pattern: // Should not include offset in formatted time"
      ],
      "assertions": [
        {
          "line": 98,
          "type": "toBe",
          "value": "expect(result.time).toBe('2025-07-19 01:58:42');",
          "isMeaningful": true
        },
        {
          "line": 100,
          "type": "toBe",
          "value": "expect(result.offset).toBe('+09:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getCurrentTime.test.ts",
      "line": 187,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 194,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different cache keys",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getCurrentTime.test.ts",
      "line": 231,
      "name": "should always include all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 240,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('time');",
          "isMeaningful": false
        },
        {
          "line": 241,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('timezone');",
          "isMeaningful": false
        },
        {
          "line": 242,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('offset');",
          "isMeaningful": false
        },
        {
          "line": 243,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix');",
          "isMeaningful": false
        },
        {
          "line": 244,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('iso');",
          "isMeaningful": false
        },
        {
          "line": 247,
          "type": "toBe",
          "value": "expect(typeof result.time).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 248,
          "type": "toBe",
          "value": "expect(typeof result.timezone).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 249,
          "type": "toBe",
          "value": "expect(typeof result.offset).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 250,
          "type": "toBe",
          "value": "expect(typeof result.unix).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 251,
          "type": "toBe",
          "value": "expect(typeof result.iso).toBe('string');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 314,
      "name": "should handle end date before start date",
      "issues": [
        "Line 322: Suspicious pattern: // Should still work, just reversed"
      ],
      "assertions": [
        {
          "line": 323,
          "type": "toBe",
          "value": "expect(result.total_days).toBe(5);",
          "isMeaningful": true
        },
        {
          "line": 324,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(5); // Mon-Fri",
          "isMeaningful": true
        },
        {
          "line": 325,
          "type": "toBe",
          "value": "expect(result.weekend_days).toBe(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 383,
      "name": "should throw error for invalid start date",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 386,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 402,
      "name": "should throw error for invalid end date",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 405,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 421,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 424,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 441,
      "name": "should throw error for invalid holiday date",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 444,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 509,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 530,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different keys",
          "isMeaningful": false
        },
        {
          "line": 531,
          "type": "toBe",
          "value": "expect(calls[1][0]).not.toBe(calls[2][0]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 536,
      "name": "should return all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 544,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('total_days');",
          "isMeaningful": false
        },
        {
          "line": 545,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('business_days');",
          "isMeaningful": false
        },
        {
          "line": 546,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('weekend_days');",
          "isMeaningful": false
        },
        {
          "line": 547,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('holiday_count');",
          "isMeaningful": false
        },
        {
          "line": 548,
          "type": "toBe",
          "value": "expect(typeof result.total_days).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 549,
          "type": "toBe",
          "value": "expect(typeof result.business_days).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 550,
          "type": "toBe",
          "value": "expect(typeof result.weekend_days).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 551,
          "type": "toBe",
          "value": "expect(typeof result.holiday_count).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 554,
      "name": "should ensure counts add up correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 564,
          "type": "toBe",
          "value": "expect(result.business_days + result.weekend_days + result.holiday_count).toBe(",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 571,
      "name": "should use system timezone when no timezone parameter provided",
      "issues": [
        "Line 580: Suspicious pattern: // Should interpret dates in America/New_York timezone"
      ],
      "assertions": [
        {
          "line": 582,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(5);",
          "isMeaningful": true
        },
        {
          "line": 583,
          "type": "toBe",
          "value": "expect(result.weekend_days).toBe(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.test.ts",
      "line": 586,
      "name": "should use explicit timezone parameter over system default",
      "issues": [
        "Line 596: Suspicious pattern: // Should use Asia/Tokyo, not the system default"
      ],
      "assertions": [
        {
          "line": 598,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(4); // Mon-Thu",
          "isMeaningful": true
        },
        {
          "line": 599,
          "type": "toBe",
          "value": "expect(result.weekend_days).toBe(1); // Sunday",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.holiday.test.ts",
      "line": 53,
      "name": "should handle unknown country gracefully",
      "issues": [
        "Line 62: Suspicious pattern: // Should work like no holidays"
      ],
      "assertions": [
        {
          "line": 63,
          "type": "toBe",
          "value": "expect(result.holiday_count).toBe(0);",
          "isMeaningful": true
        },
        {
          "line": 64,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(23); // Just weekdays",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.holiday.test.ts",
      "line": 116,
      "name": "should not double-count holidays",
      "issues": [
        "Line 126: Suspicious pattern: // Should only count July 4th once"
      ],
      "assertions": [
        {
          "line": 127,
          "type": "toBe",
          "value": "expect(result.holiday_count).toBe(1);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.holiday.test.ts",
      "line": 145,
      "name": "should combine all holiday sources",
      "issues": [
        "Line 156: Suspicious pattern: // Should have: Jan 1 (New Year's), Jan 15 (legacy), Jan 20 (MLK), Jan 22 (custom)"
      ],
      "assertions": [
        {
          "line": 157,
          "type": "toBe",
          "value": "expect(result.holiday_count).toBe(4);",
          "isMeaningful": true
        },
        {
          "line": 158,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(19); // 23 weekdays - 4 holidays",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/getBusinessDays.holiday.test.ts",
      "line": 180,
      "name": "should cache results with holiday calendar in key",
      "issues": [
        "Line 190: Suspicious pattern: // Should return same cached result",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 191,
          "type": "toEqual",
          "value": "expect(result2).toEqual(result1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 106,
      "name": "should handle relative formatting with timezone",
      "issues": [
        "Line 115: Suspicious pattern: // Should still show relative format, timezone affects calculation"
      ],
      "assertions": [
        {
          "line": 116,
          "type": "toMatch",
          "value": "expect(result.formatted).toMatch(/Monday at/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 250,
      "name": "should handle various input time formats",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 261,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 285,
      "name": "should throw error for invalid format type",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 288,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 304,
      "name": "should throw error for missing custom_format when format is custom",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 307,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 323,
      "name": "should throw error for empty custom_format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 326,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 343,
      "name": "should throw error for invalid time",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 346,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 362,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 365,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 415,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 436,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]);",
          "isMeaningful": false
        },
        {
          "line": 437,
          "type": "toBe",
          "value": "expect(calls[1][0]).not.toBe(calls[2][0]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 442,
      "name": "should handle invalid date gracefully",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 453,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('2025-03-02');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 493,
      "name": "should return all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 501,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('formatted');",
          "isMeaningful": false
        },
        {
          "line": 502,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('original');",
          "isMeaningful": false
        },
        {
          "line": 503,
          "type": "toBe",
          "value": "expect(typeof result.formatted).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 504,
          "type": "toBe",
          "value": "expect(typeof result.original).toBe('string');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 507,
      "name": "should preserve original time in ISO format",
      "issues": [
        "Line 515: Suspicious pattern: // Should convert to ISO8601 UTC"
      ],
      "assertions": [
        {
          "line": 516,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-20T09:00:00.000Z');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 521,
      "name": "should use system timezone when no timezone parameter provided",
      "issues": [
        "Line 530: Suspicious pattern: // Should format relative to NY time (9:30 AM EST)"
      ],
      "assertions": [
        {
          "line": 531,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('Monday at 9:30 AM');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 534,
      "name": "should still use UTC when empty string timezone provided (backward compatibility)",
      "issues": [
        "Line 544: Suspicious pattern: // Should use UTC, not system timezone (2:30 PM UTC)"
      ],
      "assertions": [
        {
          "line": 545,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('Monday at 2:30 PM');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 548,
      "name": "should use explicit timezone parameter over system default",
      "issues": [
        "Line 558: Suspicious pattern: // Should format relative to Tokyo time (11:30 PM JST)"
      ],
      "assertions": [
        {
          "line": 559,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('Monday at 11:30 PM');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 562,
      "name": "should apply system timezone for custom format",
      "issues": [
        "Line 572: Suspicious pattern: // Should format in NY time (EST or GMT-5 are both acceptable)"
      ],
      "assertions": [
        {
          "line": 573,
          "type": "toMatch",
          "value": "expect(result.formatted).toMatch(/2025-01-20 09:30:00 (EST|GMT-5)/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 576,
      "name": "should apply system timezone for calendar format",
      "issues": [
        "Line 585: Suspicious pattern: // Should format relative to NY time"
      ],
      "assertions": [
        {
          "line": 586,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('today at 3:30 PM');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/formatTime.test.ts",
      "line": 589,
      "name": "should handle system timezone in cache key",
      "issues": [
        "Line 598: Suspicious pattern: // Should include system timezone in cache key when no timezone provided"
      ],
      "assertions": [
        {
          "line": 599,
          "type": "unknown",
          "value": "expect(mockedCache.set).toHaveBeenCalledWith(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 11,
      "name": "should calculate days until a future date",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 17,
          "type": "toBe",
          "value": "expect(result).toBe(7);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 20,
      "name": "should return 0 for today",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 24,
          "type": "toBe",
          "value": "expect(result).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 27,
      "name": "should return negative days for past dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 32,
          "type": "toBe",
          "value": "expect(result).toBe(-5);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 35,
      "name": "should handle dates far in the future",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 37,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(1000); // At least 1000 days away",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 42,
      "name": "should accept ISO date format",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 47,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 50,
      "name": "should accept ISO datetime format",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 55,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 58,
      "name": "should handle natural language dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 64,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 69,
      "name": "should use system timezone when not specified",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 74,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 77,
      "name": "should use UTC when timezone is empty string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 85,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 88,
      "name": "should use specified timezone",
      "issues": [
        "Line 97: Suspicious pattern: // Should be a positive number (exact value depends on current date)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 98,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 103,
      "name": "should return plain number by default",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "toBe",
          "value": "expect(typeof result).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 109,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 112,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 119,
          "type": "toBe",
          "value": "expect(result).toBe('Today');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 122,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 130,
          "type": "toBe",
          "value": "expect(result).toBe('Tomorrow');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 133,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 141,
          "type": "toBe",
          "value": "expect(result).toBe('Yesterday');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 144,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 152,
          "type": "toBe",
          "value": "expect(result).toBe('in 10 days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 155,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 163,
          "type": "toBe",
          "value": "expect(result).toBe('5 days ago');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 168,
      "name": "should handle same day different times as 0 days",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 176,
          "type": "toBe",
          "value": "expect(result).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 179,
      "name": "should handle leap year dates",
      "issues": [
        "Line 183: Suspicious pattern: // Should be negative (in the past)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 182,
          "type": "toBe",
          "value": "expect(typeof result).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 184,
          "type": "toBeLessThan",
          "value": "expect(result).toBeLessThan(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 187,
      "name": "should handle year boundaries",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 190,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 215,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 216,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 228,
          "type": "toBe",
          "value": "expect(e.error.code).toBe(TimeServerErrorCodes.INVALID_TIMEZONE);",
          "isMeaningful": false
        },
        {
          "line": 229,
          "type": "toContain",
          "value": "expect(e.error.message).toContain('Invalid timezone');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 235,
      "name": "should calculate days until Christmas 2025",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 242,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(0);",
          "isMeaningful": false
        },
        {
          "line": 243,
          "type": "toBeLessThan",
          "value": "expect(result).toBeLessThan(365);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 246,
      "name": "should handle event planning scenario",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 257,
          "type": "toBe",
          "value": "expect(result).toBe('in 30 days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil.test.ts",
      "line": 260,
      "name": "should handle deadline tracking",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 268,
          "type": "toBe",
          "value": "expect(result).toBe(14);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil-refactor.test.ts",
      "line": 28,
      "name": "should parse Unix timestamp string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 30,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil-refactor.test.ts",
      "line": 33,
      "name": "should parse numeric Unix timestamp",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 35,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil-refactor.test.ts",
      "line": 38,
      "name": "should parse ISO date string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 40,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil-refactor.test.ts",
      "line": 60,
      "name": "should return same date for UTC timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 63,
          "type": "toBe",
          "value": "expect(result).toBe(date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/daysUntil-refactor.test.ts",
      "line": 66,
      "name": "should convert to specified timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 70,
          "type": "toBe",
          "value": "expect(result).not.toBe(date);",
          "isMeaningful": false
        },
        {
          "line": 72,
          "type": "toBeDefined",
          "value": "expect(result.valueOf()).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 108,
      "name": "should handle ISO8601 with Z",
      "issues": [
        "Line 113: Suspicious pattern: from_timezone: 'UTC', // Should be ignored due to Z"
      ],
      "assertions": [
        {
          "line": 117,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-07-18T12:00:00.000Z');",
          "isMeaningful": true
        },
        {
          "line": 118,
          "type": "toBe",
          "value": "expect(result.converted).toBe('2025-07-18T08:00:00.000-04:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 121,
      "name": "should handle ISO8601 with offset",
      "issues": [
        "Line 126: Suspicious pattern: from_timezone: 'America/New_York', // Should be ignored"
      ],
      "assertions": [
        {
          "line": 131,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-07-18T12:00:00.000+05:30');",
          "isMeaningful": true
        },
        {
          "line": 132,
          "type": "toBe",
          "value": "expect(result.converted).toBe('2025-07-18T06:30:00.000Z');",
          "isMeaningful": true
        },
        {
          "line": 133,
          "type": "toBe",
          "value": "expect(result.from_offset).toBe('+05:30');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 210,
      "name": "should throw error for invalid from_timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 213,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 221,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 238,
      "name": "should throw error for invalid to_timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 241,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 258,
      "name": "should throw error for invalid time format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 261,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 278,
      "name": "should throw error for invalid custom format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 281,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 337,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 354,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different cache keys",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone.test.ts",
      "line": 359,
      "name": "should always include all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 369,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('original');",
          "isMeaningful": false
        },
        {
          "line": 370,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('converted');",
          "isMeaningful": false
        },
        {
          "line": 371,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('from_offset');",
          "isMeaningful": false
        },
        {
          "line": 372,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('to_offset');",
          "isMeaningful": false
        },
        {
          "line": 373,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('difference');",
          "isMeaningful": false
        },
        {
          "line": 376,
          "type": "toBe",
          "value": "expect(typeof result.original).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 377,
          "type": "toBe",
          "value": "expect(typeof result.converted).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 378,
          "type": "toBe",
          "value": "expect(typeof result.from_offset).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 379,
          "type": "toBe",
          "value": "expect(typeof result.to_offset).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 380,
          "type": "toBe",
          "value": "expect(typeof result.difference).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-parsing.test.ts",
      "line": 27,
      "name": "should parse local time string with from_timezone",
      "issues": [
        "Line 30: Suspicious pattern: // Should be interpreted as New York time"
      ],
      "assertions": [
        {
          "line": 31,
          "type": "toEqual",
          "value": "expect(result.date).toEqual(new Date('2021-01-01T05:00:00.000Z'));",
          "isMeaningful": true
        },
        {
          "line": 32,
          "type": "toBe",
          "value": "expect(result.actualFromTimezone).toBe('America/New_York');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 7,
      "name": "should preserve explicit offset format",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 14,
          "type": "toBe",
          "value": "expect(result).toBe('2021-01-01T05:00:00.000+05:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 17,
      "name": "should add milliseconds if missing with explicit offset",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 20,
          "type": "toBe",
          "value": "expect(result).toBe('2021-01-01T05:00:00.000+05:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 23,
      "name": "should format time without explicit offset",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 26,
          "type": "toContain",
          "value": "expect(result).toContain('2020-12-31T19:00:00');",
          "isMeaningful": false
        },
        {
          "line": 27,
          "type": "toContain",
          "value": "expect(result).toContain('-05:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 30,
      "name": "should format UTC time",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 33,
          "type": "toBe",
          "value": "expect(result).toBe('2021-01-01T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 37,
      "name": "should log formatting attempts",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 39,
          "type": "toBeDefined",
          "value": "expect(result).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 45,
      "name": "should extract explicit offset from time string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 52,
          "type": "toBe",
          "value": "expect(result).toBe('+05:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 55,
      "name": "should return Z for Z suffix",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 58,
          "type": "toBe",
          "value": "expect(result).toBe('Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 61,
      "name": "should return Z for UTC timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 64,
          "type": "toBe",
          "value": "expect(result).toBe('Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 67,
      "name": "should format offset for timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 70,
          "type": "toBe",
          "value": "expect(result).toBe('-05:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 73,
      "name": "should handle negative offsets",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 80,
          "type": "toBe",
          "value": "expect(result).toBe('-08:00');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/convertTimezone-formatting.test.ts",
      "line": 84,
      "name": "should log extraction attempts",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 86,
          "type": "toBeDefined",
          "value": "expect(result).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 301,
      "name": "should throw error for invalid start time",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 304,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 320,
      "name": "should throw error for invalid end time",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 323,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 339,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 342,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 359,
      "name": "should throw error for invalid unit parameter",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 362,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 417,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 432,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different cache keys",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 464,
      "name": "should use system timezone when no timezone parameter provided",
      "issues": [
        "Line 473: Suspicious pattern: // Should interpret both times as America/New_York time"
      ],
      "assertions": [
        {
          "line": 474,
          "type": "toBe",
          "value": "expect(result.hours).toBe(5);",
          "isMeaningful": true
        },
        {
          "line": 475,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('5 hours');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 478,
      "name": "should use explicit timezone parameter over system default",
      "issues": [
        "Line 488: Suspicious pattern: // Should use Asia/Tokyo, not the system default"
      ],
      "assertions": [
        {
          "line": 489,
          "type": "toBe",
          "value": "expect(result.hours).toBe(5);",
          "isMeaningful": true
        },
        {
          "line": 490,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('5 hours');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration.test.ts",
      "line": 508,
      "name": "should handle times across DST boundaries with system timezone",
      "issues": [
        "Line 518: Suspicious pattern: // Should be 23 hours actual duration due to DST spring forward"
      ],
      "assertions": [
        {
          "line": 519,
          "type": "toBe",
          "value": "expect(result.hours).toBe(23);",
          "isMeaningful": true
        },
        {
          "line": 520,
          "type": "toBe",
          "value": "expect(result.formatted).toBe('23 hours');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 5,
      "name": "should parse valid Unix timestamp string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 7,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 20,
      "name": "should parse ISO string with Z suffix",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 22,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T12:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 25,
      "name": "should parse ISO string with offset",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 27,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T17:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 30,
      "name": "should parse ISO string with positive offset",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 32,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-01T03:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 37,
      "name": "should use provided timezone for local time string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 41,
          "type": "unknown",
          "value": "expect(result).toBeInstanceOf(Date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 44,
      "name": "should handle date-only strings with timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 46,
          "type": "unknown",
          "value": "expect(result).toBeInstanceOf(Date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-parsing.test.ts",
      "line": 66,
      "name": "should log parsing attempts",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 70,
          "type": "unknown",
          "value": "expect(result).toBeInstanceOf(Date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 67,
      "name": "should format with auto unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 69,
          "type": "toBe",
          "value": "expect(result).toBe('1 day 1 hour 1 minute 1 second');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 72,
      "name": "should format with seconds unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 74,
          "type": "toBe",
          "value": "expect(result).toBe('90061 seconds');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 77,
      "name": "should format with minutes unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 79,
          "type": "toBe",
          "value": "expect(result).toBe('1501.0166666666667 minutes');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 82,
      "name": "should format with hours unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 84,
          "type": "toBe",
          "value": "expect(result).toBe('25.016944444444444 hours');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 87,
      "name": "should format with days unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 89,
          "type": "toBe",
          "value": "expect(result).toBe('1.042372685185185 days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 92,
      "name": "should format negative durations with auto",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 95,
          "type": "toBe",
          "value": "expect(result).toBe('-1 day 1 hour 1 minute 1 second');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 98,
      "name": "should format zero duration",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "toBe",
          "value": "expect(result).toBe('0 seconds');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 111,
      "name": "should format milliseconds unit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 113,
          "type": "toBe",
          "value": "expect(result).toBe('90061000 milliseconds');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 116,
      "name": "should handle sub-second durations with auto",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 126,
          "type": "toBe",
          "value": "expect(result).toBe('0 seconds');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateDuration-calculation.test.ts",
      "line": 131,
      "name": "should log calculation values",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 137,
          "type": "toBeDefined",
          "value": "expect(values).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 140,
          "type": "toBeDefined",
          "value": "expect(formatted).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateBusinessHours.timezone.test.ts",
      "line": 21,
      "name": "should handle times in different timezone contexts correctly",
      "issues": [
        "Line 30: Suspicious pattern: // Should calculate 4 hours in Tokyo business hours",
        "Line 34: Suspicious pattern: // Should only have one day in the breakdown"
      ],
      "assertions": [
        {
          "line": 31,
          "type": "toBe",
          "value": "expect(result.total_business_hours).toBe(4);",
          "isMeaningful": true
        },
        {
          "line": 32,
          "type": "toBe",
          "value": "expect(result.total_business_minutes).toBe(240);",
          "isMeaningful": true
        },
        {
          "line": 35,
          "type": "unknown",
          "value": "expect(result.breakdown).toHaveLength(1);",
          "isMeaningful": true
        },
        {
          "line": 36,
          "type": "toBe",
          "value": "expect(result.breakdown[0].date).toBe('2025-01-21');",
          "isMeaningful": false
        },
        {
          "line": 37,
          "type": "toBe",
          "value": "expect(result.breakdown[0].day_of_week).toBe('Tuesday');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateBusinessHours.timezone.test.ts",
      "line": 68,
      "name": "should handle cross-day business hours in different timezones",
      "issues": [
        "Line 78: Suspicious pattern: // Should calculate business hours in Tokyo timezone"
      ],
      "assertions": [
        {
          "line": 79,
          "type": "toBe",
          "value": "expect(result.total_business_hours).toBe(4);",
          "isMeaningful": true
        },
        {
          "line": 80,
          "type": "toBe",
          "value": "expect(result.breakdown[0].date).toBe('2025-01-21'); // Tokyo date",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateBusinessHours.test.ts",
      "line": 265,
      "name": "should calculate business hours in specified timezone",
      "issues": [
        "Line 278: Suspicious pattern: // Should calculate 4 hours (10 AM - 2 PM in Tokyo)",
        "Line 282: Suspicious pattern: // Should have one day in breakdown with correct Tokyo date"
      ],
      "assertions": [
        {
          "line": 279,
          "type": "toBe",
          "value": "expect(result.total_business_hours).toBe(4);",
          "isMeaningful": true
        },
        {
          "line": 280,
          "type": "toBe",
          "value": "expect(result.total_business_minutes).toBe(240);",
          "isMeaningful": true
        },
        {
          "line": 283,
          "type": "unknown",
          "value": "expect(result.breakdown).toHaveLength(1);",
          "isMeaningful": true
        },
        {
          "line": 284,
          "type": "unknown",
          "value": "expect(result.breakdown[0]).toMatchObject({",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/calculateBusinessHours.test.ts",
      "line": 392,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 411,
          "type": "toBe",
          "value": "expect(firstCall).not.toBe(secondCall);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 161,
      "name": "should handle input with explicit timezone offset",
      "issues": [
        "Line 168: Suspicious pattern: timezone: 'America/New_York', // Should be ignored"
      ],
      "assertions": [
        {
          "line": 171,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-15T12:00:00.000+05:30');",
          "isMeaningful": true
        },
        {
          "line": 172,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-16T12:00:00.000+05:30');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 301,
      "name": "should throw error for invalid time format",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 304,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 321,
      "name": "should throw error for invalid unit",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 324,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 341,
      "name": "should throw error for invalid timezone",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 344,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 362,
      "name": "should throw error for NaN amount",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 365,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 382,
      "name": "should throw error for Infinity amount",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 385,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 439,
      "name": "should use different cache keys for different parameters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 456,
          "type": "toBe",
          "value": "expect(calls[0][0]).not.toBe(calls[1][0]); // Different cache keys",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 461,
      "name": "should always include all required fields",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 471,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('original');",
          "isMeaningful": false
        },
        {
          "line": 472,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('result');",
          "isMeaningful": false
        },
        {
          "line": 473,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix_original');",
          "isMeaningful": false
        },
        {
          "line": 474,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('unix_result');",
          "isMeaningful": false
        },
        {
          "line": 477,
          "type": "toBe",
          "value": "expect(typeof result.original).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 478,
          "type": "toBe",
          "value": "expect(typeof result.result).toBe('string');",
          "isMeaningful": false
        },
        {
          "line": 479,
          "type": "toBe",
          "value": "expect(typeof result.unix_original).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 480,
          "type": "toBe",
          "value": "expect(typeof result.unix_result).toBe('number');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 483,
      "name": "should format times consistently with milliseconds",
      "issues": [
        "Line 493: Suspicious pattern: // Should have .000 milliseconds format"
      ],
      "assertions": [
        {
          "line": 494,
          "type": "toMatch",
          "value": "expect(result.original).toMatch(/\\.\\d{3}/);",
          "isMeaningful": true
        },
        {
          "line": 495,
          "type": "toMatch",
          "value": "expect(result.result).toMatch(/\\.\\d{3}/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 500,
      "name": "should use system timezone when no timezone parameter provided",
      "issues": [
        "Line 510: Suspicious pattern: // Should interpret input time as America/New_York time"
      ],
      "assertions": [
        {
          "line": 511,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-20T12:00:00.000-05:00');",
          "isMeaningful": true
        },
        {
          "line": 512,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-20T13:00:00.000-05:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/addTime.test.ts",
      "line": 515,
      "name": "should use explicit timezone parameter over system default",
      "issues": [
        "Line 526: Suspicious pattern: // Should use Asia/Tokyo, not the system default"
      ],
      "assertions": [
        {
          "line": 527,
          "type": "toBe",
          "value": "expect(result.original).toBe('2025-01-20T12:00:00.000+09:00');",
          "isMeaningful": true
        },
        {
          "line": 528,
          "type": "toBe",
          "value": "expect(result.result).toBe('2025-01-20T13:00:00.000+09:00');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/addTime-validation.test.ts",
      "line": 20,
      "name": "should throw with correct error code and message",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 25,
          "type": "toBe",
          "value": "expect(error.error.code).toBe(TimeServerErrorCodes.INVALID_PARAMETER);",
          "isMeaningful": false
        },
        {
          "line": 26,
          "type": "toContain",
          "value": "expect(error.error.message).toContain('Invalid unit: weeks');",
          "isMeaningful": false
        },
        {
          "line": 27,
          "type": "toContain",
          "value": "expect(error.error.message).toContain(",
          "isMeaningful": false
        },
        {
          "line": 30,
          "type": "toEqual",
          "value": "expect(error.error.details).toEqual({ unit: 'weeks' });",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-validation.test.ts",
      "line": 54,
      "name": "should throw with correct error code and message",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 59,
          "type": "toBe",
          "value": "expect(error.error.code).toBe(TimeServerErrorCodes.INVALID_PARAMETER);",
          "isMeaningful": false
        },
        {
          "line": 60,
          "type": "toContain",
          "value": "expect(error.error.message).toContain('Invalid amount: NaN');",
          "isMeaningful": false
        },
        {
          "line": 61,
          "type": "toContain",
          "value": "expect(error.error.message).toContain('Must be a finite number');",
          "isMeaningful": false
        },
        {
          "line": 62,
          "type": "toEqual",
          "value": "expect(error.error.details).toEqual({ amount: NaN });",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-parsing.test.ts",
      "line": 51,
      "name": "should parse local time string",
      "issues": [
        "Line 54: Suspicious pattern: // Should be interpreted as New York time"
      ],
      "assertions": [
        {
          "line": 55,
          "type": "toEqual",
          "value": "expect(result.date).toEqual(new Date('2021-01-01T05:00:00.000Z'));",
          "isMeaningful": true
        },
        {
          "line": 56,
          "type": "toBe",
          "value": "expect(result.displayTimezone).toBe('America/New_York');",
          "isMeaningful": true
        },
        {
          "line": 57,
          "type": "toBe",
          "value": "expect(result.hasExplicitOffset).toBe(false);",
          "isMeaningful": true
        },
        {
          "line": 58,
          "type": "toBe",
          "value": "expect(result.explicitOffset).toBe('');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/tools/addTime-parsing-helpers.test.ts",
      "line": 11,
      "name": "should parse valid Unix timestamp",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 13,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-01-01T00:00:00.000Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-parsing-helpers.test.ts",
      "line": 16,
      "name": "should return null for non-numeric strings",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 18,
          "type": "toBeNull",
          "value": "expect(result).toBeNull();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-parsing-helpers.test.ts",
      "line": 21,
      "name": "should return null for invalid timestamps",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 23,
          "type": "toBeNull",
          "value": "expect(result).toBeNull();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-parsing-helpers.test.ts",
      "line": 26,
      "name": "should handle timestamps with leading/trailing spaces",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 28,
          "type": "toBeNull",
          "value": "expect(result).toBeNull(); // Only pure digits allowed",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/addTime-formatting.test.ts",
      "line": 148,
      "name": "should log formatting attempts",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 168,
          "type": "toBeDefined",
          "value": "expect(result).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 70,
      "name": "should sanitize XSS attempts in format strings",
      "issues": [
        "Line 78: Suspicious pattern: // Should either error or return safe output"
      ],
      "assertions": [
        {
          "line": 80,
          "type": "toContain",
          "value": "expect(result.time).not.toContain('<script>');",
          "isMeaningful": true
        },
        {
          "line": 81,
          "type": "toContain",
          "value": "expect(result.time).not.toContain('alert');",
          "isMeaningful": true
        },
        {
          "line": 85,
          "type": "toBeDefined",
          "value": "expect(error).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 156,
      "name": "should handle extremely large date ranges",
      "issues": [
        "Line 165: Suspicious pattern: // Should either handle gracefully or error",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 167,
          "type": "toBe",
          "value": "expect(typeof result.business_days).toBe('number');",
          "isMeaningful": false
        },
        {
          "line": 171,
          "type": "toBeDefined",
          "value": "expect(error).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 177,
      "name": "should handle large holiday arrays",
      "issues": [
        "Line 188: Suspicious pattern: // Should handle gracefully"
      ],
      "assertions": [
        {
          "line": 189,
          "type": "toBeDefined",
          "value": "expect(result.business_days).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 192,
          "type": "toBeDefined",
          "value": "expect(error).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 200,
      "name": "should ignore __proto__ in parameters",
      "issues": [
        "Line 210: Suspicious pattern: // Should work normally, ignoring __proto__"
      ],
      "assertions": [
        {
          "line": 211,
          "type": "toBeDefined",
          "value": "expect(result.business_days).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 212,
          "type": "toBeUndefined",
          "value": "expect((Object.prototype as any).polluted).toBeUndefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 218,
      "name": "should ignore constructor.prototype in parameters",
      "issues": [
        "Line 229: Suspicious pattern: // Should work normally",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 230,
          "type": "toBeDefined",
          "value": "expect(result).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 231,
          "type": "toBeUndefined",
          "value": "expect((Object.prototype as any).polluted).toBeUndefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 239,
      "name": "should handle null timezone gracefully",
      "issues": [
        "Line 247: Suspicious pattern: // Should use default timezone"
      ],
      "assertions": [
        {
          "line": 248,
          "type": "toBeDefined",
          "value": "expect(result.time).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 249,
          "type": "toBeDefined",
          "value": "expect(result.timezone).toBeDefined();",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/mcp-attack-vectors.test.ts",
      "line": 271,
      "name": "should handle negative amount overflow",
      "issues": [
        "Line 281: Suspicious pattern: // Should either handle or error gracefully",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 283,
          "type": "toBeDefined",
          "value": "expect(result).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 286,
          "type": "toBeDefined",
          "value": "expect(error).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 22,
      "name": "should accept timezone strings up to 100 characters",
      "issues": [
        "Line 29: Suspicious pattern: // Should fail timezone validation, not length",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 30,
          "type": "toBe",
          "value": "expect(e.error.code).toBe(TimeServerErrorCodes.INVALID_TIMEZONE);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 36,
      "name": "should reject date strings over 100 characters",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 39,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 54,
          "type": "toBe",
          "value": "expect(e.error.code).toBe(TimeServerErrorCodes.INVALID_PARAMETER);",
          "isMeaningful": false
        },
        {
          "line": 55,
          "type": "toContain",
          "value": "expect(e.error.message).toContain('exceeds maximum length');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 89,
      "name": "should accept format strings up to 200 characters",
      "issues": [
        "Line 93: Suspicious pattern: // Should not throw for length"
      ],
      "assertions": [
        {
          "line": 94,
          "type": "toThrow",
          "value": "expect(() => getCurrentTime({ format: maxFormat })).not.toThrow(/exceeds maximum length/);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 114,
      "name": "should reject holiday arrays with more than 365 items",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 117,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 132,
          "type": "toBe",
          "value": "expect(e.error.code).toBe(TimeServerErrorCodes.INVALID_PARAMETER);",
          "isMeaningful": false
        },
        {
          "line": 133,
          "type": "toContain",
          "value": "expect(e.error.message).toContain('exceeds maximum array length');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 137,
      "name": "should accept holiday arrays with up to 365 items",
      "issues": [
        "Line 140: Suspicious pattern: // Should not throw for array length"
      ],
      "assertions": [
        {
          "line": 149,
          "type": "toBeDefined",
          "value": "expect(result.business_days).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 150,
          "type": "unknown",
          "value": "expect(result.business_days).toBeGreaterThanOrEqual(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 208,
      "name": "should handle very long but valid format strings",
      "issues": [
        "Line 212: Suspicious pattern: // Should work fine if under 200 chars"
      ],
      "assertions": [
        {
          "line": 213,
          "type": "toThrow",
          "value": "expect(() => getCurrentTime({ format: longValidFormat })).not.toThrow();",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/inputValidation.test.ts",
      "line": 216,
      "name": "should handle arrays with mixed valid/invalid dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 224,
          "type": "unknown",
          "value": "expect(() =>",
          "isMeaningful": false
        },
        {
          "line": 239,
          "type": "toBe",
          "value": "expect(e.error.code).toBe(TimeServerErrorCodes.INVALID_PARAMETER);",
          "isMeaningful": false
        },
        {
          "line": 240,
          "type": "toContain",
          "value": "expect(e.error.message).toContain('exceeds maximum length');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 14,
      "name": "should hash cache keys to prevent filesystem issues",
      "issues": [
        "Line 27: Suspicious pattern: // Should be a 64-char hex string (SHA-256)"
      ],
      "assertions": [
        {
          "line": 24,
          "type": "toHaveBeenCalled",
          "value": "expect(setSpy).toHaveBeenCalled();",
          "isMeaningful": false
        },
        {
          "line": 28,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 29,
          "type": "toBe",
          "value": "expect(actualKey.length).toBe(64);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 32,
      "name": "should generate different hashes for different inputs",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 42,
          "type": "toBe",
          "value": "expect(key1).not.toBe(key2);",
          "isMeaningful": false
        },
        {
          "line": 43,
          "type": "toMatch",
          "value": "expect(key1).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 44,
          "type": "toMatch",
          "value": "expect(key2).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 47,
      "name": "should handle filesystem-problematic characters in cache keys",
      "issues": [
        "Line 64: Suspicious pattern: // Should be hashed, not contain any problematic components",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 65,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 66,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain('/');",
          "isMeaningful": false
        },
        {
          "line": 67,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain(':');",
          "isMeaningful": false
        },
        {
          "line": 68,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain(' ');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 72,
      "name": "should handle timezone strings with various valid characters",
      "issues": [
        "Line 93: Suspicious pattern: // Should not contain any of the original characters except hex",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 92,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 94,
          "type": "toMatch",
          "value": "expect(actualKey).not.toMatch(/[/_+\\-A-Z]/);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 98,
      "name": "should handle long but valid format strings",
      "issues": [
        "Line 106: Suspicious pattern: // Should still be exactly 64 chars after hashing"
      ],
      "assertions": [
        {
          "line": 107,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 108,
          "type": "toBe",
          "value": "expect(actualKey.length).toBe(64);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 111,
      "name": "should handle all parameter combinations",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 122,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 124,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain('America');",
          "isMeaningful": false
        },
        {
          "line": 125,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain('false');",
          "isMeaningful": false
        },
        {
          "line": 126,
          "type": "toContain",
          "value": "expect(actualKey).not.toContain('yyyy');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 129,
      "name": "should produce consistent hashes for the same input",
      "issues": [
        "Line 146: Suspicious pattern: // Should produce identical hashes",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 147,
          "type": "toBe",
          "value": "expect(key1).toBe(key2);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 150,
      "name": "should work correctly with cache get operations",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 162,
          "type": "toBe",
          "value": "expect(setKey).toBe(getKey);",
          "isMeaningful": false
        },
        {
          "line": 163,
          "type": "toMatch",
          "value": "expect(setKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        },
        {
          "line": 164,
          "type": "toEqual",
          "value": "expect(result1).toEqual(result2);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 169,
      "name": "should use the same hashing method across all tools",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 186,
          "type": "toMatch",
          "value": "expect(actualKey).toMatch(/^[a-f0-9]{64}$/);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/security/cacheKeySanitization.test.ts",
      "line": 192,
      "name": "should hash keys efficiently",
      "issues": [
        "Line 204: Suspicious pattern: // Should be very fast - less than 1ms per call including the actual operation",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 205,
          "type": "toBeLessThan",
          "value": "expect(perCall).toBeLessThan(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 18,
      "name": "getCurrentTime - cached",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 30,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(5); // Increased from 1ms to account for SHA-256 hashing",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 33,
      "name": "getBusinessDays - cached",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 50,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(5); // Increased from 1ms to account for SHA-256 hashing",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 55,
      "name": "getCurrentTime - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 61,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(10);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 64,
      "name": "convertTimezone - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 74,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(10);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 77,
      "name": "calculateDuration - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 87,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(10);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 92,
      "name": "getBusinessDays with holidays - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 104,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(50);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 107,
      "name": "calculateBusinessHours with holidays - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 119,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(50);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 122,
      "name": "getBusinessDays with Easter holidays - fresh",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 133,
          "type": "toBeLessThan",
          "value": "expect(durationMs).toBeLessThan(50);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/performance/benchmark.test.ts",
      "line": 138,
      "name": "100 getCurrentTime calls should average < 1ms each",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 152,
          "type": "toBeLessThan",
          "value": "expect(avgMs).toBeLessThan(5); // Increased from 1ms to account for SHA-256 hashing",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/meta/test-quality.test.ts",
      "line": 41,
      "name": "async tests should properly await their assertions",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 53,
          "type": "unknown",
          "value": "if (nextLines.includes('expect(') && !nextLines.includes('await')) {",
          "isMeaningful": false
        },
        {
          "line": 63,
          "type": "toEqual",
          "value": "expect(issues).toEqual([]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/meta/test-quality.test.ts",
      "line": 66,
      "name": "error handling tests should have error assertions",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 81,
          "type": "toBe",
          "value": "expect(missingErrorAssertions.length).toBe(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/meta/test-quality.test.ts",
      "line": 84,
      "name": "no test should use console.log instead of assertions",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 115,
          "type": "unknown",
          "value": "if (line.includes('expect(')) hasExpect = true;",
          "isMeaningful": false
        },
        {
          "line": 122,
          "type": "toEqual",
          "value": "expect(issues).toEqual([]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/meta/test-quality.test.ts",
      "line": 134,
      "name": "should generate a comprehensive test quality report",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 139,
          "type": "toContain",
          "value": "expect(report).toContain('TEST ASSERTION ANALYSIS REPORT');",
          "isMeaningful": false
        },
        {
          "line": 140,
          "type": "toContain",
          "value": "expect(report).toContain('Total Tests Analyzed:');",
          "isMeaningful": false
        },
        {
          "line": 141,
          "type": "toContain",
          "value": "expect(report).toContain('RECOMMENDATIONS');",
          "isMeaningful": false
        },
        {
          "line": 150,
          "type": "toBe",
          "value": "expect(fs.existsSync(reportPath)).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 151,
          "type": "toBe",
          "value": "expect(fs.existsSync(path.join(process.cwd(), 'test-assertion-report.json'))).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/toolDescriptions.test.ts",
      "line": 5,
      "name": "should return tool descriptions with system timezone as default",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 22,
          "type": "toBeDefined",
          "value": "expect(getCurrentTimeTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 24,
          "type": "toBe",
          "value": "expect(getCurrentTimeSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 30,
          "type": "toBeDefined",
          "value": "expect(addTimeTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 32,
          "type": "toBe",
          "value": "expect(addTimeSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 38,
          "type": "toBeDefined",
          "value": "expect(subtractTimeTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 40,
          "type": "toBe",
          "value": "expect(subtractTimeSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 46,
          "type": "toBeDefined",
          "value": "expect(calculateDurationTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 48,
          "type": "toBe",
          "value": "expect(calculateDurationSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 54,
          "type": "toBeDefined",
          "value": "expect(getBusinessDaysTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 56,
          "type": "toBe",
          "value": "expect(getBusinessDaysSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 62,
          "type": "toBeDefined",
          "value": "expect(nextOccurrenceTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 64,
          "type": "toBe",
          "value": "expect(nextOccurrenceSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 70,
          "type": "toBeDefined",
          "value": "expect(formatTimeTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 72,
          "type": "toBe",
          "value": "expect(formatTimeSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 78,
          "type": "toBeDefined",
          "value": "expect(convertTimezoneTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 80,
          "type": "toBe",
          "value": "expect(convertTimezoneSchema?.properties?.from_timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 83,
          "type": "toBe",
          "value": "expect(convertTimezoneSchema?.properties?.to_timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 89,
          "type": "toBeDefined",
          "value": "expect(daysUntilTool).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 90,
          "type": "toBe",
          "value": "expect(daysUntilTool?.description).toBe('Calculate days until a target date/event');",
          "isMeaningful": false
        },
        {
          "line": 92,
          "type": "toBe",
          "value": "expect(daysUntilSchema?.properties?.timezone?.description).toBe(",
          "isMeaningful": false
        },
        {
          "line": 95,
          "type": "toEqual",
          "value": "expect(daysUntilSchema?.required).toEqual(['target_date']);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/setup.test.ts",
      "line": 7,
      "name": "should create linked transport pair",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 9,
          "type": "toBeDefined",
          "value": "expect(clientTransport).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 10,
          "type": "toBeDefined",
          "value": "expect(serverTransport).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/setup.test.ts",
      "line": 15,
      "name": "should connect client and server",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 18,
          "type": "toBeDefined",
          "value": "expect(client).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 19,
          "type": "toBeDefined",
          "value": "expect(server).toBeDefined();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/setup.test.ts",
      "line": 42,
      "name": "should create environment with custom rate limits",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 52,
          "type": "toBe",
          "value": "expect(process.env.RATE_LIMIT).toBe('10');",
          "isMeaningful": false
        },
        {
          "line": 53,
          "type": "toBe",
          "value": "expect(process.env.RATE_LIMIT_WINDOW).toBe('5000');",
          "isMeaningful": false
        },
        {
          "line": 58,
          "type": "toBe",
          "value": "expect(process.env.RATE_LIMIT).toBe(originalRateLimit);",
          "isMeaningful": false
        },
        {
          "line": 59,
          "type": "toBe",
          "value": "expect(process.env.RATE_LIMIT_WINDOW).toBe(originalWindow);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/rateLimiting.test.ts",
      "line": 35,
      "name": "should allow requests after rate limit window",
      "issues": [
        "Line 47: Suspicious pattern: // Should be blocked",
        "Line 55: Suspicious pattern: // Should work again"
      ],
      "assertions": [
        {
          "line": 48,
          "type": "unknown",
          "value": "await expect(callTool(client, 'get_current_time', {})).rejects.toMatchObject({",
          "isMeaningful": true
        },
        {
          "line": 56,
          "type": "unknown",
          "value": "await expect(callTool(client, 'get_current_time', {})).resolves.toHaveProperty('timezone');",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/rateLimiting.test.ts",
      "line": 129,
      "name": "should count different tools towards same rate limit",
      "issues": [
        "Line 141: Suspicious pattern: // Should be at limit now, any tool should fail"
      ],
      "assertions": [
        {
          "line": 142,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/maxListeners.test.ts",
      "line": 12,
      "name": "should handle many concurrent requests without MaxListenersExceededWarning",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 38,
          "type": "unknown",
          "value": "expect(maxListenerWarnings).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/maxListeners.test.ts",
      "line": 48,
      "name": "should handle rapid sequential requests without warnings",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 68,
          "type": "unknown",
          "value": "expect(maxListenerWarnings).toHaveLength(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 6,
      "name": "should handle concurrent requests",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 18,
          "type": "unknown",
          "value": "expect(results[0]).toHaveProperty('timezone', 'UTC');",
          "isMeaningful": false
        },
        {
          "line": 19,
          "type": "unknown",
          "value": "expect(results[1]).toHaveProperty('result');",
          "isMeaningful": false
        },
        {
          "line": 20,
          "type": "unknown",
          "value": "expect(results[2]).toHaveProperty('formatted');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 53,
      "name": "should handle concurrent requests with different tools",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 83,
          "type": "unknown",
          "value": "expect(results[0]).toHaveProperty('timezone');",
          "isMeaningful": false
        },
        {
          "line": 84,
          "type": "unknown",
          "value": "expect(results[1]).toHaveProperty('converted');",
          "isMeaningful": false
        },
        {
          "line": 85,
          "type": "unknown",
          "value": "expect(results[2]).toHaveProperty('result');",
          "isMeaningful": false
        },
        {
          "line": 86,
          "type": "unknown",
          "value": "expect(results[3]).toHaveProperty('hours', 24);",
          "isMeaningful": false
        },
        {
          "line": 87,
          "type": "unknown",
          "value": "expect(results[4]).toHaveProperty('business_days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 93,
      "name": "should handle concurrent requests with errors",
      "issues": [
        "Line 98: Suspicious pattern: callTool(client, 'get_current_time', {}), // Should succeed",
        "Line 101: Suspicious pattern: ), // Should fail",
        "Line 102: Suspicious pattern: callTool(client, 'format_time', { time: '2025-01-01', format: 'relative' }), // Should succeed",
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "unknown",
          "value": "expect(results[0]).toHaveProperty('timezone');",
          "isMeaningful": false
        },
        {
          "line": 111,
          "type": "unknown",
          "value": "expect(results[1]).toBeInstanceOf(Error);",
          "isMeaningful": false
        },
        {
          "line": 112,
          "type": "unknown",
          "value": "expect(results[1]).toHaveProperty('code', 'INVALID_DATE_FORMAT');",
          "isMeaningful": false
        },
        {
          "line": 115,
          "type": "unknown",
          "value": "expect(results[2]).toHaveProperty('formatted');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 123,
      "name": "should maintain message order",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 134,
          "type": "toBe",
          "value": "expect(requests[0].params.name).toBe('get_current_time');",
          "isMeaningful": false
        },
        {
          "line": 135,
          "type": "toBe",
          "value": "expect(requests[1].params.name).toBe('add_time');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 172,
      "name": "should match request and response IDs",
      "issues": [
        "Line 182: Suspicious pattern: // Should have one request and one response",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 186,
          "type": "toBeDefined",
          "value": "expect(request).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 187,
          "type": "toBeDefined",
          "value": "expect(response).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 188,
          "type": "toBe",
          "value": "expect(response?.id).toBe(request?.id);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 194,
      "name": "should handle interleaved concurrent requests correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 207,
          "type": "toBe",
          "value": "expect(results[0].timezone).toBe('UTC');",
          "isMeaningful": false
        },
        {
          "line": 208,
          "type": "toBe",
          "value": "expect(results[1].timezone).toBe('America/New_York');",
          "isMeaningful": false
        },
        {
          "line": 209,
          "type": "toBe",
          "value": "expect(results[2].timezone).toBe('Asia/Tokyo');",
          "isMeaningful": false
        },
        {
          "line": 214,
          "type": "toBe",
          "value": "expect(new Set(ids).size).toBe(ids.length);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 222,
      "name": "should handle rapid sequential requests",
      "issues": [
        "Line 247: Suspicious pattern: // Should complete reasonably quickly (under 1 second for 10 requests)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 242,
          "type": "unknown",
          "value": "expect(results).toHaveLength(10);",
          "isMeaningful": false
        },
        {
          "line": 244,
          "type": "unknown",
          "value": "expect(result).toHaveProperty('timezone');",
          "isMeaningful": false
        },
        {
          "line": 248,
          "type": "toBeLessThan",
          "value": "expect(totalTime).toBeLessThan(1000);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/advanced.test.ts",
      "line": 254,
      "name": "should handle mixed concurrent and sequential requests",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 282,
          "type": "unknown",
          "value": "expect(seq1).toHaveProperty('timezone');",
          "isMeaningful": false
        },
        {
          "line": 283,
          "type": "unknown",
          "value": "expect(seq2).toHaveProperty('result');",
          "isMeaningful": false
        },
        {
          "line": 284,
          "type": "unknown",
          "value": "expect(concurrentResults[0]).toHaveProperty('formatted');",
          "isMeaningful": false
        },
        {
          "line": 285,
          "type": "unknown",
          "value": "expect(concurrentResults[1]).toHaveProperty('hours');",
          "isMeaningful": false
        },
        {
          "line": 286,
          "type": "unknown",
          "value": "expect(seq3).toHaveProperty('business_days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/edge-cases/timezone-boundaries.test.ts",
      "line": 40,
      "name": "business days calculation should handle timezone boundaries",
      "issues": [
        "Line 50: Suspicious pattern: // Should get consistent results regardless of time of day"
      ],
      "assertions": [
        {
          "line": 51,
          "type": "toBeGreaterThan",
          "value": "expect(result.business_days).toBeGreaterThan(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/edge-cases/timezone-boundaries.test.ts",
      "line": 64,
      "name": "should handle spring forward correctly",
      "issues": [
        "Line 73: Suspicious pattern: // Should still be the same day"
      ],
      "assertions": [
        {
          "line": 74,
          "type": "toBe",
          "value": "expect(daysUntil({ target_date: beforeDST })).toBe(0);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/edge-cases/timezone-boundaries.test.ts",
      "line": 77,
      "name": "should handle fall back correctly",
      "issues": [
        "Line 88: Suspicious pattern: // Should still be the same day",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 89,
          "type": "toBe",
          "value": "expect(beforeDST).toBe(afterDST);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/edge-cases/timezone-boundaries.test.ts",
      "line": 102,
      "name": "should handle year transition correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 109,
          "type": "toBe",
          "value": "expect(todayResult).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 110,
          "type": "toBe",
          "value": "expect(tomorrowResult).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/edge-cases/timezone-boundaries.test.ts",
      "line": 113,
      "name": "should handle leap year correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 120,
          "type": "toBe",
          "value": "expect(feb29Result).toBe(1);",
          "isMeaningful": false
        },
        {
          "line": 121,
          "type": "toBe",
          "value": "expect(mar1Result).toBe(2);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 115,
      "name": "should have ${expected.name} on ${expected.date}",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 127,
          "type": "toBeDefined",
          "value": "expect(holiday).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 130,
          "type": "toBe",
          "value": "expect(actualDateStr).toBe(expected.date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 144,
      "name": "should have ${expected.name} on ${expected.date}",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 155,
          "type": "toBeDefined",
          "value": "expect(holiday).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 158,
          "type": "toBe",
          "value": "expect(actualDateStr).toBe(expected.date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 165,
      "name": "should correctly calculate fixed date holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 168,
          "type": "toBe",
          "value": "expect(july4?.date.toISOString().split('T')[0]).toBe('2025-07-04');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 171,
      "name": "should correctly calculate nth weekday holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 174,
          "type": "toBe",
          "value": "expect(mlk?.date.toISOString().split('T')[0]).toBe('2025-01-20');",
          "isMeaningful": false
        },
        {
          "line": 175,
          "type": "toBe",
          "value": "expect(mlk?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 178,
      "name": "should correctly calculate last weekday holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 181,
          "type": "toBe",
          "value": "expect(memorial?.date.toISOString().split('T')[0]).toBe('2025-05-26');",
          "isMeaningful": false
        },
        {
          "line": 182,
          "type": "toBe",
          "value": "expect(memorial?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 185,
      "name": "should correctly calculate Easter-based holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 190,
          "type": "toBe",
          "value": "expect(goodFriday?.date.toISOString().split('T')[0]).toBe('2025-04-18');",
          "isMeaningful": false
        },
        {
          "line": 191,
          "type": "toBe",
          "value": "expect(easterMonday?.date.toISOString().split('T')[0]).toBe('2025-04-21');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 194,
      "name": "should correctly calculate Victoria Day (special rule)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 197,
          "type": "toBe",
          "value": "expect(victoria?.date.toISOString().split('T')[0]).toBe('2025-05-19');",
          "isMeaningful": false
        },
        {
          "line": 198,
          "type": "toBe",
          "value": "expect(victoria?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 203,
      "name": "should have consistent holiday counts across years",
      "issues": [
        "Line 209: Suspicious pattern: // Should have same number of holidays (unless new ones added)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 210,
          "type": "unknown",
          "value": "expect(Math.abs(holidays2025.length - holidays2026.length)).toBeLessThanOrEqual(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.verification.test.ts",
      "line": 214,
      "name": "should calculate weekday holidays correctly across years",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 223,
          "type": "toBe",
          "value": "expect(mlk2025?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        },
        {
          "line": 224,
          "type": "toBe",
          "value": "expect(mlk2026?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        },
        {
          "line": 225,
          "type": "unknown",
          "value": "expect(mlk2025?.date.getDate()).toBeGreaterThanOrEqual(15);",
          "isMeaningful": false
        },
        {
          "line": 226,
          "type": "unknown",
          "value": "expect(mlk2025?.date.getDate()).toBeLessThanOrEqual(21);",
          "isMeaningful": false
        },
        {
          "line": 227,
          "type": "unknown",
          "value": "expect(mlk2026?.date.getDate()).toBeGreaterThanOrEqual(15);",
          "isMeaningful": false
        },
        {
          "line": 228,
          "type": "unknown",
          "value": "expect(mlk2026?.date.getDate()).toBeLessThanOrEqual(21);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 32,
      "name": "should return correct number of holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 34,
          "type": "unknown",
          "value": "expect(result).toHaveLength(12);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 38,
      "name": "should include ${englishName} on ${date}",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 43,
          "type": "toBeDefined",
          "value": "expect(holiday).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 44,
          "type": "toBe",
          "value": "expect(holiday?.date.toISOString().split('T')[0]).toBe(date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 48,
      "name": "should calculate Carnival dates based on Easter",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 54,
          "type": "toBe",
          "value": "expect(carnivalMonday?.date.toISOString().split('T')[0]).toBe('2025-03-03');",
          "isMeaningful": false
        },
        {
          "line": 55,
          "type": "toBe",
          "value": "expect(carnivalTuesday?.date.toISOString().split('T')[0]).toBe('2025-03-04');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 60,
      "name": "should calculate different Carnival dates for 2026",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 66,
          "type": "toBe",
          "value": "expect(carnivalMonday?.date.toISOString().split('T')[0]).toBe('2026-02-16');",
          "isMeaningful": false
        },
        {
          "line": 67,
          "type": "toBe",
          "value": "expect(carnivalTuesday?.date.toISOString().split('T')[0]).toBe('2026-02-17');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 72,
      "name": "should recognize VE holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 74,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 1), 'VE')).toBe(true); // Jan 1",
          "isMeaningful": false
        },
        {
          "line": 75,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 2, 3), 'VE')).toBe(true); // March 3 - Carnival Monday",
          "isMeaningful": false
        },
        {
          "line": 76,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 11, 25), 'VE')).toBe(true); // Dec 25",
          "isMeaningful": false
        },
        {
          "line": 77,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 2), 'VE')).toBe(false); // Jan 2",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 125,
      "name": "should return correct number of holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 127,
          "type": "unknown",
          "value": "expect(result).toHaveLength(16);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 131,
      "name": "should include ${englishName} on ${date}${originalDate ? ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 139,
          "type": "toBeDefined",
          "value": "expect(holiday).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 140,
          "type": "toBe",
          "value": "expect(holiday?.date.toISOString().split('T')[0]).toBe(date);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 146,
      "name": "should move Sunday holidays to Monday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 151,
          "type": "toBe",
          "value": "expect(sanPedro?.date.toISOString().split('T')[0]).toBe('2025-06-30');",
          "isMeaningful": false
        },
        {
          "line": 152,
          "type": "toBe",
          "value": "expect(sanPedro?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        },
        {
          "line": 156,
          "type": "toBe",
          "value": "expect(encuentro?.date.toISOString().split('T')[0]).toBe('2025-10-13');",
          "isMeaningful": false
        },
        {
          "line": 157,
          "type": "toBe",
          "value": "expect(encuentro?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 160,
      "name": "should move Tuesday/Wednesday/Thursday holidays to previous Monday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 165,
          "type": "toBe",
          "value": "expect(sanPedro2027?.date.toISOString().split('T')[0]).toBe('2027-06-28'); // Previous Monday",
          "isMeaningful": false
        },
        {
          "line": 166,
          "type": "toBe",
          "value": "expect(sanPedro2027?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 169,
      "name": "should move Saturday holidays to Monday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 174,
          "type": "toBe",
          "value": "expect(encuentro2024?.date.toISOString().split('T')[0]).toBe('2024-10-14'); // Next Monday",
          "isMeaningful": false
        },
        {
          "line": 175,
          "type": "toBe",
          "value": "expect(encuentro2024?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 178,
      "name": "should not move Friday holidays (already creates long weekend)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 182,
          "type": "toBe",
          "value": "expect(encuentro2029?.date.toISOString().split('T')[0]).toBe('2029-10-12'); // Stays on Friday",
          "isMeaningful": false
        },
        {
          "line": 183,
          "type": "toBe",
          "value": "expect(encuentro2029?.date.getDay()).toBe(5); // Friday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 186,
      "name": "should not move Monday holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 190,
          "type": "toBe",
          "value": "expect(sanPedro2026?.date.toISOString().split('T')[0]).toBe('2026-06-29'); // Stays on Monday",
          "isMeaningful": false
        },
        {
          "line": 191,
          "type": "toBe",
          "value": "expect(sanPedro2026?.date.getDay()).toBe(1); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ve-cl.test.ts",
      "line": 196,
      "name": "should recognize CL holidays including moved ones",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 198,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 1), 'CL')).toBe(true); // Jan 1",
          "isMeaningful": false
        },
        {
          "line": 199,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 5, 30), 'CL')).toBe(true); // June 30 - Moved San Pedro",
          "isMeaningful": false
        },
        {
          "line": 200,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 5, 29), 'CL')).toBe(false); // June 29 - Original date, not a holiday",
          "isMeaningful": false
        },
        {
          "line": 201,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 9, 13), 'CL')).toBe(true); // Oct 13 - Moved Encuentro",
          "isMeaningful": false
        },
        {
          "line": 202,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 9, 12), 'CL')).toBe(false); // Oct 12 - Original date, not a holiday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 36,
      "name": "should return empty array for unknown country",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 38,
          "type": "toEqual",
          "value": "expect(unknownHolidays).toEqual([]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 43,
      "name": "should calculate fixed holiday date for a year",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 53,
          "type": "toEqual",
          "value": "expect(date).toEqual(new Date(2025, 6, 4)); // July 4, 2025",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 56,
      "name": "should handle leap year for Feb 29",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 66,
          "type": "toEqual",
          "value": "expect(date2024).toEqual(new Date(2024, 1, 29));",
          "isMeaningful": false
        },
        {
          "line": 69,
          "type": "toBeNull",
          "value": "expect(date2025).toBeNull(); // Not a leap year",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 74,
      "name": "should calculate MLK Day (3rd Monday in January)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 85,
          "type": "toEqual",
          "value": "expect(date2025).toEqual(new Date(2025, 0, 20)); // January 20, 2025",
          "isMeaningful": false
        },
        {
          "line": 88,
          "type": "toEqual",
          "value": "expect(date2024).toEqual(new Date(2024, 0, 15)); // January 15, 2024",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 91,
      "name": "should calculate Thanksgiving (4th Thursday in November)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 102,
          "type": "toEqual",
          "value": "expect(date2025).toEqual(new Date(2025, 10, 27)); // November 27, 2025",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 105,
      "name": "should calculate Memorial Day (last Monday in May)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 116,
          "type": "toEqual",
          "value": "expect(date2025).toEqual(new Date(2025, 4, 26)); // May 26, 2025",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 119,
      "name": "should return null for non-existent occurrence",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 130,
          "type": "toBeNull",
          "value": "expect(date).toBeNull();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 135,
      "name": "should apply US Federal observation rules",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 139,
          "type": "toEqual",
          "value": "expect(observed).toEqual(new Date(2026, 6, 3)); // Friday",
          "isMeaningful": false
        },
        {
          "line": 144,
          "type": "toEqual",
          "value": "expect(observed2).toEqual(new Date(2027, 6, 5)); // Monday",
          "isMeaningful": false
        },
        {
          "line": 149,
          "type": "toEqual",
          "value": "expect(observed3).toEqual(july4_2025);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 152,
      "name": "should apply UK Bank holiday rules",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 156,
          "type": "toEqual",
          "value": "expect(observed).toEqual(new Date(2027, 11, 27)); // Monday",
          "isMeaningful": false
        },
        {
          "line": 161,
          "type": "toEqual",
          "value": "expect(observed2).toEqual(new Date(2027, 11, 27)); // Monday",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 164,
      "name": "should not observe when rule is ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 167,
          "type": "toEqual",
          "value": "expect(observed).toEqual(saturday);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 170,
      "name": "should always use actual date when rule is ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 173,
          "type": "toEqual",
          "value": "expect(observed).toEqual(weekday);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 193,
      "name": "should include observed dates when different from actual",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 198,
          "type": "toBeDefined",
          "value": "expect(july4).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 199,
          "type": "toBe",
          "value": "expect(july4!.date.toISOString().split('T')[0]).toBe('2026-07-04');",
          "isMeaningful": false
        },
        {
          "line": 200,
          "type": "toBe",
          "value": "expect(july4!.observedDate?.toISOString().split('T')[0]).toBe('2026-07-03');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.test.ts",
      "line": 203,
      "name": "should return empty array for unknown country",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 205,
          "type": "toEqual",
          "value": "expect(holidays).toEqual([]);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 7,
      "name": "should calculate Easter date for known years",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 21,
          "type": "toEqual",
          "value": "expect(result).toEqual({ year, month, day });",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 42,
      "name": "should calculate Good Friday (2 days before Easter)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 52,
          "type": "toEqual",
          "value": "expect(goodFriday2025).toEqual(new Date(2025, 3, 18)); // month is 0-indexed",
          "isMeaningful": false
        },
        {
          "line": 56,
          "type": "toEqual",
          "value": "expect(goodFriday2024).toEqual(new Date(2024, 2, 29));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 59,
      "name": "should calculate Easter Monday (1 day after Easter)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 69,
          "type": "toEqual",
          "value": "expect(easterMonday2025).toEqual(new Date(2025, 3, 21));",
          "isMeaningful": false
        },
        {
          "line": 73,
          "type": "toEqual",
          "value": "expect(easterMonday2024).toEqual(new Date(2024, 3, 1));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 76,
      "name": "should calculate Easter Sunday (offset 0)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 85,
          "type": "toEqual",
          "value": "expect(easterSunday2025).toEqual(new Date(2025, 3, 20));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 88,
      "name": "should calculate Easter Saturday (1 day before Easter)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 97,
          "type": "toEqual",
          "value": "expect(easterSaturday2025).toEqual(new Date(2025, 3, 19));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 100,
      "name": "should handle holidays with no offset (default to 0)",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "toEqual",
          "value": "expect(easter2025).toEqual(new Date(2025, 3, 20));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 111,
      "name": "should handle large offsets for other Easter-based holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 121,
          "type": "toEqual",
          "value": "expect(ascension2025).toEqual(new Date(2025, 4, 29)); // May 29",
          "isMeaningful": false
        },
        {
          "line": 132,
          "type": "toEqual",
          "value": "expect(pentecost2025).toEqual(new Date(2025, 5, 8)); // June 8",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 139,
      "name": "should include Easter-based holidays for UK",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 146,
          "type": "toEqual",
          "value": "expect(goodFriday?.date).toEqual(new Date(2025, 3, 18));",
          "isMeaningful": false
        },
        {
          "line": 147,
          "type": "toEqual",
          "value": "expect(easterMonday?.date).toEqual(new Date(2025, 3, 21));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 150,
      "name": "should include Easter-based holidays for AU",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 158,
          "type": "toEqual",
          "value": "expect(goodFriday?.date).toEqual(new Date(2025, 3, 18));",
          "isMeaningful": false
        },
        {
          "line": 159,
          "type": "toEqual",
          "value": "expect(easterSaturday?.date).toEqual(new Date(2025, 3, 19));",
          "isMeaningful": false
        },
        {
          "line": 160,
          "type": "toEqual",
          "value": "expect(easterMonday?.date).toEqual(new Date(2025, 3, 21));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.easter.test.ts",
      "line": 163,
      "name": "should include Good Friday for CA",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 168,
          "type": "toEqual",
          "value": "expect(goodFriday?.date).toEqual(new Date(2025, 3, 18));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 13,
      "name": "should have New Year",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 14,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-01-01')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 15,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-01-01')?.name).toBe(\"New Year's Day\");",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 18,
      "name": "should have Canada Day on July 1",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 19,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-07-01')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 20,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-07-01')?.name).toBe('Canada Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 23,
      "name": "should have Victoria Day on Monday before May 25",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 24,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-05-19')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 25,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-05-19')?.name).toBe('Victoria Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 28,
      "name": "should have Labour Day on first Monday in September",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 29,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-09-01')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 30,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-09-01')?.name).toBe('Labour Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 33,
      "name": "should have Thanksgiving on second Monday in October",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 34,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-10-13')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 35,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-10-13')?.name).toBe('Thanksgiving Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 38,
      "name": "should have Christmas Day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 39,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-12-25')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 40,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-12-25')?.name).toBe('Christmas Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 43,
      "name": "should have Boxing Day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 44,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-12-26')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 45,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-12-26')?.name).toBe('Boxing Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 48,
      "name": "should have Remembrance Day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 49,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-11-11')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 50,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-11-11')?.name).toBe('Remembrance Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 55,
      "name": "should calculate Victoria Day correctly for multiple years",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 67,
          "type": "toBeDefined",
          "value": "expect(victoriaDay).toBeDefined();",
          "isMeaningful": false
        },
        {
          "line": 68,
          "type": "toBe",
          "value": "expect(victoriaDay!.date.toISOString().split('T')[0]).toBe(expected);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 74,
      "name": "should observe Canada Day on Monday when it falls on Sunday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 78,
          "type": "toBe",
          "value": "expect(canadaDay?.date.toISOString().split('T')[0]).toBe('2029-07-01');",
          "isMeaningful": false
        },
        {
          "line": 79,
          "type": "toBe",
          "value": "expect(canadaDay?.observedDate?.toISOString().split('T')[0]).toBe('2029-07-02');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 84,
      "name": "should identify Canadian holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 85,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 6, 1), 'CA')).toBe(true); // July is month 6",
          "isMeaningful": false
        },
        {
          "line": 86,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 6, 2), 'CA')).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 88,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2029, 6, 2), 'CA', { checkObserved: true })).toBe(true); // Canada Day observed",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 103,
      "name": "should have New Year",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 104,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-01-01')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 105,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-01-01')?.name).toBe(\"New Year's Day\");",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 108,
      "name": "should have Australia Day on January 26",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 109,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-01-26')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 110,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-01-26')?.name).toBe('Australia Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 113,
      "name": "should have Anzac Day on April 25",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 114,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-04-25')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 115,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-04-25')?.name).toBe('Anzac Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 118,
      "name": "should have Queen",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 119,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-06-09')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 120,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-06-09')?.name).toBe(\"Queen's Birthday\");",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 123,
      "name": "should have Christmas Day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 124,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-12-25')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 125,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-12-25')?.name).toBe('Christmas Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 128,
      "name": "should have Boxing Day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 129,
          "type": "toBe",
          "value": "expect(holidayMap.has('2025-12-26')).toBe(true);",
          "isMeaningful": false
        },
        {
          "line": 130,
          "type": "toBe",
          "value": "expect(holidayMap.get('2025-12-26')?.name).toBe('Boxing Day');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 135,
      "name": "should observe Australia Day on Monday when it falls on Sunday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 139,
          "type": "toBe",
          "value": "expect(australiaDay?.date.toISOString().split('T')[0]).toBe('2025-01-26');",
          "isMeaningful": false
        },
        {
          "line": 140,
          "type": "toBe",
          "value": "expect(australiaDay?.observedDate?.toISOString().split('T')[0]).toBe('2025-01-27');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 143,
      "name": "should NOT observe on Monday when holiday falls on Saturday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 148,
          "type": "toBe",
          "value": "expect(anzacDay?.date.toISOString().split('T')[0]).toBe('2026-04-25');",
          "isMeaningful": false
        },
        {
          "line": 149,
          "type": "toBeUndefined",
          "value": "expect(anzacDay?.observedDate).toBeUndefined(); // No Monday observation",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays.ca-au.test.ts",
      "line": 154,
      "name": "should identify Australian holidays",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 155,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 26), 'AU')).toBe(true); // January is month 0",
          "isMeaningful": false
        },
        {
          "line": 156,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 27), 'AU')).toBe(false); // Not the actual date",
          "isMeaningful": false
        },
        {
          "line": 158,
          "type": "toBe",
          "value": "expect(isHoliday(new Date(2025, 0, 27), 'AU', { checkObserved: true })).toBe(true); // Australia Day observed",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays-refactor.test.ts",
      "line": 6,
      "name": "should handle Victoria Day special case",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 25,
          "type": "toEqual",
          "value": "expect(result).toEqual(expected);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays-refactor.test.ts",
      "line": 29,
      "name": "should handle last occurrence correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 40,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date(2025, 4, 26)); // Last Monday in May",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays-refactor.test.ts",
      "line": 43,
      "name": "should handle nth occurrence that exceeds month",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 54,
          "type": "toBeNull",
          "value": "expect(result).toBeNull();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/data/holidays-refactor.test.ts",
      "line": 57,
      "name": "should return null for invalid holiday type",
      "issues": [
        "All assertions are trivial or meaningless",
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 68,
          "type": "toBeNull",
          "value": "expect(result).toBeNull();",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 19,
      "name": "should create cache with default 10MB limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 21,
          "type": "toBe",
          "value": "expect(defaultCache.getMemoryStats().maxMemory).toBe(10 * 1024 * 1024);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 24,
      "name": "should accept custom memory limit",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 25,
          "type": "toBe",
          "value": "expect(cache.getMemoryStats().maxMemory).toBe(1024);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 42,
      "name": "should calculate object size consistently",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 53,
          "type": "toBe",
          "value": "expect(size2).toBe(size1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 56,
      "name": "should reduce memory usage when deleting entries",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 59,
          "type": "toBeGreaterThan",
          "value": "expect(afterAdd).toBeGreaterThan(0);",
          "isMeaningful": false
        },
        {
          "line": 64,
          "type": "toBe",
          "value": "expect(afterDel).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 69,
      "name": "should reject set when memory limit would be exceeded",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 76,
          "type": "toBe",
          "value": "expect(result).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 77,
          "type": "toBe",
          "value": "expect(cache.has('overflow')).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 78,
          "type": "toBe",
          "value": "expect(cache.has('big')).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 81,
      "name": "should emit memory warning at 90% usage",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 83,
          "type": "unknown",
          "value": "expect(stats.usedMemory / stats.maxMemory).toBeGreaterThanOrEqual(0.9);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 91,
      "name": "should evict oldest entries when eviction enabled",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 105,
          "type": "toBe",
          "value": "expect(evictCache.has('old1')).toBe(false);",
          "isMeaningful": false
        },
        {
          "line": 106,
          "type": "toBe",
          "value": "expect(evictCache.has('new')).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 112,
      "name": "should return accurate memory statistics",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 118,
          "type": "unknown",
          "value": "expect(stats).toMatchObject({",
          "isMeaningful": false
        },
        {
          "line": 126,
          "type": "toBe",
          "value": "expect(stats.usedMemory + stats.availableMemory).toBe(stats.maxMemory);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 142,
      "name": "should handle various data types",
      "issues": [
        "Line 157: Suspicious pattern: expect(memory).toBeLessThan(1024); // Should fit in our 1KB cache",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 156,
          "type": "toBeGreaterThan",
          "value": "expect(memory).toBeGreaterThan(0);",
          "isMeaningful": false
        },
        {
          "line": 157,
          "type": "toBeLessThan",
          "value": "expect(memory).toBeLessThan(1024); // Should fit in our 1KB cache",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/cache/memoryAwareCache.test.ts",
      "line": 161,
      "name": "should account for key size in memory calculation",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 174,
          "type": "toBeGreaterThan",
          "value": "expect(longKeyMemory).toBeGreaterThan(shortKeyMemory);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 10,
      "name": "should calculate next year for regular date",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 18,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-06-15T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 21,
      "name": "should handle leap year Feb 29",
      "issues": [
        "Line 29: Suspicious pattern: // Should map to Feb 28 in non-leap year",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 30,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-02-28T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 33,
      "name": "should preserve exact time",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 41,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-06-15T14:30:45.123Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 44,
      "name": "should handle year-end dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 52,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-12-31T23:59:59Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 57,
      "name": "should find next occurrence of specific date in future",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 68,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-12-25T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 71,
      "name": "should advance to next year if date has passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 82,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-01-01T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 85,
      "name": "should handle Feb 29 in specific date mode",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 96,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-02-28T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 99,
      "name": "should handle current day being target day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 110,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-12-25T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 115,
      "name": "should set specific time for same-date pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 124,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-06-15T14:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 127,
      "name": "should set specific time for specific-date pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 138,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-12-25T08:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 141,
      "name": "should check time when on same day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 153,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-12-25T14:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 158,
      "name": "should calculate in specified timezone for same-date pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 169,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-06-15T14:00:00Z')); // 10am EDT",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 172,
      "name": "should handle DST transitions",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 184,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-03-10T18:00:00Z')); // 2pm EDT",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 187,
      "name": "should find specific date in timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 200,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-12-30T13:00:00Z')); // Dec 31 midnight Sydney",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 205,
      "name": "should handle leap year to leap year",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 218,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2028-02-28T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 221,
      "name": "should handle month-end dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 232,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-29T00:00:00Z')); // 2024 is leap year",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/YearlyRecurrence.test.ts",
      "line": 235,
      "name": "should handle -1 for last day of month",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 246,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-02-28T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 17,
      "name": "should return next week same day when no day specified",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 28,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-22T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 31,
      "name": "should return next occurrence of specified weekday",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 43,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-17T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 46,
      "name": "should handle Sunday (0) correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 57,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-19T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 60,
      "name": "should handle Saturday (6) correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 71,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-18T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 74,
      "name": "should return today if same weekday and time has not passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 86,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T14:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 89,
      "name": "should return next week if same weekday but time has passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 101,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-22T09:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 104,
      "name": "should handle timezone correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 116,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-17T14:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 119,
      "name": "should handle timezone when calculating day of week",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 135,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T03:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 138,
      "name": "should handle wrapping around to next week",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 149,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-20T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 152,
      "name": "should preserve seconds and milliseconds as 0 with time",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 163,
          "type": "toBe",
          "value": "expect(result.getSeconds()).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 164,
          "type": "toBe",
          "value": "expect(result.getMilliseconds()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/WeeklyRecurrence.test.ts",
      "line": 167,
      "name": "should handle same day without specific time",
      "issues": [
        "Line 177: Suspicious pattern: // Should be next Wednesday (force next week when no time)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 178,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-22T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 9,
      "name": "should set time in UTC when timezone is UTC",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 14,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T14:30:00.000Z');",
          "isMeaningful": false
        },
        {
          "line": 15,
          "type": "toBe",
          "value": "expect(result.getUTCHours()).toBe(14);",
          "isMeaningful": false
        },
        {
          "line": 16,
          "type": "toBe",
          "value": "expect(result.getUTCMinutes()).toBe(30);",
          "isMeaningful": false
        },
        {
          "line": 17,
          "type": "toBe",
          "value": "expect(result.getUTCSeconds()).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 18,
          "type": "toBe",
          "value": "expect(result.getUTCMilliseconds()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 21,
      "name": "should set time in UTC when timezone is empty string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 26,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T09:15:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 29,
      "name": "should set time in specified timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 36,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T19:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 39,
      "name": "should handle different timezone conversions",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 46,
          "type": "toBe",
          "value": "expect(tokyoResult.toISOString()).toBe('2025-01-15T05:30:00.000Z');",
          "isMeaningful": false
        },
        {
          "line": 51,
          "type": "toBe",
          "value": "expect(londonResult.toISOString()).toBe('2025-01-15T14:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 54,
      "name": "should preserve the date when setting time",
      "issues": [
        "Line 60: Suspicious pattern: // Should still be Jan 20",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 61,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-20T06:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 64,
      "name": "should handle midnight correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 69,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T00:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 72,
      "name": "should handle end of day correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 77,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T23:59:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 82,
      "name": "should add days preserving time in UTC",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 87,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-18T14:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 90,
      "name": "should add days preserving time in timezone",
      "issues": [
        "Line 96: Suspicious pattern: // Should still be 9:00 AM NY time next day (14:00 UTC)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 97,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-16T14:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 100,
      "name": "should handle DST transitions when adding days",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-03-10T13:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 113,
      "name": "should return true when time is in future",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 119,
          "type": "toBe",
          "value": "expect(result).toBe(true);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 122,
      "name": "should return false when time is in past",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 128,
          "type": "toBe",
          "value": "expect(result).toBe(false);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/TimezoneDateBuilder.test.ts",
      "line": 131,
      "name": "should return false when times are equal",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 137,
          "type": "toBe",
          "value": "expect(result).toBe(false);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 20,
      "name": "should create DailyRecurrence for daily pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 23,
          "type": "unknown",
          "value": "expect(recurrence).toBeInstanceOf(DailyRecurrence);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 26,
      "name": "should create WeeklyRecurrence for weekly pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 29,
          "type": "unknown",
          "value": "expect(recurrence).toBeInstanceOf(WeeklyRecurrence);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 32,
      "name": "should create MonthlyRecurrence for monthly pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 35,
          "type": "unknown",
          "value": "expect(recurrence).toBeInstanceOf(MonthlyRecurrence);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 38,
      "name": "should create YearlyRecurrence for yearly pattern",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 41,
          "type": "unknown",
          "value": "expect(recurrence).toBeInstanceOf(YearlyRecurrence);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 46,
      "name": "should validate params before creating instance",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 52,
          "type": "unknown",
          "value": "expect(validatorSpy).toHaveBeenCalledWith(params);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 84,
      "name": "should validate and calculate in one step",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 90,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-16T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 93,
      "name": "should handle weekly calculation",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 99,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-17T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 102,
      "name": "should handle monthly calculation",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 108,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-20T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 111,
      "name": "should handle yearly calculation",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 117,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-06-15T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 135,
      "name": "should pass timezone to recurrence instance",
      "issues": [
        "Line 145: Suspicious pattern: // Should be 14:30 NY time TODAY since time hasn't passed",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 146,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-15T19:30:00Z')); // 14:30 EST = 19:30 UTC",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 149,
      "name": "should handle UTC timezone (empty string)",
      "issues": [
        "Line 159: Suspicious pattern: // Should be today since time hasn't passed",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 160,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-15T14:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/RecurrenceFactory.test.ts",
      "line": 163,
      "name": "should use system timezone when undefined",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 173,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-16T10:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 10,
      "name": "should calculate next month for mid-month dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 19,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-15T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 22,
      "name": "should handle month-end overflow (31st to Feb)",
      "issues": [
        "Line 31: Suspicious pattern: // Should map to last day of February (29th in leap year)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 32,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-29T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 35,
      "name": "should handle month-end overflow (31st to April)",
      "issues": [
        "Line 44: Suspicious pattern: // Should map to last day of April (30th)",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 45,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-04-30T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 48,
      "name": "should handle non-leap year February",
      "issues": [
        "Line 57: Suspicious pattern: // Should map to Feb 28 in non-leap year",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 58,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-02-28T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 63,
      "name": "should set specific time on target day",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 73,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-20T14:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 76,
      "name": "should advance to next month if target datetime has passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 86,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-20T14:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 91,
      "name": "should calculate in specified timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 104,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-20T19:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 107,
      "name": "should handle DST transitions correctly",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 120,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-03-15T18:30:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 123,
      "name": "should handle month-end in timezone context",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 135,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-28T13:00:00Z')); // Feb 29, midnight Sydney",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 140,
      "name": "should handle current day being target day",
      "issues": [
        "Line 149: Suspicious pattern: // Should advance to next month since we're already on the 15th",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 150,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-02-15T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 153,
      "name": "should handle last day of month request",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 162,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-01-31T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 165,
      "name": "should handle year boundary",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 174,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2024-12-20T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/MonthlyRecurrence.test.ts",
      "line": 177,
      "name": "should advance to next year if needed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 186,
          "type": "toEqual",
          "value": "expect(result).toEqual(new Date('2025-01-20T00:00:00Z'));",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 17,
      "name": "should return next day at same time when no specific time given",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 23,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-16T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 26,
      "name": "should return today at specified time if time has not passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 36,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T14:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 39,
      "name": "should return tomorrow at specified time if time has passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 49,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-16T09:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 52,
      "name": "should handle timezone correctly when calculating next occurrence",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 63,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T19:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 66,
      "name": "should handle timezone when time has passed",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 77,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-16T14:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 80,
      "name": "should work with empty string as UTC timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 90,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T14:00:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 93,
      "name": "should handle exact same time as current (edge case)",
      "issues": [
        "Line 103: Suspicious pattern: // Should be tomorrow since we're at exact same time",
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 104,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-16T10:30:00.000Z');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/tools/recurrence/DailyRecurrence.test.ts",
      "line": 107,
      "name": "should preserve seconds and milliseconds as 0",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 117,
          "type": "toBe",
          "value": "expect(result.toISOString()).toBe('2025-01-15T14:30:00.000Z');",
          "isMeaningful": false
        },
        {
          "line": 118,
          "type": "toBe",
          "value": "expect(result.getSeconds()).toBe(0);",
          "isMeaningful": false
        },
        {
          "line": 119,
          "type": "toBe",
          "value": "expect(result.getMilliseconds()).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/subtractTime.integration.test.ts",
      "line": 43,
      "name": "should handle subtract_time validation errors",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 47,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/nextOccurrence.integration.test.ts",
      "line": 64,
      "name": "should handle validation errors",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 68,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/getCurrentTime.integration.test.ts",
      "line": 5,
      "name": "should execute get_current_time with default params",
      "issues": [
        "Line 11: Suspicious pattern: // Should use system timezone when no timezone specified",
        "Line 13: Suspicious pattern: expect(result.timezone).not.toBe(''); // Should have a valid timezone"
      ],
      "assertions": [
        {
          "line": 12,
          "type": "toBeDefined",
          "value": "expect(result.timezone).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 13,
          "type": "toBe",
          "value": "expect(result.timezone).not.toBe(''); // Should have a valid timezone",
          "isMeaningful": false
        },
        {
          "line": 14,
          "type": "unknown",
          "value": "expect(result.unix).toBeCloseTo(Date.now() / 1000, -1); // Allow 10 second difference",
          "isMeaningful": true
        },
        {
          "line": 15,
          "type": "toMatch",
          "value": "expect(result.offset).toMatch(/^([+-]\\d{2}:\\d{2}|Z)$/); // Valid offset format",
          "isMeaningful": true
        },
        {
          "line": 16,
          "type": "toBeDefined",
          "value": "expect(result.iso).toBeDefined();",
          "isMeaningful": true
        },
        {
          "line": 17,
          "type": "toBeDefined",
          "value": "expect(result.time).toBeDefined();",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/getBusinessDays.holiday.integration.test.ts",
      "line": 129,
      "name": "should not double-count duplicate holidays",
      "issues": [
        "Line 140: Suspicious pattern: // Should only count New Year's once"
      ],
      "assertions": [
        {
          "line": 141,
          "type": "toBe",
          "value": "expect(result.holiday_count).toBe(2); // New Year's + MLK",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/getBusinessDays.holiday.integration.test.ts",
      "line": 208,
      "name": "should gracefully handle unknown country codes",
      "issues": [
        "Line 218: Suspicious pattern: // Should work like no holidays"
      ],
      "assertions": [
        {
          "line": 219,
          "type": "toBe",
          "value": "expect(result.holiday_count).toBe(0);",
          "isMeaningful": true
        },
        {
          "line": 220,
          "type": "toBe",
          "value": "expect(result.business_days).toBe(23);",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/getBusinessDays.holiday.integration.test.ts",
      "line": 228,
      "name": "should handle multi-year date ranges efficiently",
      "issues": [
        "Line 238: Suspicious pattern: // Should have holidays from all 3 years"
      ],
      "assertions": [
        {
          "line": 239,
          "type": "toBeGreaterThan",
          "value": "expect(result.holiday_count).toBeGreaterThan(20); // ~10 federal holidays per year",
          "isMeaningful": true
        },
        {
          "line": 240,
          "type": "toBe",
          "value": "expect(result.total_days).toBe(1095); // 3 years: 365 + 365 + 365 = 1095",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/getBusinessDays.holiday.integration.test.ts",
      "line": 248,
      "name": "should handle invalid custom holiday dates",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 252,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/formatTime.integration.test.ts",
      "line": 75,
      "name": "should handle validation errors",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 79,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 6,
      "name": "should calculate days until a future date",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 17,
          "type": "toBe",
          "value": "expect(result).toBe(7);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 23,
      "name": "should return 0 for today",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 33,
          "type": "toBe",
          "value": "expect(result).toBe(0);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 39,
      "name": "should return negative days for past dates",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 50,
          "type": "toBe",
          "value": "expect(result).toBe(-5);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 56,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 67,
          "type": "toBe",
          "value": "expect(result).toBe('Today');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 73,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 85,
          "type": "toBe",
          "value": "expect(result).toBe('Tomorrow');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 91,
      "name": "should format as ",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 103,
          "type": "toBe",
          "value": "expect(result).toBe('in 10 days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 109,
      "name": "should handle specific timezone",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 120,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(0);",
          "isMeaningful": false
        },
        {
          "line": 121,
          "type": "toBeLessThan",
          "value": "expect(result).toBeLessThan(365);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 127,
      "name": "should use UTC when timezone is empty string",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 139,
          "type": "toBe",
          "value": "expect(result).toBe(1);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 158,
      "name": "should throw error for invalid date",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 162,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 175,
      "name": "should throw error for invalid timezone",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 179,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 193,
      "name": "should handle Christmas countdown",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 202,
          "type": "toBeGreaterThan",
          "value": "expect(result).toBeGreaterThan(0);",
          "isMeaningful": false
        },
        {
          "line": 203,
          "type": "toBeLessThan",
          "value": "expect(result).toBeLessThan(365);",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/daysUntil.integration.test.ts",
      "line": 209,
      "name": "should handle event planning with formatted output",
      "issues": [
        "All assertions are trivial or meaningless"
      ],
      "assertions": [
        {
          "line": 221,
          "type": "toBe",
          "value": "expect(result).toBe('in 30 days');",
          "isMeaningful": false
        }
      ]
    },
    {
      "file": "tests/integration/tools/calculateBusinessHours.integration.test.ts",
      "line": 126,
      "name": "should handle invalid timezone",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 130,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/calculateBusinessHours.integration.test.ts",
      "line": 145,
      "name": "should handle invalid date format",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 149,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    },
    {
      "file": "tests/integration/tools/addTime.integration.test.ts",
      "line": 43,
      "name": "should handle add_time validation errors",
      "issues": [
        "Test name suggests error handling but no error assertions found"
      ],
      "assertions": [
        {
          "line": 47,
          "type": "unknown",
          "value": "await expect(",
          "isMeaningful": true
        }
      ]
    }
  ]
}