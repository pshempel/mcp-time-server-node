<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="987" failures="3" errors="0" time="22.021">
  <testsuite name="serverConfig" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.312" tests="4">
    <testcase classname="serverConfig configureServer should increase EventEmitter defaultMaxListeners to 20" name="serverConfig configureServer should increase EventEmitter defaultMaxListeners to 20" time="0.01">
    </testcase>
    <testcase classname="serverConfig configureServer should increase process maxListeners to 20" name="serverConfig configureServer should increase process maxListeners to 20" time="0.001">
    </testcase>
    <testcase classname="serverConfig getMaxListenersConfig should return current configuration" name="serverConfig getMaxListenersConfig should return current configuration" time="0.002">
    </testcase>
    <testcase classname="serverConfig AbortSignal warning prevention should not emit warning with configured limits" name="serverConfig AbortSignal warning prevention should not emit warning with configured limits" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="convertTimezone validation helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.539" tests="7">
    <testcase classname="convertTimezone validation helpers validateTimezones should accept valid timezone pairs" name="convertTimezone validation helpers validateTimezones should accept valid timezone pairs" time="0.022">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones should throw for invalid from_timezone" name="convertTimezone validation helpers validateTimezones should throw for invalid from_timezone" time="0.003">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones should throw for invalid to_timezone" name="convertTimezone validation helpers validateTimezones should throw for invalid to_timezone" time="0.003">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones should throw for both invalid timezones" name="convertTimezone validation helpers validateTimezones should throw for both invalid timezones" time="0.001">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones should accept UTC as special case" name="convertTimezone validation helpers validateTimezones should accept UTC as special case" time="0.002">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones should accept same timezone conversion" name="convertTimezone validation helpers validateTimezones should accept same timezone conversion" time="0.001">
    </testcase>
    <testcase classname="convertTimezone validation helpers validateTimezones Debug logging should log validation attempts" name="convertTimezone validation helpers validateTimezones Debug logging should log validation attempts" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Test Quality Meta Tests" errors="0" failures="3" skipped="0" timestamp="2025-07-30T23:35:02" time="9.691" tests="7">
    <testcase classname="Test Quality Meta Tests all tests should have at least one assertion" name="Test Quality Meta Tests all tests should have at least one assertion" time="0.184">
    </testcase>
    <testcase classname="Test Quality Meta Tests no tests should have only trivial assertions" name="Test Quality Meta Tests no tests should have only trivial assertions" time="0.052">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 0
Received: 365
    at /home/pshempel/src/local/time-node_tdd/tests/meta/test-quality.test.ts:38:33</failure>
    </testcase>
    <testcase classname="Test Quality Meta Tests async tests should properly await their assertions" name="Test Quality Meta Tests async tests should properly await their assertions" time="0.022">
      <failure>Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 4

- Array []
+ Array [
+   &quot;tests/index.test.ts:48 - Async test may be missing await&quot;,
+   &quot;tests/index.test.ts:52 - Async test may be missing await&quot;,
+ ]
    at /home/pshempel/src/local/time-node_tdd/tests/meta/test-quality.test.ts:63:20</failure>
    </testcase>
    <testcase classname="Test Quality Meta Tests error handling tests should have error assertions" name="Test Quality Meta Tests error handling tests should have error assertions" time="0.051">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 0
Received: 71
    at /home/pshempel/src/local/time-node_tdd/tests/meta/test-quality.test.ts:81:43</failure>
    </testcase>
    <testcase classname="Test Quality Meta Tests no test should use console.log instead of assertions" name="Test Quality Meta Tests no test should use console.log instead of assertions" time="0.015">
    </testcase>
    <testcase classname="Test Quality Meta Tests all test files should be included in the analysis" name="Test Quality Meta Tests all test files should be included in the analysis" time="0.048">
    </testcase>
    <testcase classname="Test Quality Meta Tests should generate a comprehensive test quality report" name="Test Quality Meta Tests should generate a comprehensive test quality report" time="0.116">
    </testcase>
  </testsuite>
  <testsuite name="Integration Test Infrastructure Setup" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:02" time="9.695" tests="4">
    <testcase classname="Integration Test Infrastructure Setup Transport Creation should create linked transport pair" name="Integration Test Infrastructure Setup Transport Creation should create linked transport pair" time="0.01">
    </testcase>
    <testcase classname="Integration Test Infrastructure Setup Client-Server Connection should connect client and server" name="Integration Test Infrastructure Setup Client-Server Connection should connect client and server" time="0.046">
    </testcase>
    <testcase classname="Integration Test Infrastructure Setup Connection Cleanup should properly close connections" name="Integration Test Infrastructure Setup Connection Cleanup should properly close connections" time="0.038">
    </testcase>
    <testcase classname="Integration Test Infrastructure Setup Test with Rate Limit Options should create environment with custom rate limits" name="Integration Test Infrastructure Setup Test with Rate Limit Options should create environment with custom rate limits" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="MCP Time Server" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.719" tests="12">
    <testcase classname="MCP Time Server Server Setup should create server with correct info" name="MCP Time Server Server Setup should create server with correct info" time="0.01">
    </testcase>
    <testcase classname="MCP Time Server Server Setup should register tool handlers" name="MCP Time Server Server Setup should register tool handlers" time="0.001">
    </testcase>
    <testcase classname="MCP Time Server ListTools Handler should return all 8 tools" name="MCP Time Server ListTools Handler should return all 8 tools" time="0.007">
    </testcase>
    <testcase classname="MCP Time Server ListTools Handler should return correct tool names" name="MCP Time Server ListTools Handler should return correct tool names" time="0.003">
    </testcase>
    <testcase classname="MCP Time Server ListTools Handler should include proper input schemas for each tool" name="MCP Time Server ListTools Handler should include proper input schemas for each tool" time="0.004">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler get_current_time should call getCurrentTime tool with correct params" name="MCP Time Server CallTool Handler get_current_time should call getCurrentTime tool with correct params" time="0.008">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler convert_timezone should call convertTimezone tool with correct params" name="MCP Time Server CallTool Handler convert_timezone should call convertTimezone tool with correct params" time="0.001">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler Error handling should handle unknown tool error" name="MCP Time Server CallTool Handler Error handling should handle unknown tool error" time="0.008">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler Error handling should handle tool execution errors" name="MCP Time Server CallTool Handler Error handling should handle tool execution errors" time="0.002">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler Error handling should pass through properly formatted tool errors" name="MCP Time Server CallTool Handler Error handling should pass through properly formatted tool errors" time="0.001">
    </testcase>
    <testcase classname="MCP Time Server CallTool Handler All tools integration should handle all 8 tools" name="MCP Time Server CallTool Handler All tools integration should handle all 8 tools" time="0.01">
    </testcase>
    <testcase classname="MCP Time Server Environment Configuration should read configuration from environment variables" name="MCP Time Server Environment Configuration should read configuration from environment variables" time="0">
    </testcase>
  </testsuite>
  <testsuite name="get_business_days integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.86" tests="3">
    <testcase classname="get_business_days integration should execute get_business_days with basic parameters" name="get_business_days integration should execute get_business_days with basic parameters" time="0.069">
    </testcase>
    <testcase classname="get_business_days integration should handle holidays" name="get_business_days integration should handle holidays" time="0.011">
    </testcase>
    <testcase classname="get_business_days integration should handle include weekends option" name="get_business_days integration should handle include weekends option" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="subtract_time integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.906" tests="3">
    <testcase classname="subtract_time integration should execute subtract_time with basic parameters" name="subtract_time integration should execute subtract_time with basic parameters" time="0.07">
    </testcase>
    <testcase classname="subtract_time integration should execute subtract_time with timezone" name="subtract_time integration should execute subtract_time with timezone" time="0.01">
    </testcase>
    <testcase classname="subtract_time integration should handle subtract_time validation errors" name="subtract_time integration should handle subtract_time validation errors" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="get_current_time integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:02" time="9.953" tests="3">
    <testcase classname="get_current_time integration should execute get_current_time with default params" name="get_current_time integration should execute get_current_time with default params" time="0.078">
    </testcase>
    <testcase classname="get_current_time integration should execute get_current_time with specific timezone" name="get_current_time integration should execute get_current_time with specific timezone" time="0.01">
    </testcase>
    <testcase classname="get_current_time integration should use UTC when empty string timezone provided" name="get_current_time integration should use UTC when empty string timezone provided" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="next_occurrence integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.919" tests="4">
    <testcase classname="next_occurrence integration should execute next_occurrence for daily pattern" name="next_occurrence integration should execute next_occurrence for daily pattern" time="0.106">
    </testcase>
    <testcase classname="next_occurrence integration should execute next_occurrence for weekly pattern" name="next_occurrence integration should execute next_occurrence for weekly pattern" time="0.013">
    </testcase>
    <testcase classname="next_occurrence integration should execute next_occurrence for monthly pattern" name="next_occurrence integration should execute next_occurrence for monthly pattern" time="0.011">
    </testcase>
    <testcase classname="next_occurrence integration should handle validation errors" name="next_occurrence integration should handle validation errors" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="MaxListenersExceededWarning prevention" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.93" tests="3">
    <testcase classname="MaxListenersExceededWarning prevention should have proper maxListeners configuration" name="MaxListenersExceededWarning prevention should have proper maxListeners configuration" time="0.01">
    </testcase>
    <testcase classname="MaxListenersExceededWarning prevention should handle many concurrent requests without MaxListenersExceededWarning" name="MaxListenersExceededWarning prevention should handle many concurrent requests without MaxListenersExceededWarning" time="0.089">
    </testcase>
    <testcase classname="MaxListenersExceededWarning prevention should handle rapid sequential requests without warnings" name="MaxListenersExceededWarning prevention should handle rapid sequential requests without warnings" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="add_time integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="9.985" tests="3">
    <testcase classname="add_time integration should execute add_time with basic parameters" name="add_time integration should execute add_time with basic parameters" time="0.075">
    </testcase>
    <testcase classname="add_time integration should execute add_time with timezone" name="add_time integration should execute add_time with timezone" time="0.011">
    </testcase>
    <testcase classname="add_time integration should handle add_time validation errors" name="add_time integration should handle add_time validation errors" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="calculateBusinessHours" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.401" tests="27">
    <testcase classname="calculateBusinessHours Basic functionality should calculate business hours for a single day within business hours" name="calculateBusinessHours Basic functionality should calculate business hours for a single day within business hours" time="0.016">
    </testcase>
    <testcase classname="calculateBusinessHours Basic functionality should use default business hours (9 AM - 5 PM) when not specified" name="calculateBusinessHours Basic functionality should use default business hours (9 AM - 5 PM) when not specified" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Basic functionality should handle multi-day calculations" name="calculateBusinessHours Basic functionality should handle multi-day calculations" time="0.003">
    </testcase>
    <testcase classname="calculateBusinessHours Weekend handling should exclude weekends by default" name="calculateBusinessHours Weekend handling should exclude weekends by default" time="0.004">
    </testcase>
    <testcase classname="calculateBusinessHours Weekend handling should include weekends when include_weekends is true" name="calculateBusinessHours Weekend handling should include weekends when include_weekends is true" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Custom business hours should use custom business hours when provided" name="calculateBusinessHours Custom business hours should use custom business hours when provided" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Custom business hours should support different hours per day of week" name="calculateBusinessHours Custom business hours should support different hours per day of week" time="0.003">
    </testcase>
    <testcase classname="calculateBusinessHours Holiday handling should exclude holidays from business hours" name="calculateBusinessHours Holiday handling should exclude holidays from business hours" time="0.003">
    </testcase>
    <testcase classname="calculateBusinessHours Holiday handling should handle holidays on weekends correctly" name="calculateBusinessHours Holiday handling should handle holidays on weekends correctly" time="0.004">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should handle start time exactly at business start" name="calculateBusinessHours Edge cases should handle start time exactly at business start" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should handle end time exactly at business end" name="calculateBusinessHours Edge cases should handle end time exactly at business end" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should handle start after business hours" name="calculateBusinessHours Edge cases should handle start after business hours" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should handle end before business hours" name="calculateBusinessHours Edge cases should handle end before business hours" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should return 0 hours for non-business time range" name="calculateBusinessHours Edge cases should return 0 hours for non-business time range" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Edge cases should handle same start and end time" name="calculateBusinessHours Edge cases should handle same start and end time" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Timezone handling should use system timezone by default" name="calculateBusinessHours Timezone handling should use system timezone by default" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Timezone handling should use UTC when timezone is empty string" name="calculateBusinessHours Timezone handling should use UTC when timezone is empty string" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours Timezone handling should calculate business hours in specified timezone" name="calculateBusinessHours Timezone handling should calculate business hours in specified timezone" time="0.003">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for invalid timezone" name="calculateBusinessHours Error handling should throw error for invalid timezone" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for invalid start time" name="calculateBusinessHours Error handling should throw error for invalid start time" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for invalid end time" name="calculateBusinessHours Error handling should throw error for invalid end time" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for invalid holiday date" name="calculateBusinessHours Error handling should throw error for invalid holiday date" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for end time before start time" name="calculateBusinessHours Error handling should throw error for end time before start time" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Error handling should throw error for invalid business hours" name="calculateBusinessHours Error handling should throw error for invalid business hours" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Caching behavior should cache results" name="calculateBusinessHours Caching behavior should cache results" time="0.003">
    </testcase>
    <testcase classname="calculateBusinessHours Caching behavior should return cached result when available" name="calculateBusinessHours Caching behavior should return cached result when available" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours Caching behavior should use different cache keys for different parameters" name="calculateBusinessHours Caching behavior should use different cache keys for different parameters" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="format_time integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="10.082" tests="5">
    <testcase classname="format_time integration should execute format_time with relative format" name="format_time integration should execute format_time with relative format" time="0.094">
    </testcase>
    <testcase classname="format_time integration should execute format_time with calendar format" name="format_time integration should execute format_time with calendar format" time="0.012">
    </testcase>
    <testcase classname="format_time integration should execute format_time with custom format" name="format_time integration should execute format_time with custom format" time="0.007">
    </testcase>
    <testcase classname="format_time integration should handle timezone in formatting" name="format_time integration should handle timezone in formatting" time="0.007">
    </testcase>
    <testcase classname="format_time integration should handle validation errors" name="format_time integration should handle validation errors" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Advanced Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="10.137" tests="10">
    <testcase classname="Advanced Integration Tests Concurrent Requests should handle concurrent requests" name="Advanced Integration Tests Concurrent Requests should handle concurrent requests" time="0.087">
    </testcase>
    <testcase classname="Advanced Integration Tests Concurrent Requests should handle many concurrent requests" name="Advanced Integration Tests Concurrent Requests should handle many concurrent requests" time="0.035">
    </testcase>
    <testcase classname="Advanced Integration Tests Concurrent Requests should handle concurrent requests with different tools" name="Advanced Integration Tests Concurrent Requests should handle concurrent requests with different tools" time="0.02">
    </testcase>
    <testcase classname="Advanced Integration Tests Concurrent Requests should handle concurrent requests with errors" name="Advanced Integration Tests Concurrent Requests should handle concurrent requests with errors" time="0.006">
    </testcase>
    <testcase classname="Advanced Integration Tests Message Ordering should maintain message order" name="Advanced Integration Tests Message Ordering should maintain message order" time="0.011">
    </testcase>
    <testcase classname="Advanced Integration Tests Message Ordering should assign unique message IDs" name="Advanced Integration Tests Message Ordering should assign unique message IDs" time="0.016">
    </testcase>
    <testcase classname="Advanced Integration Tests Message Ordering should match request and response IDs" name="Advanced Integration Tests Message Ordering should match request and response IDs" time="0.006">
    </testcase>
    <testcase classname="Advanced Integration Tests Message Ordering should handle interleaved concurrent requests correctly" name="Advanced Integration Tests Message Ordering should handle interleaved concurrent requests correctly" time="0.008">
    </testcase>
    <testcase classname="Advanced Integration Tests Performance and Stress Tests should handle rapid sequential requests" name="Advanced Integration Tests Performance and Stress Tests should handle rapid sequential requests" time="0.01">
    </testcase>
    <testcase classname="Advanced Integration Tests Performance and Stress Tests should handle mixed concurrent and sequential requests" name="Advanced Integration Tests Performance and Stress Tests should handle mixed concurrent and sequential requests" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Rate Limiting Integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.443" tests="5">
    <testcase classname="Rate Limiting Integration should enforce rate limits through protocol" name="Rate Limiting Integration should enforce rate limits through protocol" time="0.023">
    </testcase>
    <testcase classname="Rate Limiting Integration should allow requests after rate limit window" name="Rate Limiting Integration should allow requests after rate limit window" time="0.022">
    </testcase>
    <testcase classname="Rate Limiting Integration should provide retry-after information" name="Rate Limiting Integration should provide retry-after information" time="0.007">
    </testcase>
    <testcase classname="Rate Limiting Integration should apply rate limiting per-client" name="Rate Limiting Integration should apply rate limiting per-client" time="0.01">
    </testcase>
    <testcase classname="Rate Limiting Integration should count different tools towards same rate limit" name="Rate Limiting Integration should count different tools towards same rate limit" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="nextOccurrence" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.306" tests="45">
    <testcase classname="nextOccurrence Daily pattern should find next daily occurrence at specific time" name="nextOccurrence Daily pattern should find next daily occurrence at specific time" time="0.007">
    </testcase>
    <testcase classname="nextOccurrence Daily pattern should find next daily occurrence when time has passed" name="nextOccurrence Daily pattern should find next daily occurrence when time has passed" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Daily pattern should handle daily pattern without specific time" name="nextOccurrence Daily pattern should handle daily pattern without specific time" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Daily pattern should handle daily pattern with timezone" name="nextOccurrence Daily pattern should handle daily pattern with timezone" time="0.003">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should find next occurrence of specific weekday" name="nextOccurrence Weekly pattern should find next occurrence of specific weekday" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should find next occurrence when on the same weekday" name="nextOccurrence Weekly pattern should find next occurrence when on the same weekday" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should handle Sunday (0) correctly" name="nextOccurrence Weekly pattern should handle Sunday (0) correctly" time="0.005">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should handle Saturday (6) correctly" name="nextOccurrence Weekly pattern should handle Saturday (6) correctly" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should handle weekly with specific time" name="nextOccurrence Weekly pattern should handle weekly with specific time" time="0.003">
    </testcase>
    <testcase classname="nextOccurrence Weekly pattern should handle weekly when time has passed today" name="nextOccurrence Weekly pattern should handle weekly when time has passed today" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should find next occurrence on specific day of month" name="nextOccurrence Monthly pattern should find next occurrence on specific day of month" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle when day has passed this month" name="nextOccurrence Monthly pattern should handle when day has passed this month" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle same day of month" name="nextOccurrence Monthly pattern should handle same day of month" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle last day of month (31st)" name="nextOccurrence Monthly pattern should handle last day of month (31st)" time="0.005">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle 31st in months with fewer days" name="nextOccurrence Monthly pattern should handle 31st in months with fewer days" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle February 29 in non-leap year" name="nextOccurrence Monthly pattern should handle February 29 in non-leap year" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Monthly pattern should handle monthly with specific time" name="nextOccurrence Monthly pattern should handle monthly with specific time" time="0.003">
    </testcase>
    <testcase classname="nextOccurrence Yearly pattern should find next yearly occurrence" name="nextOccurrence Yearly pattern should find next yearly occurrence" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Yearly pattern should handle leap year for Feb 29" name="nextOccurrence Yearly pattern should handle leap year for Feb 29" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Yearly pattern should handle yearly with specific time" name="nextOccurrence Yearly pattern should handle yearly with specific time" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Custom start_from should calculate from custom start date" name="nextOccurrence Custom start_from should calculate from custom start date" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Custom start_from should handle timezone in start_from" name="nextOccurrence Custom start_from should handle timezone in start_from" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Edge cases should handle pattern case-insensitively" name="nextOccurrence Edge cases should handle pattern case-insensitively" time="0.003">
    </testcase>
    <testcase classname="nextOccurrence Edge cases should default missing parameters appropriately" name="nextOccurrence Edge cases should default missing parameters appropriately" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Edge cases should handle DST transitions" name="nextOccurrence Edge cases should handle DST transitions" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid pattern" name="nextOccurrence Error handling should throw error for invalid pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid day_of_week" name="nextOccurrence Error handling should throw error for invalid day_of_week" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid day_of_month" name="nextOccurrence Error handling should throw error for invalid day_of_month" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid time format" name="nextOccurrence Error handling should throw error for invalid time format" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid timezone" name="nextOccurrence Error handling should throw error for invalid timezone" time="0.01">
    </testcase>
    <testcase classname="nextOccurrence Error handling should throw error for invalid start_from date" name="nextOccurrence Error handling should throw error for invalid start_from date" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence Caching should cache results for 1 hour" name="nextOccurrence Caching should cache results for 1 hour" time="0.005">
    </testcase>
    <testcase classname="nextOccurrence Caching should return cached result if available" name="nextOccurrence Caching should return cached result if available" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Caching should use different cache keys for different parameters" name="nextOccurrence Caching should use different cache keys for different parameters" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Response format should return all required fields" name="nextOccurrence Response format should return all required fields" time="0.004">
    </testcase>
    <testcase classname="nextOccurrence Response format should return ISO8601 format for next" name="nextOccurrence Response format should return ISO8601 format for next" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Response format should calculate unix timestamp correctly" name="nextOccurrence Response format should calculate unix timestamp correctly" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence Response format should calculate days_until as whole days" name="nextOccurrence Response format should calculate days_until as whole days" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should use system timezone when no timezone parameter provided" name="nextOccurrence System timezone defaults should use system timezone when no timezone parameter provided" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" name="nextOccurrence System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should use explicit timezone parameter over system default" name="nextOccurrence System timezone defaults should use explicit timezone parameter over system default" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should apply system timezone for weekly pattern" name="nextOccurrence System timezone defaults should apply system timezone for weekly pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should apply system timezone for monthly pattern" name="nextOccurrence System timezone defaults should apply system timezone for monthly pattern" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should apply system timezone for yearly pattern" name="nextOccurrence System timezone defaults should apply system timezone for yearly pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence System timezone defaults should handle system timezone in cache key" name="nextOccurrence System timezone defaults should handle system timezone in cache key" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="calculate_business_hours integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.297" tests="10">
    <testcase classname="calculate_business_hours integration should calculate business hours for a single day" name="calculate_business_hours integration should calculate business hours for a single day" time="0.016">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle custom business hours" name="calculate_business_hours integration should handle custom business hours" time="0.006">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle weekends correctly" name="calculate_business_hours integration should handle weekends correctly" time="0.006">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle holidays" name="calculate_business_hours integration should handle holidays" time="0.008">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle timezone parameter" name="calculate_business_hours integration should handle timezone parameter" time="0.007">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle weekly business hours schedule" name="calculate_business_hours integration should handle weekly business hours schedule" time="0.01">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle invalid timezone" name="calculate_business_hours integration should handle invalid timezone" time="0.004">
    </testcase>
    <testcase classname="calculate_business_hours integration should handle invalid date format" name="calculate_business_hours integration should handle invalid date format" time="0.005">
    </testcase>
    <testcase classname="calculate_business_hours integration should use UTC with empty string timezone" name="calculate_business_hours integration should use UTC with empty string timezone" time="0.005">
    </testcase>
    <testcase classname="calculate_business_hours integration should include weekends when specified" name="calculate_business_hours integration should include weekends when specified" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="calculateDuration validation helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.554" tests="6">
    <testcase classname="calculateDuration validation helpers validateUnit should return &quot;auto&quot; when undefined" name="calculateDuration validation helpers validateUnit should return &quot;auto&quot; when undefined" time="0.002">
    </testcase>
    <testcase classname="calculateDuration validation helpers validateUnit should return the unit when valid" name="calculateDuration validation helpers validateUnit should return the unit when valid" time="0.001">
    </testcase>
    <testcase classname="calculateDuration validation helpers validateUnit should throw for invalid unit" name="calculateDuration validation helpers validateUnit should throw for invalid unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration validation helpers resolveTimezone should return default timezone when undefined" name="calculateDuration validation helpers resolveTimezone should return default timezone when undefined" time="0.001">
    </testcase>
    <testcase classname="calculateDuration validation helpers resolveTimezone should return UTC when empty string" name="calculateDuration validation helpers resolveTimezone should return UTC when empty string" time="0.001">
    </testcase>
    <testcase classname="calculateDuration validation helpers resolveTimezone should return provided timezone when valid" name="calculateDuration validation helpers resolveTimezone should return provided timezone when valid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="calculate_duration integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:03" time="10.265" tests="3">
    <testcase classname="calculate_duration integration should execute calculate_duration with basic parameters" name="calculate_duration integration should execute calculate_duration with basic parameters" time="0.089">
    </testcase>
    <testcase classname="calculate_duration integration should handle negative duration" name="calculate_duration integration should handle negative duration" time="0.01">
    </testcase>
    <testcase classname="calculate_duration integration should handle calculate_duration with timezone" name="calculate_duration integration should handle calculate_duration with timezone" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="days_until integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.364" tests="13">
    <testcase classname="days_until integration should calculate days until a future date" name="days_until integration should calculate days until a future date" time="0.011">
    </testcase>
    <testcase classname="days_until integration should return 0 for today" name="days_until integration should return 0 for today" time="0.011">
    </testcase>
    <testcase classname="days_until integration should return negative days for past dates" name="days_until integration should return negative days for past dates" time="0.009">
    </testcase>
    <testcase classname="days_until integration should format as &quot;Today&quot; when format_result is true" name="days_until integration should format as &quot;Today&quot; when format_result is true" time="0.008">
    </testcase>
    <testcase classname="days_until integration should format as &quot;Tomorrow&quot; for next day" name="days_until integration should format as &quot;Tomorrow&quot; for next day" time="0.009">
    </testcase>
    <testcase classname="days_until integration should format as &quot;in N days&quot; for future dates" name="days_until integration should format as &quot;in N days&quot; for future dates" time="0.011">
    </testcase>
    <testcase classname="days_until integration should handle specific timezone" name="days_until integration should handle specific timezone" time="0.008">
    </testcase>
    <testcase classname="days_until integration should use UTC when timezone is empty string" name="days_until integration should use UTC when timezone is empty string" time="0.012">
    </testcase>
    <testcase classname="days_until integration should throw error for missing target_date" name="days_until integration should throw error for missing target_date" time="0.004">
    </testcase>
    <testcase classname="days_until integration should throw error for invalid date" name="days_until integration should throw error for invalid date" time="0.008">
    </testcase>
    <testcase classname="days_until integration should throw error for invalid timezone" name="days_until integration should throw error for invalid timezone" time="0.008">
    </testcase>
    <testcase classname="days_until integration should handle Christmas countdown" name="days_until integration should handle Christmas countdown" time="0.007">
    </testcase>
    <testcase classname="days_until integration should handle event planning with formatted output" name="days_until integration should handle event planning with formatted output" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="formatTime" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.348" tests="37">
    <testcase classname="formatTime Relative formatting should format future time relatively" name="formatTime Relative formatting should format future time relatively" time="0.013">
    </testcase>
    <testcase classname="formatTime Relative formatting should format past time relatively" name="formatTime Relative formatting should format past time relatively" time="0.006">
    </testcase>
    <testcase classname="formatTime Relative formatting should format same day time relatively" name="formatTime Relative formatting should format same day time relatively" time="0.002">
    </testcase>
    <testcase classname="formatTime Relative formatting should format tomorrow relatively" name="formatTime Relative formatting should format tomorrow relatively" time="0.007">
    </testcase>
    <testcase classname="formatTime Relative formatting should format yesterday relatively" name="formatTime Relative formatting should format yesterday relatively" time="0.002">
    </testcase>
    <testcase classname="formatTime Relative formatting should handle relative formatting with timezone" name="formatTime Relative formatting should handle relative formatting with timezone" time="0.006">
    </testcase>
    <testcase classname="formatTime Calendar formatting should format time in calendar style" name="formatTime Calendar formatting should format time in calendar style" time="0.007">
    </testcase>
    <testcase classname="formatTime Calendar formatting should handle calendar format for past dates" name="formatTime Calendar formatting should handle calendar format for past dates" time="0.002">
    </testcase>
    <testcase classname="formatTime Custom formatting should format with custom format string" name="formatTime Custom formatting should format with custom format string" time="0.007">
    </testcase>
    <testcase classname="formatTime Custom formatting should support various custom formats" name="formatTime Custom formatting should support various custom formats" time="0.006">
    </testcase>
    <testcase classname="formatTime Custom formatting should handle custom format with timezone" name="formatTime Custom formatting should handle custom format with timezone" time="0.002">
    </testcase>
    <testcase classname="formatTime Custom formatting should handle escaped text in custom format" name="formatTime Custom formatting should handle escaped text in custom format" time="0.001">
    </testcase>
    <testcase classname="formatTime Timezone handling should format in specified timezone" name="formatTime Timezone handling should format in specified timezone" time="0.001">
    </testcase>
    <testcase classname="formatTime Timezone handling should show correct timezone offset" name="formatTime Timezone handling should show correct timezone offset" time="0.002">
    </testcase>
    <testcase classname="formatTime Timezone handling should handle UTC timezone" name="formatTime Timezone handling should handle UTC timezone" time="0.001">
    </testcase>
    <testcase classname="formatTime Input validation should handle various input time formats" name="formatTime Input validation should handle various input time formats" time="0.004">
    </testcase>
    <testcase classname="formatTime Input validation should handle unix timestamp" name="formatTime Input validation should handle unix timestamp" time="0.001">
    </testcase>
    <testcase classname="formatTime Error handling should throw error for invalid format type" name="formatTime Error handling should throw error for invalid format type" time="0.003">
    </testcase>
    <testcase classname="formatTime Error handling should throw error for missing custom_format when format is custom" name="formatTime Error handling should throw error for missing custom_format when format is custom" time="0.002">
    </testcase>
    <testcase classname="formatTime Error handling should throw error for empty custom_format" name="formatTime Error handling should throw error for empty custom_format" time="0.001">
    </testcase>
    <testcase classname="formatTime Error handling should throw error for invalid time" name="formatTime Error handling should throw error for invalid time" time="0.001">
    </testcase>
    <testcase classname="formatTime Error handling should throw error for invalid timezone" name="formatTime Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="formatTime Caching should cache results for 5 minutes" name="formatTime Caching should cache results for 5 minutes" time="0.003">
    </testcase>
    <testcase classname="formatTime Caching should return cached result if available" name="formatTime Caching should return cached result if available" time="0.002">
    </testcase>
    <testcase classname="formatTime Caching should use different cache keys for different parameters" name="formatTime Caching should use different cache keys for different parameters" time="0.002">
    </testcase>
    <testcase classname="formatTime Edge cases should handle invalid date gracefully" name="formatTime Edge cases should handle invalid date gracefully" time="0.001">
    </testcase>
    <testcase classname="formatTime Edge cases should handle very old dates" name="formatTime Edge cases should handle very old dates" time="0.001">
    </testcase>
    <testcase classname="formatTime Edge cases should handle far future dates" name="formatTime Edge cases should handle far future dates" time="0.001">
    </testcase>
    <testcase classname="formatTime Edge cases should format case-insensitively" name="formatTime Edge cases should format case-insensitively" time="0.001">
    </testcase>
    <testcase classname="formatTime Response format should return all required fields" name="formatTime Response format should return all required fields" time="0.003">
    </testcase>
    <testcase classname="formatTime Response format should preserve original time in ISO format" name="formatTime Response format should preserve original time in ISO format" time="0.001">
    </testcase>
    <testcase classname="formatTime System timezone defaults should use system timezone when no timezone parameter provided" name="formatTime System timezone defaults should use system timezone when no timezone parameter provided" time="0.002">
    </testcase>
    <testcase classname="formatTime System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" name="formatTime System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" time="0.001">
    </testcase>
    <testcase classname="formatTime System timezone defaults should use explicit timezone parameter over system default" name="formatTime System timezone defaults should use explicit timezone parameter over system default" time="0.001">
    </testcase>
    <testcase classname="formatTime System timezone defaults should apply system timezone for custom format" name="formatTime System timezone defaults should apply system timezone for custom format" time="0.003">
    </testcase>
    <testcase classname="formatTime System timezone defaults should apply system timezone for calendar format" name="formatTime System timezone defaults should apply system timezone for calendar format" time="0.001">
    </testcase>
    <testcase classname="formatTime System timezone defaults should handle system timezone in cache key" name="formatTime System timezone defaults should handle system timezone in cache key" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="get_business_days with holiday calendars - Integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.419" tests="13">
    <testcase classname="get_business_days with holiday calendars - Integration US holiday calendar should calculate business days excluding US holidays" name="get_business_days with holiday calendars - Integration US holiday calendar should calculate business days excluding US holidays" time="0.018">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration US holiday calendar should handle observed holidays" name="get_business_days with holiday calendars - Integration US holiday calendar should handle observed holidays" time="0.006">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration US holiday calendar should respect include_observed parameter" name="get_business_days with holiday calendars - Integration US holiday calendar should respect include_observed parameter" time="0.005">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration UK holiday calendar should calculate business days excluding UK holidays" name="get_business_days with holiday calendars - Integration UK holiday calendar should calculate business days excluding UK holidays" time="0.009">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration UK holiday calendar should handle UK bank holiday observation rules" name="get_business_days with holiday calendars - Integration UK holiday calendar should handle UK bank holiday observation rules" time="0.014">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration combining holiday sources should combine calendar and custom holidays" name="get_business_days with holiday calendars - Integration combining holiday sources should combine calendar and custom holidays" time="0.009">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration combining holiday sources should not double-count duplicate holidays" name="get_business_days with holiday calendars - Integration combining holiday sources should not double-count duplicate holidays" time="0.009">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration combining holiday sources should combine all three holiday sources" name="get_business_days with holiday calendars - Integration combining holiday sources should combine all three holiday sources" time="0.02">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration timezone handling should handle holidays correctly with timezone specified" name="get_business_days with holiday calendars - Integration timezone handling should handle holidays correctly with timezone specified" time="0.01">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration timezone handling should handle cross-timezone date ranges" name="get_business_days with holiday calendars - Integration timezone handling should handle cross-timezone date ranges" time="0.005">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration unknown country handling should gracefully handle unknown country codes" name="get_business_days with holiday calendars - Integration unknown country handling should gracefully handle unknown country codes" time="0.005">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration performance with multiple years should handle multi-year date ranges efficiently" name="get_business_days with holiday calendars - Integration performance with multiple years should handle multi-year date ranges efficiently" time="0.009">
    </testcase>
    <testcase classname="get_business_days with holiday calendars - Integration error handling should handle invalid custom holiday dates" name="get_business_days with holiday calendars - Integration error handling should handle invalid custom holiday dates" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="calculateBusinessHours - Timezone Edge Cases" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.301" tests="4">
    <testcase classname="calculateBusinessHours - Timezone Edge Cases should handle times in different timezone contexts correctly" name="calculateBusinessHours - Timezone Edge Cases should handle times in different timezone contexts correctly" time="0.008">
    </testcase>
    <testcase classname="calculateBusinessHours - Timezone Edge Cases should handle UTC times converted to business timezone" name="calculateBusinessHours - Timezone Edge Cases should handle UTC times converted to business timezone" time="0.002">
    </testcase>
    <testcase classname="calculateBusinessHours - Timezone Edge Cases should handle times with explicit timezone offsets" name="calculateBusinessHours - Timezone Edge Cases should handle times with explicit timezone offsets" time="0.001">
    </testcase>
    <testcase classname="calculateBusinessHours - Timezone Edge Cases should handle cross-day business hours in different timezones" name="calculateBusinessHours - Timezone Edge Cases should handle cross-day business hours in different timezones" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Performance Benchmarks" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.275" tests="9">
    <testcase classname="Performance Benchmarks Cached responses should be &lt; 1ms getCurrentTime - cached" name="Performance Benchmarks Cached responses should be &lt; 1ms getCurrentTime - cached" time="0.007">
    </testcase>
    <testcase classname="Performance Benchmarks Cached responses should be &lt; 1ms getBusinessDays - cached" name="Performance Benchmarks Cached responses should be &lt; 1ms getBusinessDays - cached" time="0.005">
    </testcase>
    <testcase classname="Performance Benchmarks Fresh calculations should be &lt; 10ms getCurrentTime - fresh" name="Performance Benchmarks Fresh calculations should be &lt; 10ms getCurrentTime - fresh" time="0.001">
    </testcase>
    <testcase classname="Performance Benchmarks Fresh calculations should be &lt; 10ms convertTimezone - fresh" name="Performance Benchmarks Fresh calculations should be &lt; 10ms convertTimezone - fresh" time="0.004">
    </testcase>
    <testcase classname="Performance Benchmarks Fresh calculations should be &lt; 10ms calculateDuration - fresh" name="Performance Benchmarks Fresh calculations should be &lt; 10ms calculateDuration - fresh" time="0.003">
    </testcase>
    <testcase classname="Performance Benchmarks Complex operations should be &lt; 50ms getBusinessDays with holidays - fresh" name="Performance Benchmarks Complex operations should be &lt; 50ms getBusinessDays with holidays - fresh" time="0.004">
    </testcase>
    <testcase classname="Performance Benchmarks Complex operations should be &lt; 50ms calculateBusinessHours with holidays - fresh" name="Performance Benchmarks Complex operations should be &lt; 50ms calculateBusinessHours with holidays - fresh" time="0.016">
    </testcase>
    <testcase classname="Performance Benchmarks Complex operations should be &lt; 50ms getBusinessDays with Easter holidays - fresh" name="Performance Benchmarks Complex operations should be &lt; 50ms getBusinessDays with Easter holidays - fresh" time="0.012">
    </testcase>
    <testcase classname="Performance Benchmarks Batch operations performance 100 getCurrentTime calls should average &lt; 1ms each" name="Performance Benchmarks Batch operations performance 100 getCurrentTime calls should average &lt; 1ms each" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Cache Key Sanitization" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.92" tests="10">
    <testcase classname="Cache Key Sanitization Cache key hashing should hash cache keys to prevent filesystem issues" name="Cache Key Sanitization Cache key hashing should hash cache keys to prevent filesystem issues" time="0.016">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should generate different hashes for different inputs" name="Cache Key Sanitization Cache key hashing should generate different hashes for different inputs" time="0.006">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should handle filesystem-problematic characters in cache keys" name="Cache Key Sanitization Cache key hashing should handle filesystem-problematic characters in cache keys" time="0.006">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should handle timezone strings with various valid characters" name="Cache Key Sanitization Cache key hashing should handle timezone strings with various valid characters" time="0.01">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should handle long but valid format strings" name="Cache Key Sanitization Cache key hashing should handle long but valid format strings" time="0.002">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should handle all parameter combinations" name="Cache Key Sanitization Cache key hashing should handle all parameter combinations" time="0.001">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should produce consistent hashes for the same input" name="Cache Key Sanitization Cache key hashing should produce consistent hashes for the same input" time="0.002">
    </testcase>
    <testcase classname="Cache Key Sanitization Cache key hashing should work correctly with cache get operations" name="Cache Key Sanitization Cache key hashing should work correctly with cache get operations" time="0.002">
    </testcase>
    <testcase classname="Cache Key Sanitization Cross-tool consistency should use the same hashing method across all tools" name="Cache Key Sanitization Cross-tool consistency should use the same hashing method across all tools" time="0.007">
    </testcase>
    <testcase classname="Cache Key Sanitization Performance considerations should hash keys efficiently" name="Cache Key Sanitization Performance considerations should hash keys efficiently" time="0.313">
    </testcase>
  </testsuite>
  <testsuite name="getBusinessDays" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.338" tests="37">
    <testcase classname="getBusinessDays Basic functionality should calculate business days for a typical work week" name="getBusinessDays Basic functionality should calculate business days for a typical work week" time="0.01">
    </testcase>
    <testcase classname="getBusinessDays Basic functionality should exclude weekends by default" name="getBusinessDays Basic functionality should exclude weekends by default" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Basic functionality should include weekends when exclude_weekends is false" name="getBusinessDays Basic functionality should include weekends when exclude_weekends is false" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Basic functionality should handle same day interval" name="getBusinessDays Basic functionality should handle same day interval" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Basic functionality should handle weekend same day interval" name="getBusinessDays Basic functionality should handle weekend same day interval" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Holiday handling should exclude holidays from business days" name="getBusinessDays Holiday handling should exclude holidays from business days" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Holiday handling should handle multiple holidays" name="getBusinessDays Holiday handling should handle multiple holidays" time="0.047">
    </testcase>
    <testcase classname="getBusinessDays Holiday handling should not count holidays on weekends" name="getBusinessDays Holiday handling should not count holidays on weekends" time="0.007">
    </testcase>
    <testcase classname="getBusinessDays Holiday handling should handle holidays outside the date range" name="getBusinessDays Holiday handling should handle holidays outside the date range" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Holiday handling should count holidays when exclude_weekends is false" name="getBusinessDays Holiday handling should count holidays when exclude_weekends is false" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Date format handling should handle ISO date with time" name="getBusinessDays Date format handling should handle ISO date with time" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Date format handling should handle dates with timezone offset" name="getBusinessDays Date format handling should handle dates with timezone offset" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Date format handling should handle Unix timestamp strings" name="getBusinessDays Date format handling should handle Unix timestamp strings" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Date format handling should handle mixed date formats" name="getBusinessDays Date format handling should handle mixed date formats" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Timezone handling should interpret dates in specified timezone" name="getBusinessDays Timezone handling should interpret dates in specified timezone" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Timezone handling should handle dates that span different days in different timezones" name="getBusinessDays Timezone handling should handle dates that span different days in different timezones" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Timezone handling should handle DST transitions" name="getBusinessDays Timezone handling should handle DST transitions" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Timezone handling should use UTC when timezone not specified" name="getBusinessDays Timezone handling should use UTC when timezone not specified" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Edge cases should handle end date before start date" name="getBusinessDays Edge cases should handle end date before start date" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Edge cases should handle month boundaries" name="getBusinessDays Edge cases should handle month boundaries" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Edge cases should handle year boundaries" name="getBusinessDays Edge cases should handle year boundaries" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Edge cases should handle leap year" name="getBusinessDays Edge cases should handle leap year" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Edge cases should handle very long date ranges" name="getBusinessDays Edge cases should handle very long date ranges" time="0.004">
    </testcase>
    <testcase classname="getBusinessDays Error handling should throw error for invalid start date" name="getBusinessDays Error handling should throw error for invalid start date" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Error handling should throw error for invalid end date" name="getBusinessDays Error handling should throw error for invalid end date" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Error handling should throw error for invalid timezone" name="getBusinessDays Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Error handling should throw error for invalid holiday date" name="getBusinessDays Error handling should throw error for invalid holiday date" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Error handling should handle empty holiday array" name="getBusinessDays Error handling should handle empty holiday array" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Caching should cache results for 24 hours" name="getBusinessDays Caching should cache results for 24 hours" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Caching should return cached result if available" name="getBusinessDays Caching should return cached result if available" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays Caching should use different cache keys for different parameters" name="getBusinessDays Caching should use different cache keys for different parameters" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays Response format should return all required fields" name="getBusinessDays Response format should return all required fields" time="0.003">
    </testcase>
    <testcase classname="getBusinessDays Response format should ensure counts add up correctly" name="getBusinessDays Response format should ensure counts add up correctly" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays System timezone defaults should use system timezone when no timezone parameter provided" name="getBusinessDays System timezone defaults should use system timezone when no timezone parameter provided" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays System timezone defaults should use explicit timezone parameter over system default" name="getBusinessDays System timezone defaults should use explicit timezone parameter over system default" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays System timezone defaults should use UTC when empty string timezone provided" name="getBusinessDays System timezone defaults should use UTC when empty string timezone provided" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays System timezone defaults should handle timezone-sensitive date boundaries" name="getBusinessDays System timezone defaults should handle timezone-sensitive date boundaries" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Holiday Data Verification" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.238" tests="59">
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have the correct number of holidays" name="Holiday Data Verification 2025 Holiday Verification US holidays should have the correct number of holidays" time="0.007">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have New Year&apos;s Day on 2025-01-01" name="Holiday Data Verification 2025 Holiday Verification US holidays should have New Year&apos;s Day on 2025-01-01" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Martin Luther King Jr. Day on 2025-01-20" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Martin Luther King Jr. Day on 2025-01-20" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Presidents Day on 2025-02-17" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Presidents Day on 2025-02-17" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Memorial Day on 2025-05-26" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Memorial Day on 2025-05-26" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Juneteenth on 2025-06-19" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Juneteenth on 2025-06-19" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Independence Day on 2025-07-04" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Independence Day on 2025-07-04" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Labor Day on 2025-09-01" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Labor Day on 2025-09-01" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Columbus Day on 2025-10-13" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Columbus Day on 2025-10-13" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Veterans Day on 2025-11-11" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Veterans Day on 2025-11-11" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Thanksgiving on 2025-11-27" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Thanksgiving on 2025-11-27" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification US holidays should have Christmas Day on 2025-12-25" name="Holiday Data Verification 2025 Holiday Verification US holidays should have Christmas Day on 2025-12-25" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have the correct number of holidays" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have the correct number of holidays" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have New Year&apos;s Day on 2025-01-01" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have New Year&apos;s Day on 2025-01-01" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Good Friday on 2025-04-18" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Good Friday on 2025-04-18" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Easter Monday on 2025-04-21" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Easter Monday on 2025-04-21" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Early May Bank Holiday on 2025-05-05" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Early May Bank Holiday on 2025-05-05" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Spring Bank Holiday on 2025-05-26" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Spring Bank Holiday on 2025-05-26" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Summer Bank Holiday on 2025-08-25" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Summer Bank Holiday on 2025-08-25" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Christmas Day on 2025-12-25" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Christmas Day on 2025-12-25" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification UK holidays should have Boxing Day on 2025-12-26" name="Holiday Data Verification 2025 Holiday Verification UK holidays should have Boxing Day on 2025-12-26" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have the correct number of holidays" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have the correct number of holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have New Year&apos;s Day on 2025-01-01" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have New Year&apos;s Day on 2025-01-01" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Good Friday on 2025-04-18" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Good Friday on 2025-04-18" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Victoria Day on 2025-05-19" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Victoria Day on 2025-05-19" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Canada Day on 2025-07-01" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Canada Day on 2025-07-01" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Labour Day on 2025-09-01" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Labour Day on 2025-09-01" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Thanksgiving on 2025-10-13" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Thanksgiving on 2025-10-13" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Remembrance Day on 2025-11-11" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Remembrance Day on 2025-11-11" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Christmas Day on 2025-12-25" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Christmas Day on 2025-12-25" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification CA holidays should have Boxing Day on 2025-12-26" name="Holiday Data Verification 2025 Holiday Verification CA holidays should have Boxing Day on 2025-12-26" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have the correct number of holidays" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have the correct number of holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have New Year&apos;s Day on 2025-01-01" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have New Year&apos;s Day on 2025-01-01" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Australia Day on 2025-01-26" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Australia Day on 2025-01-26" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Good Friday on 2025-04-18" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Good Friday on 2025-04-18" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Easter Saturday on 2025-04-19" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Easter Saturday on 2025-04-19" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Easter Monday on 2025-04-21" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Easter Monday on 2025-04-21" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Anzac Day on 2025-04-25" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Anzac Day on 2025-04-25" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Queen&apos;s Birthday on 2025-06-09" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Queen&apos;s Birthday on 2025-06-09" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Christmas Day on 2025-12-25" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Christmas Day on 2025-12-25" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2025 Holiday Verification AU holidays should have Boxing Day on 2025-12-26" name="Holiday Data Verification 2025 Holiday Verification AU holidays should have Boxing Day on 2025-12-26" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have New Year&apos;s Day on 2026-01-01" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have New Year&apos;s Day on 2026-01-01" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Martin Luther King Jr. Day on 2026-01-19" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Martin Luther King Jr. Day on 2026-01-19" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Presidents Day on 2026-02-16" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Presidents Day on 2026-02-16" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Memorial Day on 2026-05-25" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Memorial Day on 2026-05-25" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Juneteenth on 2026-06-19" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Juneteenth on 2026-06-19" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Independence Day on 2026-07-04" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Independence Day on 2026-07-04" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Labor Day on 2026-09-07" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Labor Day on 2026-09-07" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Columbus Day on 2026-10-12" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Columbus Day on 2026-10-12" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Veterans Day on 2026-11-11" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Veterans Day on 2026-11-11" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Thanksgiving on 2026-11-26" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Thanksgiving on 2026-11-26" time="0">
    </testcase>
    <testcase classname="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Christmas Day on 2026-12-25" name="Holiday Data Verification 2026 Holiday Verification (US only for now) should have Christmas Day on 2026-12-25" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Verification Holiday Type Verification should correctly calculate fixed date holidays" name="Holiday Data Verification Holiday Type Verification should correctly calculate fixed date holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification Holiday Type Verification should correctly calculate nth weekday holidays" name="Holiday Data Verification Holiday Type Verification should correctly calculate nth weekday holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification Holiday Type Verification should correctly calculate last weekday holidays" name="Holiday Data Verification Holiday Type Verification should correctly calculate last weekday holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification Holiday Type Verification should correctly calculate Easter-based holidays" name="Holiday Data Verification Holiday Type Verification should correctly calculate Easter-based holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification Holiday Type Verification should correctly calculate Victoria Day (special rule)" name="Holiday Data Verification Holiday Type Verification should correctly calculate Victoria Day (special rule)" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Verification Multi-year Consistency should have consistent holiday counts across years" name="Holiday Data Verification Multi-year Consistency should have consistent holiday counts across years" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Verification Multi-year Consistency should calculate weekday holidays correctly across years" name="Holiday Data Verification Multi-year Consistency should calculate weekday holidays correctly across years" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Error Handling Integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.224" tests="3">
    <testcase classname="Error Handling Integration Invalid Tool Name should return error for non-existent tool" name="Error Handling Integration Invalid Tool Name should return error for non-existent tool" time="0.009">
    </testcase>
    <testcase classname="Error Handling Integration Tool Validation Errors should return error for invalid timezone" name="Error Handling Integration Tool Validation Errors should return error for invalid timezone" time="0.007">
    </testcase>
    <testcase classname="Error Handling Integration Tool Validation Errors should return error for invalid date format" name="Error Handling Integration Tool Validation Errors should return error for invalid date format" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="subtractTime" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.239" tests="30">
    <testcase classname="subtractTime Basic functionality should subtract years from a date" name="subtractTime Basic functionality should subtract years from a date" time="0.007">
    </testcase>
    <testcase classname="subtractTime Basic functionality should subtract months from a date" name="subtractTime Basic functionality should subtract months from a date" time="0.002">
    </testcase>
    <testcase classname="subtractTime Basic functionality should subtract days from a date" name="subtractTime Basic functionality should subtract days from a date" time="0.001">
    </testcase>
    <testcase classname="subtractTime Basic functionality should subtract hours from a date" name="subtractTime Basic functionality should subtract hours from a date" time="0.001">
    </testcase>
    <testcase classname="subtractTime Basic functionality should subtract minutes from a date" name="subtractTime Basic functionality should subtract minutes from a date" time="0.001">
    </testcase>
    <testcase classname="subtractTime Basic functionality should subtract seconds from a date" name="subtractTime Basic functionality should subtract seconds from a date" time="0.001">
    </testcase>
    <testcase classname="subtractTime Timezone handling should handle timezone-aware subtraction" name="subtractTime Timezone handling should handle timezone-aware subtraction" time="0.003">
    </testcase>
    <testcase classname="subtractTime Timezone handling should handle DST transitions when subtracting across boundaries" name="subtractTime Timezone handling should handle DST transitions when subtracting across boundaries" time="0.002">
    </testcase>
    <testcase classname="subtractTime Timezone handling should handle input with explicit timezone offset" name="subtractTime Timezone handling should handle input with explicit timezone offset" time="0.002">
    </testcase>
    <testcase classname="subtractTime Timezone handling should display result in requested timezone" name="subtractTime Timezone handling should display result in requested timezone" time="0.002">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle negative amounts (addition)" name="subtractTime Edge cases should handle negative amounts (addition)" time="0.001">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle month-end correctly" name="subtractTime Edge cases should handle month-end correctly" time="0.001">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle leap year correctly" name="subtractTime Edge cases should handle leap year correctly" time="0.001">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle date-only input" name="subtractTime Edge cases should handle date-only input" time="0.002">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle Unix timestamp input" name="subtractTime Edge cases should handle Unix timestamp input" time="0.002">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle zero amount" name="subtractTime Edge cases should handle zero amount" time="0.001">
    </testcase>
    <testcase classname="subtractTime Edge cases should handle year boundary crossing" name="subtractTime Edge cases should handle year boundary crossing" time="0.001">
    </testcase>
    <testcase classname="subtractTime Error handling should throw error for invalid time format" name="subtractTime Error handling should throw error for invalid time format" time="0.003">
    </testcase>
    <testcase classname="subtractTime Error handling should throw error for invalid unit" name="subtractTime Error handling should throw error for invalid unit" time="0.001">
    </testcase>
    <testcase classname="subtractTime Error handling should throw error for invalid timezone" name="subtractTime Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="subtractTime Error handling should throw error for NaN amount" name="subtractTime Error handling should throw error for NaN amount" time="0.001">
    </testcase>
    <testcase classname="subtractTime Caching should cache results for 1 hour" name="subtractTime Caching should cache results for 1 hour" time="0.002">
    </testcase>
    <testcase classname="subtractTime Caching should return cached result if available" name="subtractTime Caching should return cached result if available" time="0.001">
    </testcase>
    <testcase classname="subtractTime Caching should use system timezone in cache key when no timezone specified" name="subtractTime Caching should use system timezone in cache key when no timezone specified" time="0.001">
    </testcase>
    <testcase classname="subtractTime Caching should use different cache keys for different parameters" name="subtractTime Caching should use different cache keys for different parameters" time="0.002">
    </testcase>
    <testcase classname="subtractTime Output format verification should always include all required fields" name="subtractTime Output format verification should always include all required fields" time="0.003">
    </testcase>
    <testcase classname="subtractTime Output format verification should format times consistently with milliseconds" name="subtractTime Output format verification should format times consistently with milliseconds" time="0.001">
    </testcase>
    <testcase classname="subtractTime System timezone defaults should use system timezone when no timezone parameter provided" name="subtractTime System timezone defaults should use system timezone when no timezone parameter provided" time="0.002">
    </testcase>
    <testcase classname="subtractTime System timezone defaults should use explicit timezone parameter over system default" name="subtractTime System timezone defaults should use explicit timezone parameter over system default" time="0.002">
    </testcase>
    <testcase classname="subtractTime System timezone defaults should use UTC when empty string timezone provided" name="subtractTime System timezone defaults should use UTC when empty string timezone provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="addTime" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.371" tests="31">
    <testcase classname="addTime Basic functionality should add years to a date" name="addTime Basic functionality should add years to a date" time="0.011">
    </testcase>
    <testcase classname="addTime Basic functionality should add months to a date" name="addTime Basic functionality should add months to a date" time="0.002">
    </testcase>
    <testcase classname="addTime Basic functionality should add days to a date" name="addTime Basic functionality should add days to a date" time="0.003">
    </testcase>
    <testcase classname="addTime Basic functionality should add hours to a date" name="addTime Basic functionality should add hours to a date" time="0.001">
    </testcase>
    <testcase classname="addTime Basic functionality should add minutes to a date" name="addTime Basic functionality should add minutes to a date" time="0.034">
    </testcase>
    <testcase classname="addTime Basic functionality should add seconds to a date" name="addTime Basic functionality should add seconds to a date" time="0.001">
    </testcase>
    <testcase classname="addTime Timezone handling should handle timezone-aware addition" name="addTime Timezone handling should handle timezone-aware addition" time="0.003">
    </testcase>
    <testcase classname="addTime Timezone handling should handle DST transitions when adding hours" name="addTime Timezone handling should handle DST transitions when adding hours" time="0.002">
    </testcase>
    <testcase classname="addTime Timezone handling should handle input with explicit timezone offset" name="addTime Timezone handling should handle input with explicit timezone offset" time="0.002">
    </testcase>
    <testcase classname="addTime Timezone handling should handle input with uncommon offset" name="addTime Timezone handling should handle input with uncommon offset" time="0.001">
    </testcase>
    <testcase classname="addTime Timezone handling should display result in requested timezone" name="addTime Timezone handling should display result in requested timezone" time="0.002">
    </testcase>
    <testcase classname="addTime Edge cases should handle negative amounts (subtraction)" name="addTime Edge cases should handle negative amounts (subtraction)" time="0.001">
    </testcase>
    <testcase classname="addTime Edge cases should handle month-end correctly" name="addTime Edge cases should handle month-end correctly" time="0.001">
    </testcase>
    <testcase classname="addTime Edge cases should handle leap year correctly" name="addTime Edge cases should handle leap year correctly" time="0.001">
    </testcase>
    <testcase classname="addTime Edge cases should handle date-only input" name="addTime Edge cases should handle date-only input" time="0.008">
    </testcase>
    <testcase classname="addTime Edge cases should handle Unix timestamp input" name="addTime Edge cases should handle Unix timestamp input" time="0.001">
    </testcase>
    <testcase classname="addTime Edge cases should handle Unix timestamp with timezone" name="addTime Edge cases should handle Unix timestamp with timezone" time="0.002">
    </testcase>
    <testcase classname="addTime Edge cases should handle zero amount" name="addTime Edge cases should handle zero amount" time="0.001">
    </testcase>
    <testcase classname="addTime Error handling should throw error for invalid time format" name="addTime Error handling should throw error for invalid time format" time="0.007">
    </testcase>
    <testcase classname="addTime Error handling should throw error for invalid unit" name="addTime Error handling should throw error for invalid unit" time="0.001">
    </testcase>
    <testcase classname="addTime Error handling should throw error for invalid timezone" name="addTime Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="addTime Error handling should throw error for NaN amount" name="addTime Error handling should throw error for NaN amount" time="0.001">
    </testcase>
    <testcase classname="addTime Error handling should throw error for Infinity amount" name="addTime Error handling should throw error for Infinity amount" time="0.002">
    </testcase>
    <testcase classname="addTime Caching should cache results for 1 hour" name="addTime Caching should cache results for 1 hour" time="0.002">
    </testcase>
    <testcase classname="addTime Caching should return cached result if available" name="addTime Caching should return cached result if available" time="0.002">
    </testcase>
    <testcase classname="addTime Caching should use different cache keys for different parameters" name="addTime Caching should use different cache keys for different parameters" time="0.001">
    </testcase>
    <testcase classname="addTime Output format verification should always include all required fields" name="addTime Output format verification should always include all required fields" time="0.002">
    </testcase>
    <testcase classname="addTime Output format verification should format times consistently with milliseconds" name="addTime Output format verification should format times consistently with milliseconds" time="0.004">
    </testcase>
    <testcase classname="addTime System timezone defaults should use system timezone when no timezone parameter provided" name="addTime System timezone defaults should use system timezone when no timezone parameter provided" time="0.001">
    </testcase>
    <testcase classname="addTime System timezone defaults should use explicit timezone parameter over system default" name="addTime System timezone defaults should use explicit timezone parameter over system default" time="0.001">
    </testcase>
    <testcase classname="addTime System timezone defaults should use UTC when empty string timezone provided" name="addTime System timezone defaults should use UTC when empty string timezone provided" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Security - Input Validation" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.261" tests="17">
    <testcase classname="Security - Input Validation String Length Limits Timezone validation should reject timezone strings over 100 characters" name="Security - Input Validation String Length Limits Timezone validation should reject timezone strings over 100 characters" time="0.004">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits Timezone validation should accept timezone strings up to 100 characters" name="Security - Input Validation String Length Limits Timezone validation should accept timezone strings up to 100 characters" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits Date string validation should reject date strings over 100 characters" name="Security - Input Validation String Length Limits Date string validation should reject date strings over 100 characters" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits Date string validation should accept date strings up to 100 characters" name="Security - Input Validation String Length Limits Date string validation should accept date strings up to 100 characters" time="0.005">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits Format string validation should reject format strings over 200 characters" name="Security - Input Validation String Length Limits Format string validation should reject format strings over 200 characters" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits Format string validation should accept format strings up to 200 characters" name="Security - Input Validation String Length Limits Format string validation should accept format strings up to 200 characters" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation String Length Limits General string validation should reject any string parameter over 1000 characters" name="Security - Input Validation String Length Limits General string validation should reject any string parameter over 1000 characters" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation Array Length Limits should reject holiday arrays with more than 365 items" name="Security - Input Validation Array Length Limits should reject holiday arrays with more than 365 items" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation Array Length Limits should accept holiday arrays with up to 365 items" name="Security - Input Validation Array Length Limits should accept holiday arrays with up to 365 items" time="0.009">
    </testcase>
    <testcase classname="Security - Input Validation Special Character Handling should safely handle null bytes in strings" name="Security - Input Validation Special Character Handling should safely handle null bytes in strings" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation Special Character Handling should safely handle unicode and emoji" name="Security - Input Validation Special Character Handling should safely handle unicode and emoji" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation Special Character Handling should safely handle RTL override characters" name="Security - Input Validation Special Character Handling should safely handle RTL override characters" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation Special Character Handling should reject path traversal attempts" name="Security - Input Validation Special Character Handling should reject path traversal attempts" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation Empty and Edge Cases should handle empty strings appropriately" name="Security - Input Validation Empty and Edge Cases should handle empty strings appropriately" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation Empty and Edge Cases should handle very long but valid format strings" name="Security - Input Validation Empty and Edge Cases should handle very long but valid format strings" time="0.002">
    </testcase>
    <testcase classname="Security - Input Validation Empty and Edge Cases should handle arrays with mixed valid/invalid dates" name="Security - Input Validation Empty and Edge Cases should handle arrays with mixed valid/invalid dates" time="0.001">
    </testcase>
    <testcase classname="Security - Input Validation Memory Exhaustion Prevention should prevent memory exhaustion via accumulated long strings" name="Security - Input Validation Memory Exhaustion Prevention should prevent memory exhaustion via accumulated long strings" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Holiday Data Module" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.182" tests="18">
    <testcase classname="Holiday Data Module getHolidayDefinitions should return holiday definitions for US" name="Holiday Data Module getHolidayDefinitions should return holiday definitions for US" time="0.004">
    </testcase>
    <testcase classname="Holiday Data Module getHolidayDefinitions should return holiday definitions for UK" name="Holiday Data Module getHolidayDefinitions should return holiday definitions for UK" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module getHolidayDefinitions should return empty array for unknown country" name="Holiday Data Module getHolidayDefinitions should return empty array for unknown country" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFixedHoliday should calculate fixed holiday date for a year" name="Holiday Data Module calculateFixedHoliday should calculate fixed holiday date for a year" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFixedHoliday should handle leap year for Feb 29" name="Holiday Data Module calculateFixedHoliday should handle leap year for Feb 29" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFloatingHoliday should calculate MLK Day (3rd Monday in January)" name="Holiday Data Module calculateFloatingHoliday should calculate MLK Day (3rd Monday in January)" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFloatingHoliday should calculate Thanksgiving (4th Thursday in November)" name="Holiday Data Module calculateFloatingHoliday should calculate Thanksgiving (4th Thursday in November)" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFloatingHoliday should calculate Memorial Day (last Monday in May)" name="Holiday Data Module calculateFloatingHoliday should calculate Memorial Day (last Monday in May)" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module calculateFloatingHoliday should return null for non-existent occurrence" name="Holiday Data Module calculateFloatingHoliday should return null for non-existent occurrence" time="0">
    </testcase>
    <testcase classname="Holiday Data Module getObservedDate should apply US Federal observation rules" name="Holiday Data Module getObservedDate should apply US Federal observation rules" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module getObservedDate should apply UK Bank holiday rules" name="Holiday Data Module getObservedDate should apply UK Bank holiday rules" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module getObservedDate should not observe when rule is &quot;never&quot;" name="Holiday Data Module getObservedDate should not observe when rule is &quot;never&quot;" time="0">
    </testcase>
    <testcase classname="Holiday Data Module getObservedDate should always use actual date when rule is &quot;always&quot;" name="Holiday Data Module getObservedDate should always use actual date when rule is &quot;always&quot;" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module getHolidaysForYear should return all US holidays for 2025" name="Holiday Data Module getHolidaysForYear should return all US holidays for 2025" time="0.002">
    </testcase>
    <testcase classname="Holiday Data Module getHolidaysForYear should include observed dates when different from actual" name="Holiday Data Module getHolidaysForYear should include observed dates when different from actual" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module getHolidaysForYear should return empty array for unknown country" name="Holiday Data Module getHolidaysForYear should return empty array for unknown country" time="0">
    </testcase>
    <testcase classname="Holiday Data Module isHoliday should identify US holidays" name="Holiday Data Module isHoliday should identify US holidays" time="0.001">
    </testcase>
    <testcase classname="Holiday Data Module isHoliday should check observed dates" name="Holiday Data Module isHoliday should check observed dates" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="calculateDuration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.348" tests="31">
    <testcase classname="calculateDuration Basic functionality should calculate duration between two UTC times" name="calculateDuration Basic functionality should calculate duration between two UTC times" time="0.008">
    </testcase>
    <testcase classname="calculateDuration Basic functionality should handle negative duration (end before start)" name="calculateDuration Basic functionality should handle negative duration (end before start)" time="0.007">
    </testcase>
    <testcase classname="calculateDuration Basic functionality should handle zero duration (same times)" name="calculateDuration Basic functionality should handle zero duration (same times)" time="0.006">
    </testcase>
    <testcase classname="calculateDuration Basic functionality should handle multi-day durations" name="calculateDuration Basic functionality should handle multi-day durations" time="0.004">
    </testcase>
    <testcase classname="calculateDuration Timezone handling should handle times with explicit offsets" name="calculateDuration Timezone handling should handle times with explicit offsets" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Timezone handling should handle timezone parameter for local times" name="calculateDuration Timezone handling should handle timezone parameter for local times" time="0.004">
    </testcase>
    <testcase classname="calculateDuration Timezone handling should handle DST transitions correctly" name="calculateDuration Timezone handling should handle DST transitions correctly" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Timezone handling should calculate duration when times have different timezone representations" name="calculateDuration Timezone handling should calculate duration when times have different timezone representations" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Input format variations should handle date-only inputs" name="calculateDuration Input format variations should handle date-only inputs" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Input format variations should handle Unix timestamp strings" name="calculateDuration Input format variations should handle Unix timestamp strings" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Input format variations should handle mixed input formats" name="calculateDuration Input format variations should handle mixed input formats" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Formatted output variations should format seconds only for durations under a minute" name="calculateDuration Formatted output variations should format seconds only for durations under a minute" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Formatted output variations should format minutes only for durations under an hour" name="calculateDuration Formatted output variations should format minutes only for durations under an hour" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Formatted output variations should format hours and minutes for durations under a day" name="calculateDuration Formatted output variations should format hours and minutes for durations under a day" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Formatted output variations should include all units for complex durations" name="calculateDuration Formatted output variations should include all units for complex durations" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Formatted output variations should handle singular units correctly" name="calculateDuration Formatted output variations should handle singular units correctly" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Unit parameter handling should return only requested unit when specified" name="calculateDuration Unit parameter handling should return only requested unit when specified" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Unit parameter handling should handle &quot;auto&quot; unit (default behavior)" name="calculateDuration Unit parameter handling should handle &quot;auto&quot; unit (default behavior)" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Error handling should throw error for invalid start time" name="calculateDuration Error handling should throw error for invalid start time" time="0.003">
    </testcase>
    <testcase classname="calculateDuration Error handling should throw error for invalid end time" name="calculateDuration Error handling should throw error for invalid end time" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Error handling should throw error for invalid timezone" name="calculateDuration Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Error handling should throw error for invalid unit parameter" name="calculateDuration Error handling should throw error for invalid unit parameter" time="0.001">
    </testcase>
    <testcase classname="calculateDuration Caching should cache results for 1 hour" name="calculateDuration Caching should cache results for 1 hour" time="0.003">
    </testcase>
    <testcase classname="calculateDuration Caching should return cached result if available" name="calculateDuration Caching should return cached result if available" time="0.003">
    </testcase>
    <testcase classname="calculateDuration Caching should use different cache keys for different parameters" name="calculateDuration Caching should use different cache keys for different parameters" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Edge cases should handle very large durations" name="calculateDuration Edge cases should handle very large durations" time="0.002">
    </testcase>
    <testcase classname="calculateDuration Edge cases should handle millisecond precision" name="calculateDuration Edge cases should handle millisecond precision" time="0.002">
    </testcase>
    <testcase classname="calculateDuration System timezone defaults should use system timezone when no timezone parameter provided" name="calculateDuration System timezone defaults should use system timezone when no timezone parameter provided" time="0.001">
    </testcase>
    <testcase classname="calculateDuration System timezone defaults should use explicit timezone parameter over system default" name="calculateDuration System timezone defaults should use explicit timezone parameter over system default" time="0.002">
    </testcase>
    <testcase classname="calculateDuration System timezone defaults should use UTC when empty string timezone provided" name="calculateDuration System timezone defaults should use UTC when empty string timezone provided" time="0.002">
    </testcase>
    <testcase classname="calculateDuration System timezone defaults should handle times across DST boundaries with system timezone" name="calculateDuration System timezone defaults should handle times across DST boundaries with system timezone" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="convertTimezone date parsing helper" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.182" tests="8">
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should parse Unix timestamp as UTC" name="convertTimezone date parsing helper parseDateForConversion should parse Unix timestamp as UTC" time="0.002">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should parse ISO string with Z suffix" name="convertTimezone date parsing helper parseDateForConversion should parse ISO string with Z suffix" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should parse string with explicit offset" name="convertTimezone date parsing helper parseDateForConversion should parse string with explicit offset" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should parse local time string with from_timezone" name="convertTimezone date parsing helper parseDateForConversion should parse local time string with from_timezone" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should throw for invalid date format" name="convertTimezone date parsing helper parseDateForConversion should throw for invalid date format" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should throw for invalid Unix timestamp" name="convertTimezone date parsing helper parseDateForConversion should throw for invalid Unix timestamp" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion should handle date-only input" name="convertTimezone date parsing helper parseDateForConversion should handle date-only input" time="0.001">
    </testcase>
    <testcase classname="convertTimezone date parsing helper parseDateForConversion Debug logging should log parsing attempts" name="convertTimezone date parsing helper parseDateForConversion Debug logging should log parsing attempts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="daysUntil" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.228" tests="25">
    <testcase classname="daysUntil Basic functionality should calculate days until a future date" name="daysUntil Basic functionality should calculate days until a future date" time="0.006">
    </testcase>
    <testcase classname="daysUntil Basic functionality should return 0 for today" name="daysUntil Basic functionality should return 0 for today" time="0.001">
    </testcase>
    <testcase classname="daysUntil Basic functionality should return negative days for past dates" name="daysUntil Basic functionality should return negative days for past dates" time="0.001">
    </testcase>
    <testcase classname="daysUntil Basic functionality should handle dates far in the future" name="daysUntil Basic functionality should handle dates far in the future" time="0.001">
    </testcase>
    <testcase classname="daysUntil Date format handling should accept ISO date format" name="daysUntil Date format handling should accept ISO date format" time="0.001">
    </testcase>
    <testcase classname="daysUntil Date format handling should accept ISO datetime format" name="daysUntil Date format handling should accept ISO datetime format" time="0.001">
    </testcase>
    <testcase classname="daysUntil Date format handling should handle natural language dates" name="daysUntil Date format handling should handle natural language dates" time="0.001">
    </testcase>
    <testcase classname="daysUntil Timezone handling should use system timezone when not specified" name="daysUntil Timezone handling should use system timezone when not specified" time="0.001">
    </testcase>
    <testcase classname="daysUntil Timezone handling should use UTC when timezone is empty string" name="daysUntil Timezone handling should use UTC when timezone is empty string" time="0.001">
    </testcase>
    <testcase classname="daysUntil Timezone handling should use specified timezone" name="daysUntil Timezone handling should use specified timezone" time="0.002">
    </testcase>
    <testcase classname="daysUntil Formatting options should return plain number by default" name="daysUntil Formatting options should return plain number by default" time="0.001">
    </testcase>
    <testcase classname="daysUntil Formatting options should format as &quot;Today&quot; when format_result is true" name="daysUntil Formatting options should format as &quot;Today&quot; when format_result is true" time="0.001">
    </testcase>
    <testcase classname="daysUntil Formatting options should format as &quot;Tomorrow&quot; for next day" name="daysUntil Formatting options should format as &quot;Tomorrow&quot; for next day" time="0.001">
    </testcase>
    <testcase classname="daysUntil Formatting options should format as &quot;Yesterday&quot; for previous day" name="daysUntil Formatting options should format as &quot;Yesterday&quot; for previous day" time="0.001">
    </testcase>
    <testcase classname="daysUntil Formatting options should format as &quot;in N days&quot; for future dates" name="daysUntil Formatting options should format as &quot;in N days&quot; for future dates" time="0.002">
    </testcase>
    <testcase classname="daysUntil Formatting options should format as &quot;N days ago&quot; for past dates" name="daysUntil Formatting options should format as &quot;N days ago&quot; for past dates" time="0.001">
    </testcase>
    <testcase classname="daysUntil Edge cases should handle same day different times as 0 days" name="daysUntil Edge cases should handle same day different times as 0 days" time="0.001">
    </testcase>
    <testcase classname="daysUntil Edge cases should handle leap year dates" name="daysUntil Edge cases should handle leap year dates" time="0.001">
    </testcase>
    <testcase classname="daysUntil Edge cases should handle year boundaries" name="daysUntil Edge cases should handle year boundaries" time="0.001">
    </testcase>
    <testcase classname="daysUntil Error handling should throw error for missing target_date" name="daysUntil Error handling should throw error for missing target_date" time="0.002">
    </testcase>
    <testcase classname="daysUntil Error handling should throw error for invalid date" name="daysUntil Error handling should throw error for invalid date" time="0.001">
    </testcase>
    <testcase classname="daysUntil Error handling should throw error for invalid timezone" name="daysUntil Error handling should throw error for invalid timezone" time="0.002">
    </testcase>
    <testcase classname="daysUntil Real-world scenarios should calculate days until Christmas 2025" name="daysUntil Real-world scenarios should calculate days until Christmas 2025" time="0.001">
    </testcase>
    <testcase classname="daysUntil Real-world scenarios should handle event planning scenario" name="daysUntil Real-world scenarios should handle event planning scenario" time="0">
    </testcase>
    <testcase classname="daysUntil Real-world scenarios should handle deadline tracking" name="daysUntil Real-world scenarios should handle deadline tracking" time="0">
    </testcase>
  </testsuite>
  <testsuite name="convert_timezone integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.218" tests="2">
    <testcase classname="convert_timezone integration should execute convert_timezone with all params" name="convert_timezone integration should execute convert_timezone with all params" time="0.015">
    </testcase>
    <testcase classname="convert_timezone integration should execute convert_timezone with custom format" name="convert_timezone integration should execute convert_timezone with custom format" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="MCP Protocol Communication" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:12" time="0.751" tests="2">
    <testcase classname="MCP Protocol Communication Tools List should list tools through protocol" name="MCP Protocol Communication Tools List should list tools through protocol" time="0.049">
    </testcase>
    <testcase classname="MCP Protocol Communication JSON-RPC Message Structure should send valid JSON-RPC 2.0 messages" name="MCP Protocol Communication JSON-RPC Message Structure should send valid JSON-RPC 2.0 messages" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="nextOccurrence - RecurrenceFactory Integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.201" tests="17">
    <testcase classname="nextOccurrence - RecurrenceFactory Integration API Compatibility should return correct shape with next, unix, and days_until" name="nextOccurrence - RecurrenceFactory Integration API Compatibility should return correct shape with next, unix, and days_until" time="0.006">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration API Compatibility should handle snake_case parameters correctly" name="nextOccurrence - RecurrenceFactory Integration API Compatibility should handle snake_case parameters correctly" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration API Compatibility should handle day_of_month for monthly pattern" name="nextOccurrence - RecurrenceFactory Integration API Compatibility should handle day_of_month for monthly pattern" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle daily pattern" name="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle daily pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle weekly pattern" name="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle weekly pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle monthly pattern" name="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle monthly pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle yearly pattern" name="nextOccurrence - RecurrenceFactory Integration Pattern Handling should handle yearly pattern" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use system timezone when undefined" name="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use system timezone when undefined" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use UTC when timezone is empty string" name="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use UTC when timezone is empty string" time="0.002">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use specified timezone" name="nextOccurrence - RecurrenceFactory Integration Timezone Handling should use specified timezone" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Unix Timestamp should return correct unix timestamp" name="nextOccurrence - RecurrenceFactory Integration Unix Timestamp should return correct unix timestamp" time="0">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Days Until Calculation should calculate days_until correctly for same day" name="nextOccurrence - RecurrenceFactory Integration Days Until Calculation should calculate days_until correctly for same day" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Days Until Calculation should calculate days_until correctly for future dates" name="nextOccurrence - RecurrenceFactory Integration Days Until Calculation should calculate days_until correctly for future dates" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Error Handling should throw for invalid pattern" name="nextOccurrence - RecurrenceFactory Integration Error Handling should throw for invalid pattern" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Error Handling should throw for missing required parameters" name="nextOccurrence - RecurrenceFactory Integration Error Handling should throw for missing required parameters" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Error Handling should validate timezone" name="nextOccurrence - RecurrenceFactory Integration Error Handling should validate timezone" time="0.001">
    </testcase>
    <testcase classname="nextOccurrence - RecurrenceFactory Integration Caching should cache results with same parameters" name="nextOccurrence - RecurrenceFactory Integration Caching should cache results with same parameters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="convertTimezone formatting helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.189" tests="11">
    <testcase classname="convertTimezone formatting helpers formatOriginalTime should preserve explicit offset format" name="convertTimezone formatting helpers formatOriginalTime should preserve explicit offset format" time="0.001">
    </testcase>
    <testcase classname="convertTimezone formatting helpers formatOriginalTime should add milliseconds if missing with explicit offset" name="convertTimezone formatting helpers formatOriginalTime should add milliseconds if missing with explicit offset" time="0.001">
    </testcase>
    <testcase classname="convertTimezone formatting helpers formatOriginalTime should format time without explicit offset" name="convertTimezone formatting helpers formatOriginalTime should format time without explicit offset" time="0.002">
    </testcase>
    <testcase classname="convertTimezone formatting helpers formatOriginalTime should format UTC time" name="convertTimezone formatting helpers formatOriginalTime should format UTC time" time="0.003">
    </testcase>
    <testcase classname="convertTimezone formatting helpers formatOriginalTime Debug logging should log formatting attempts" name="convertTimezone formatting helpers formatOriginalTime Debug logging should log formatting attempts" time="0">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString should extract explicit offset from time string" name="convertTimezone formatting helpers extractOffsetString should extract explicit offset from time string" time="0">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString should return Z for Z suffix" name="convertTimezone formatting helpers extractOffsetString should return Z for Z suffix" time="0.001">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString should return Z for UTC timezone" name="convertTimezone formatting helpers extractOffsetString should return Z for UTC timezone" time="0">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString should format offset for timezone" name="convertTimezone formatting helpers extractOffsetString should format offset for timezone" time="0.001">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString should handle negative offsets" name="convertTimezone formatting helpers extractOffsetString should handle negative offsets" time="0">
    </testcase>
    <testcase classname="convertTimezone formatting helpers extractOffsetString Debug logging should log extraction attempts" name="convertTimezone formatting helpers extractOffsetString Debug logging should log extraction attempts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Tool Descriptions Integration" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.244" tests="1">
    <testcase classname="Tool Descriptions Integration should return tool descriptions with system timezone as default" name="Tool Descriptions Integration should return tool descriptions with system timezone as default" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="TimezoneDateBuilder" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.187" tests="13">
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should set time in UTC when timezone is UTC" name="TimezoneDateBuilder setTimeInTimezone should set time in UTC when timezone is UTC" time="0.005">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should set time in UTC when timezone is empty string" name="TimezoneDateBuilder setTimeInTimezone should set time in UTC when timezone is empty string" time="0">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should set time in specified timezone" name="TimezoneDateBuilder setTimeInTimezone should set time in specified timezone" time="0.002">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should handle different timezone conversions" name="TimezoneDateBuilder setTimeInTimezone should handle different timezone conversions" time="0.002">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should preserve the date when setting time" name="TimezoneDateBuilder setTimeInTimezone should preserve the date when setting time" time="0.001">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should handle midnight correctly" name="TimezoneDateBuilder setTimeInTimezone should handle midnight correctly" time="0">
    </testcase>
    <testcase classname="TimezoneDateBuilder setTimeInTimezone should handle end of day correctly" name="TimezoneDateBuilder setTimeInTimezone should handle end of day correctly" time="0">
    </testcase>
    <testcase classname="TimezoneDateBuilder addDaysInTimezone should add days preserving time in UTC" name="TimezoneDateBuilder addDaysInTimezone should add days preserving time in UTC" time="0.001">
    </testcase>
    <testcase classname="TimezoneDateBuilder addDaysInTimezone should add days preserving time in timezone" name="TimezoneDateBuilder addDaysInTimezone should add days preserving time in timezone" time="0.001">
    </testcase>
    <testcase classname="TimezoneDateBuilder addDaysInTimezone should handle DST transitions when adding days" name="TimezoneDateBuilder addDaysInTimezone should handle DST transitions when adding days" time="0.001">
    </testcase>
    <testcase classname="TimezoneDateBuilder isTimeInFuture should return true when time is in future" name="TimezoneDateBuilder isTimeInFuture should return true when time is in future" time="0.001">
    </testcase>
    <testcase classname="TimezoneDateBuilder isTimeInFuture should return false when time is in past" name="TimezoneDateBuilder isTimeInFuture should return false when time is in past" time="0">
    </testcase>
    <testcase classname="TimezoneDateBuilder isTimeInFuture should return false when times are equal" name="TimezoneDateBuilder isTimeInFuture should return false when times are equal" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Easter Calculation" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.184" tests="12">
    <testcase classname="Easter Calculation calculateEaster should calculate Easter date for known years" name="Easter Calculation calculateEaster should calculate Easter date for known years" time="0.004">
    </testcase>
    <testcase classname="Easter Calculation calculateEaster should handle century boundaries" name="Easter Calculation calculateEaster should handle century boundaries" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation calculateEaster should calculate early and late Easter dates" name="Easter Calculation calculateEaster should calculate early and late Easter dates" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should calculate Good Friday (2 days before Easter)" name="Easter Calculation getEasterBasedHoliday should calculate Good Friday (2 days before Easter)" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should calculate Easter Monday (1 day after Easter)" name="Easter Calculation getEasterBasedHoliday should calculate Easter Monday (1 day after Easter)" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should calculate Easter Sunday (offset 0)" name="Easter Calculation getEasterBasedHoliday should calculate Easter Sunday (offset 0)" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should calculate Easter Saturday (1 day before Easter)" name="Easter Calculation getEasterBasedHoliday should calculate Easter Saturday (1 day before Easter)" time="0">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should handle holidays with no offset (default to 0)" name="Easter Calculation getEasterBasedHoliday should handle holidays with no offset (default to 0)" time="0.001">
    </testcase>
    <testcase classname="Easter Calculation getEasterBasedHoliday should handle large offsets for other Easter-based holidays" name="Easter Calculation getEasterBasedHoliday should handle large offsets for other Easter-based holidays" time="0">
    </testcase>
    <testcase classname="Easter-based holidays in getHolidaysForYear should include Easter-based holidays for UK" name="Easter-based holidays in getHolidaysForYear should include Easter-based holidays for UK" time="0.001">
    </testcase>
    <testcase classname="Easter-based holidays in getHolidaysForYear should include Easter-based holidays for AU" name="Easter-based holidays in getHolidaysForYear should include Easter-based holidays for AU" time="0.001">
    </testcase>
    <testcase classname="Easter-based holidays in getHolidaysForYear should include Good Friday for CA" name="Easter-based holidays in getHolidaysForYear should include Good Friday for CA" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Venezuela (VE) Holidays" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.201" tests="39">
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should return correct number of holidays" name="Venezuela (VE) Holidays 2025 Holidays should return correct number of holidays" time="0.004">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include New Year&apos;s Day on 2025-01-01" name="Venezuela (VE) Holidays 2025 Holidays should include New Year&apos;s Day on 2025-01-01" time="0.002">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Carnival Monday on 2025-03-03" name="Venezuela (VE) Holidays 2025 Holidays should include Carnival Monday on 2025-03-03" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Carnival Tuesday on 2025-03-04" name="Venezuela (VE) Holidays 2025 Holidays should include Carnival Tuesday on 2025-03-04" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Maundy Thursday on 2025-04-17" name="Venezuela (VE) Holidays 2025 Holidays should include Maundy Thursday on 2025-04-17" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Good Friday on 2025-04-18" name="Venezuela (VE) Holidays 2025 Holidays should include Good Friday on 2025-04-18" time="0">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Declaration of Independence on 2025-04-19" name="Venezuela (VE) Holidays 2025 Holidays should include Declaration of Independence on 2025-04-19" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Labor Day on 2025-05-01" name="Venezuela (VE) Holidays 2025 Holidays should include Labor Day on 2025-05-01" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Battle of Carabobo on 2025-06-24" name="Venezuela (VE) Holidays 2025 Holidays should include Battle of Carabobo on 2025-06-24" time="0.002">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Independence Day on 2025-07-05" name="Venezuela (VE) Holidays 2025 Holidays should include Independence Day on 2025-07-05" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Simón Bolívar&apos;s Birthday on 2025-07-24" name="Venezuela (VE) Holidays 2025 Holidays should include Simón Bolívar&apos;s Birthday on 2025-07-24" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Indigenous Resistance Day on 2025-10-12" name="Venezuela (VE) Holidays 2025 Holidays should include Indigenous Resistance Day on 2025-10-12" time="0">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should include Christmas Day on 2025-12-25" name="Venezuela (VE) Holidays 2025 Holidays should include Christmas Day on 2025-12-25" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2025 Holidays should calculate Carnival dates based on Easter" name="Venezuela (VE) Holidays 2025 Holidays should calculate Carnival dates based on Easter" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays 2026 Holidays should calculate different Carnival dates for 2026" name="Venezuela (VE) Holidays 2026 Holidays should calculate different Carnival dates for 2026" time="0.001">
    </testcase>
    <testcase classname="Venezuela (VE) Holidays isHoliday function should recognize VE holidays" name="Venezuela (VE) Holidays isHoliday function should recognize VE holidays" time="0.002">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should return correct number of holidays" name="Chile (CL) Holidays 2025 Holidays should return correct number of holidays" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include New Year&apos;s Day on 2025-01-01" name="Chile (CL) Holidays 2025 Holidays should include New Year&apos;s Day on 2025-01-01" time="0.003">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Good Friday on 2025-04-18" name="Chile (CL) Holidays 2025 Holidays should include Good Friday on 2025-04-18" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Holy Saturday on 2025-04-19" name="Chile (CL) Holidays 2025 Holidays should include Holy Saturday on 2025-04-19" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Labor Day on 2025-05-01" name="Chile (CL) Holidays 2025 Holidays should include Labor Day on 2025-05-01" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Navy Day on 2025-05-21" name="Chile (CL) Holidays 2025 Holidays should include Navy Day on 2025-05-21" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Indigenous Peoples Day on 2025-06-20" name="Chile (CL) Holidays 2025 Holidays should include Indigenous Peoples Day on 2025-06-20" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Saints Peter and Paul on 2025-06-30 (moved from 2025-06-29)" name="Chile (CL) Holidays 2025 Holidays should include Saints Peter and Paul on 2025-06-30 (moved from 2025-06-29)" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Our Lady of Mount Carmel on 2025-07-16" name="Chile (CL) Holidays 2025 Holidays should include Our Lady of Mount Carmel on 2025-07-16" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Assumption of Mary on 2025-08-15" name="Chile (CL) Holidays 2025 Holidays should include Assumption of Mary on 2025-08-15" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Independence Day on 2025-09-18" name="Chile (CL) Holidays 2025 Holidays should include Independence Day on 2025-09-18" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Army Day on 2025-09-19" name="Chile (CL) Holidays 2025 Holidays should include Army Day on 2025-09-19" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Meeting of Two Worlds on 2025-10-13 (moved from 2025-10-12)" name="Chile (CL) Holidays 2025 Holidays should include Meeting of Two Worlds on 2025-10-13 (moved from 2025-10-12)" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Reformation Day on 2025-10-31" name="Chile (CL) Holidays 2025 Holidays should include Reformation Day on 2025-10-31" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include All Saints&apos; Day on 2025-11-01" name="Chile (CL) Holidays 2025 Holidays should include All Saints&apos; Day on 2025-11-01" time="0">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Immaculate Conception on 2025-12-08" name="Chile (CL) Holidays 2025 Holidays should include Immaculate Conception on 2025-12-08" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays 2025 Holidays should include Christmas Day on 2025-12-25" name="Chile (CL) Holidays 2025 Holidays should include Christmas Day on 2025-12-25" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays Monday-moving rule should move Sunday holidays to Monday" name="Chile (CL) Holidays Monday-moving rule should move Sunday holidays to Monday" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays Monday-moving rule should move Tuesday/Wednesday/Thursday holidays to previous Monday" name="Chile (CL) Holidays Monday-moving rule should move Tuesday/Wednesday/Thursday holidays to previous Monday" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays Monday-moving rule should move Saturday holidays to Monday" name="Chile (CL) Holidays Monday-moving rule should move Saturday holidays to Monday" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays Monday-moving rule should not move Friday holidays (already creates long weekend)" name="Chile (CL) Holidays Monday-moving rule should not move Friday holidays (already creates long weekend)" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays Monday-moving rule should not move Monday holidays" name="Chile (CL) Holidays Monday-moving rule should not move Monday holidays" time="0.001">
    </testcase>
    <testcase classname="Chile (CL) Holidays isHoliday function should recognize CL holidays including moved ones" name="Chile (CL) Holidays isHoliday function should recognize CL holidays including moved ones" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="convertTimezone" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.235" tests="20">
    <testcase classname="convertTimezone Basic functionality should convert time from one timezone to another" name="convertTimezone Basic functionality should convert time from one timezone to another" time="0.005">
    </testcase>
    <testcase classname="convertTimezone Basic functionality should handle UTC conversions" name="convertTimezone Basic functionality should handle UTC conversions" time="0.004">
    </testcase>
    <testcase classname="convertTimezone Basic functionality should use custom format when provided" name="convertTimezone Basic functionality should use custom format when provided" time="0.004">
    </testcase>
    <testcase classname="convertTimezone Basic functionality should handle winter/summer time correctly" name="convertTimezone Basic functionality should handle winter/summer time correctly" time="0.004">
    </testcase>
    <testcase classname="convertTimezone Input format handling should handle ISO8601 with Z" name="convertTimezone Input format handling should handle ISO8601 with Z" time="0.003">
    </testcase>
    <testcase classname="convertTimezone Input format handling should handle ISO8601 with offset" name="convertTimezone Input format handling should handle ISO8601 with offset" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Input format handling should handle date-only format" name="convertTimezone Input format handling should handle date-only format" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Input format handling should handle Unix timestamps" name="convertTimezone Input format handling should handle Unix timestamps" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Edge cases should handle same timezone conversion" name="convertTimezone Edge cases should handle same timezone conversion" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Edge cases should handle timezone abbreviations" name="convertTimezone Edge cases should handle timezone abbreviations" time="0.003">
    </testcase>
    <testcase classname="convertTimezone Edge cases should handle half-hour and 45-minute offset timezones" name="convertTimezone Edge cases should handle half-hour and 45-minute offset timezones" time="0.003">
    </testcase>
    <testcase classname="convertTimezone Error handling should throw error for invalid from_timezone" name="convertTimezone Error handling should throw error for invalid from_timezone" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Error handling should throw error for invalid to_timezone" name="convertTimezone Error handling should throw error for invalid to_timezone" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Error handling should throw error for invalid time format" name="convertTimezone Error handling should throw error for invalid time format" time="0.001">
    </testcase>
    <testcase classname="convertTimezone Error handling should throw error for invalid custom format" name="convertTimezone Error handling should throw error for invalid custom format" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Caching should cache results for 5 minutes" name="convertTimezone Caching should cache results for 5 minutes" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Caching should return cached result if available" name="convertTimezone Caching should return cached result if available" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Caching should use different cache keys for different parameters" name="convertTimezone Caching should use different cache keys for different parameters" time="0.002">
    </testcase>
    <testcase classname="convertTimezone Output format verification should always include all required fields" name="convertTimezone Output format verification should always include all required fields" time="0.004">
    </testcase>
    <testcase classname="convertTimezone Output format verification should calculate offset difference correctly" name="convertTimezone Output format verification should calculate offset difference correctly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Holidays Refactoring Tests" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.164" tests="13">
    <testcase classname="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle Victoria Day special case" name="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle Victoria Day special case" time="0.002">
    </testcase>
    <testcase classname="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle last occurrence correctly" name="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle last occurrence correctly" time="0.002">
    </testcase>
    <testcase classname="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle nth occurrence that exceeds month" name="Holidays Refactoring Tests calculateFloatingHoliday edge cases should handle nth occurrence that exceeds month" time="0">
    </testcase>
    <testcase classname="Holidays Refactoring Tests calculateFloatingHoliday edge cases should return null for invalid holiday type" name="Holidays Refactoring Tests calculateFloatingHoliday edge cases should return null for invalid holiday type" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior us_federal rule should move Saturday to Friday and Sunday to Monday" name="Holidays Refactoring Tests getObservedDate behavior us_federal rule should move Saturday to Friday and Sunday to Monday" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior us_federal rule should not move weekdays" name="Holidays Refactoring Tests getObservedDate behavior us_federal rule should not move weekdays" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior uk_bank rule should move both Saturday and Sunday to Monday" name="Holidays Refactoring Tests getObservedDate behavior uk_bank rule should move both Saturday and Sunday to Monday" time="0">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior au_public rule should move Sunday to Monday but keep Saturday" name="Holidays Refactoring Tests getObservedDate behavior au_public rule should move Sunday to Monday but keep Saturday" time="0">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should move Tue/Wed/Thu to previous Monday" name="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should move Tue/Wed/Thu to previous Monday" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should move Sat/Sun to next Monday" name="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should move Sat/Sun to next Monday" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should not move Monday or Friday" name="Holidays Refactoring Tests getObservedDate behavior cl_monday rule should not move Monday or Friday" time="0.001">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior never and always rules should return original date" name="Holidays Refactoring Tests getObservedDate behavior never and always rules should return original date" time="0.002">
    </testcase>
    <testcase classname="Holidays Refactoring Tests getObservedDate behavior unknown rule should return original date for unknown rule" name="Holidays Refactoring Tests getObservedDate behavior unknown rule should return original date for unknown rule" time="0">
    </testcase>
  </testsuite>
  <testsuite name="WeeklyRecurrence" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.207" tests="11">
    <testcase classname="WeeklyRecurrence calculate should return next week same day when no day specified" name="WeeklyRecurrence calculate should return next week same day when no day specified" time="0.006">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should return next occurrence of specified weekday" name="WeeklyRecurrence calculate should return next occurrence of specified weekday" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle Sunday (0) correctly" name="WeeklyRecurrence calculate should handle Sunday (0) correctly" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle Saturday (6) correctly" name="WeeklyRecurrence calculate should handle Saturday (6) correctly" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should return today if same weekday and time has not passed" name="WeeklyRecurrence calculate should return today if same weekday and time has not passed" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should return next week if same weekday but time has passed" name="WeeklyRecurrence calculate should return next week if same weekday but time has passed" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle timezone correctly" name="WeeklyRecurrence calculate should handle timezone correctly" time="0.002">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle timezone when calculating day of week" name="WeeklyRecurrence calculate should handle timezone when calculating day of week" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle wrapping around to next week" name="WeeklyRecurrence calculate should handle wrapping around to next week" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should preserve seconds and milliseconds as 0 with time" name="WeeklyRecurrence calculate should preserve seconds and milliseconds as 0 with time" time="0.001">
    </testcase>
    <testcase classname="WeeklyRecurrence calculate should handle same day without specific time" name="WeeklyRecurrence calculate should handle same day without specific time" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getCurrentTime" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.209" tests="16">
    <testcase classname="getCurrentTime Basic functionality should return current time in UTC by default" name="getCurrentTime Basic functionality should return current time in UTC by default" time="0.01">
    </testcase>
    <testcase classname="getCurrentTime Basic functionality should handle specific timezone" name="getCurrentTime Basic functionality should handle specific timezone" time="0.003">
    </testcase>
    <testcase classname="getCurrentTime Basic functionality should handle custom format" name="getCurrentTime Basic functionality should handle custom format" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Basic functionality should handle include_offset=false" name="getCurrentTime Basic functionality should handle include_offset=false" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Edge cases should treat empty string timezone as UTC" name="getCurrentTime Edge cases should treat empty string timezone as UTC" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Edge cases should handle timezone abbreviations" name="getCurrentTime Edge cases should handle timezone abbreviations" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Error handling should throw error for invalid timezone" name="getCurrentTime Error handling should throw error for invalid timezone" time="0.003">
    </testcase>
    <testcase classname="getCurrentTime Error handling should throw error for invalid format pattern" name="getCurrentTime Error handling should throw error for invalid format pattern" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Caching should cache results for 1 second" name="getCurrentTime Caching should cache results for 1 second" time="0.003">
    </testcase>
    <testcase classname="getCurrentTime Caching should return cached result if available" name="getCurrentTime Caching should return cached result if available" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime Caching should use different cache keys for different parameters" name="getCurrentTime Caching should use different cache keys for different parameters" time="0.001">
    </testcase>
    <testcase classname="getCurrentTime System timezone defaults should use system timezone when no timezone parameter provided" name="getCurrentTime System timezone defaults should use system timezone when no timezone parameter provided" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" name="getCurrentTime System timezone defaults should still use UTC when empty string timezone provided (backward compatibility)" time="0.002">
    </testcase>
    <testcase classname="getCurrentTime System timezone defaults should use explicit timezone parameter over system default" name="getCurrentTime System timezone defaults should use explicit timezone parameter over system default" time="0.001">
    </testcase>
    <testcase classname="getCurrentTime Output format verification should always include all required fields" name="getCurrentTime Output format verification should always include all required fields" time="0.003">
    </testcase>
    <testcase classname="getCurrentTime Output format verification should format offset correctly for various timezones" name="getCurrentTime Output format verification should format offset correctly for various timezones" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="RecurrenceValidator" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.175" tests="23">
    <testcase classname="RecurrenceValidator pattern validation should accept valid patterns" name="RecurrenceValidator pattern validation should accept valid patterns" time="0.004">
    </testcase>
    <testcase classname="RecurrenceValidator pattern validation should reject invalid patterns" name="RecurrenceValidator pattern validation should reject invalid patterns" time="0.002">
    </testcase>
    <testcase classname="RecurrenceValidator pattern validation should reject missing pattern" name="RecurrenceValidator pattern validation should reject missing pattern" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator timezone validation should accept undefined timezone (system default)" name="RecurrenceValidator timezone validation should accept undefined timezone (system default)" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator timezone validation should accept empty string timezone (UTC)" name="RecurrenceValidator timezone validation should accept empty string timezone (UTC)" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator timezone validation should accept valid timezones" name="RecurrenceValidator timezone validation should accept valid timezones" time="0.003">
    </testcase>
    <testcase classname="RecurrenceValidator timezone validation should reject invalid timezones" name="RecurrenceValidator timezone validation should reject invalid timezones" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator time validation should accept valid time formats" name="RecurrenceValidator time validation should accept valid time formats" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator time validation should accept undefined time" name="RecurrenceValidator time validation should accept undefined time" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator time validation should reject invalid time formats" name="RecurrenceValidator time validation should reject invalid time formats" time="0.002">
    </testcase>
    <testcase classname="RecurrenceValidator weekly pattern validation should accept valid day of week" name="RecurrenceValidator weekly pattern validation should accept valid day of week" time="0.002">
    </testcase>
    <testcase classname="RecurrenceValidator weekly pattern validation should accept undefined day of week" name="RecurrenceValidator weekly pattern validation should accept undefined day of week" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator weekly pattern validation should reject invalid day of week" name="RecurrenceValidator weekly pattern validation should reject invalid day of week" time="0.002">
    </testcase>
    <testcase classname="RecurrenceValidator monthly pattern validation should accept valid day of month" name="RecurrenceValidator monthly pattern validation should accept valid day of month" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator monthly pattern validation should reject missing day of month" name="RecurrenceValidator monthly pattern validation should reject missing day of month" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator monthly pattern validation should reject invalid day of month" name="RecurrenceValidator monthly pattern validation should reject invalid day of month" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator yearly pattern validation should accept undefined month and dayOfMonth" name="RecurrenceValidator yearly pattern validation should accept undefined month and dayOfMonth" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator yearly pattern validation should accept valid month" name="RecurrenceValidator yearly pattern validation should accept valid month" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator yearly pattern validation should reject invalid month" name="RecurrenceValidator yearly pattern validation should reject invalid month" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator yearly pattern validation should reject month without dayOfMonth" name="RecurrenceValidator yearly pattern validation should reject month without dayOfMonth" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator yearly pattern validation should reject dayOfMonth without month" name="RecurrenceValidator yearly pattern validation should reject dayOfMonth without month" time="0">
    </testcase>
    <testcase classname="RecurrenceValidator string length validation should reject excessively long timezone strings" name="RecurrenceValidator string length validation should reject excessively long timezone strings" time="0.001">
    </testcase>
    <testcase classname="RecurrenceValidator string length validation should accept timezone at max length" name="RecurrenceValidator string length validation should accept timezone at max length" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="addTime parsing helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.216" tests="15">
    <testcase classname="addTime parsing helpers parseUnixTimestamp should parse valid Unix timestamp" name="addTime parsing helpers parseUnixTimestamp should parse valid Unix timestamp" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers parseUnixTimestamp should return null for non-numeric strings" name="addTime parsing helpers parseUnixTimestamp should return null for non-numeric strings" time="0">
    </testcase>
    <testcase classname="addTime parsing helpers parseUnixTimestamp should return null for invalid timestamps" name="addTime parsing helpers parseUnixTimestamp should return null for invalid timestamps" time="0">
    </testcase>
    <testcase classname="addTime parsing helpers parseUnixTimestamp should handle timestamps with leading/trailing spaces" name="addTime parsing helpers parseUnixTimestamp should handle timestamps with leading/trailing spaces" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string with Z suffix" name="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string with Z suffix" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string with explicit offset" name="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string with explicit offset" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string without timezone info" name="addTime parsing helpers parseISOWithTimezoneInfo should parse ISO string without timezone info" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers parseISOWithTimezoneInfo should throw for invalid date strings" name="addTime parsing helpers parseISOWithTimezoneInfo should throw for invalid date strings" time="0.016">
    </testcase>
    <testcase classname="addTime parsing helpers formatUnixTimestampResult should format as UTC when no timezone specified" name="addTime parsing helpers formatUnixTimestampResult should format as UTC when no timezone specified" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers formatUnixTimestampResult should format in specified timezone" name="addTime parsing helpers formatUnixTimestampResult should format in specified timezone" time="0.002">
    </testcase>
    <testcase classname="addTime parsing helpers formatUnixTimestampResult should include Unix timestamps in result" name="addTime parsing helpers formatUnixTimestampResult should include Unix timestamps in result" time="0">
    </testcase>
    <testcase classname="addTime parsing helpers formatWithExplicitOffset should preserve explicit offset in formatting" name="addTime parsing helpers formatWithExplicitOffset should preserve explicit offset in formatting" time="0">
    </testcase>
    <testcase classname="addTime parsing helpers formatWithExplicitOffset should add milliseconds if missing" name="addTime parsing helpers formatWithExplicitOffset should add milliseconds if missing" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers formatWithExplicitOffset should handle negative offsets" name="addTime parsing helpers formatWithExplicitOffset should handle negative offsets" time="0.001">
    </testcase>
    <testcase classname="addTime parsing helpers formatWithExplicitOffset should include Unix timestamps" name="addTime parsing helpers formatWithExplicitOffset should include Unix timestamps" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Validation Utilities" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.205" tests="18">
    <testcase classname="Validation Utilities validateTimezone should return true for valid IANA timezones" name="Validation Utilities validateTimezone should return true for valid IANA timezones" time="0.007">
    </testcase>
    <testcase classname="Validation Utilities validateTimezone should return false for invalid timezones" name="Validation Utilities validateTimezone should return false for invalid timezones" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateTimezone should return false for empty/null/undefined" name="Validation Utilities validateTimezone should return false for empty/null/undefined" time="0">
    </testcase>
    <testcase classname="Validation Utilities validateTimezone should default empty string to UTC (special case)" name="Validation Utilities validateTimezone should default empty string to UTC (special case)" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateDateFormat should validate ISO 8601 formats" name="Validation Utilities validateDateFormat should validate ISO 8601 formats" time="0.002">
    </testcase>
    <testcase classname="Validation Utilities validateDateFormat should validate Unix timestamps" name="Validation Utilities validateDateFormat should validate Unix timestamps" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateDateFormat should reject invalid formats" name="Validation Utilities validateDateFormat should reject invalid formats" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateDateFormat should handle null/undefined" name="Validation Utilities validateDateFormat should handle null/undefined" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateTimeUnit should validate all valid time units" name="Validation Utilities validateTimeUnit should validate all valid time units" time="0.009">
    </testcase>
    <testcase classname="Validation Utilities validateTimeUnit should reject invalid units" name="Validation Utilities validateTimeUnit should reject invalid units" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateRecurrencePattern should validate all valid patterns" name="Validation Utilities validateRecurrencePattern should validate all valid patterns" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateRecurrencePattern should reject invalid patterns" name="Validation Utilities validateRecurrencePattern should reject invalid patterns" time="0">
    </testcase>
    <testcase classname="Validation Utilities validateDayOfWeek should validate days 0-6" name="Validation Utilities validateDayOfWeek should validate days 0-6" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities validateDayOfWeek should reject invalid days" name="Validation Utilities validateDayOfWeek should reject invalid days" time="0">
    </testcase>
    <testcase classname="Validation Utilities validateDayOfMonth should validate days 1-31" name="Validation Utilities validateDayOfMonth should validate days 1-31" time="0">
    </testcase>
    <testcase classname="Validation Utilities validateDayOfMonth should reject invalid days" name="Validation Utilities validateDayOfMonth should reject invalid days" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities createError should create error with all fields" name="Validation Utilities createError should create error with all fields" time="0.001">
    </testcase>
    <testcase classname="Validation Utilities createError should create error without details" name="Validation Utilities createError should create error without details" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Timezone Boundary Edge Cases" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.182" tests="7">
    <testcase classname="Timezone Boundary Edge Cases when local date differs from UTC date daysUntil should use consistent timezone for date math" name="Timezone Boundary Edge Cases when local date differs from UTC date daysUntil should use consistent timezone for date math" time="0.005">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases when local date differs from UTC date should handle &quot;today&quot; correctly across timezone boundary" name="Timezone Boundary Edge Cases when local date differs from UTC date should handle &quot;today&quot; correctly across timezone boundary" time="0.003">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases when local date differs from UTC date business days calculation should handle timezone boundaries" name="Timezone Boundary Edge Cases when local date differs from UTC date business days calculation should handle timezone boundaries" time="0.003">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases DST transition edge cases should handle spring forward correctly" name="Timezone Boundary Edge Cases DST transition edge cases should handle spring forward correctly" time="0.002">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases DST transition edge cases should handle fall back correctly" name="Timezone Boundary Edge Cases DST transition edge cases should handle fall back correctly" time="0.001">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases Year and month boundaries should handle year transition correctly" name="Timezone Boundary Edge Cases Year and month boundaries should handle year transition correctly" time="0.001">
    </testcase>
    <testcase classname="Timezone Boundary Edge Cases Year and month boundaries should handle leap year correctly" name="Timezone Boundary Edge Cases Year and month boundaries should handle leap year correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="calculateDuration parseTimeParameter helper" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.174" tests="12">
    <testcase classname="calculateDuration parseTimeParameter helper Unix timestamp strings should parse valid Unix timestamp string" name="calculateDuration parseTimeParameter helper Unix timestamp strings should parse valid Unix timestamp string" time="0.003">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Unix timestamp strings should throw for invalid Unix timestamp string" name="calculateDuration parseTimeParameter helper Unix timestamp strings should throw for invalid Unix timestamp string" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Unix timestamp strings should throw for NaN timestamp" name="calculateDuration parseTimeParameter helper Unix timestamp strings should throw for NaN timestamp" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with Z suffix" name="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with Z suffix" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with offset" name="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with offset" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with positive offset" name="calculateDuration parseTimeParameter helper ISO strings with timezone info should parse ISO string with positive offset" time="0">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Local time strings (no timezone info) should use provided timezone for local time string" name="calculateDuration parseTimeParameter helper Local time strings (no timezone info) should use provided timezone for local time string" time="0.003">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Local time strings (no timezone info) should handle date-only strings with timezone" name="calculateDuration parseTimeParameter helper Local time strings (no timezone info) should handle date-only strings with timezone" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Error handling should throw for completely invalid date string" name="calculateDuration parseTimeParameter helper Error handling should throw for completely invalid date string" time="0">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Error handling should throw for empty string" name="calculateDuration parseTimeParameter helper Error handling should throw for empty string" time="0.001">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Error handling should validate parsed date" name="calculateDuration parseTimeParameter helper Error handling should validate parsed date" time="0">
    </testcase>
    <testcase classname="calculateDuration parseTimeParameter helper Debug logging should log parsing attempts" name="calculateDuration parseTimeParameter helper Debug logging should log parsing attempts" time="0">
    </testcase>
  </testsuite>
  <testsuite name="YearlyRecurrence" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.183" tests="17">
    <testcase classname="YearlyRecurrence basic yearly recurrence (same date next year) should calculate next year for regular date" name="YearlyRecurrence basic yearly recurrence (same date next year) should calculate next year for regular date" time="0.003">
    </testcase>
    <testcase classname="YearlyRecurrence basic yearly recurrence (same date next year) should handle leap year Feb 29" name="YearlyRecurrence basic yearly recurrence (same date next year) should handle leap year Feb 29" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence basic yearly recurrence (same date next year) should preserve exact time" name="YearlyRecurrence basic yearly recurrence (same date next year) should preserve exact time" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence basic yearly recurrence (same date next year) should handle year-end dates" name="YearlyRecurrence basic yearly recurrence (same date next year) should handle year-end dates" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence with specific month/day should find next occurrence of specific date in future" name="YearlyRecurrence with specific month/day should find next occurrence of specific date in future" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence with specific month/day should advance to next year if date has passed" name="YearlyRecurrence with specific month/day should advance to next year if date has passed" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence with specific month/day should handle Feb 29 in specific date mode" name="YearlyRecurrence with specific month/day should handle Feb 29 in specific date mode" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence with specific month/day should handle current day being target day" name="YearlyRecurrence with specific month/day should handle current day being target day" time="0.002">
    </testcase>
    <testcase classname="YearlyRecurrence with time specification should set specific time for same-date pattern" name="YearlyRecurrence with time specification should set specific time for same-date pattern" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence with time specification should set specific time for specific-date pattern" name="YearlyRecurrence with time specification should set specific time for specific-date pattern" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence with time specification should check time when on same day" name="YearlyRecurrence with time specification should check time when on same day" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence with timezone should calculate in specified timezone for same-date pattern" name="YearlyRecurrence with timezone should calculate in specified timezone for same-date pattern" time="0.002">
    </testcase>
    <testcase classname="YearlyRecurrence with timezone should handle DST transitions" name="YearlyRecurrence with timezone should handle DST transitions" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence with timezone should find specific date in timezone" name="YearlyRecurrence with timezone should find specific date in timezone" time="0.001">
    </testcase>
    <testcase classname="YearlyRecurrence edge cases should handle leap year to leap year" name="YearlyRecurrence edge cases should handle leap year to leap year" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence edge cases should handle month-end dates" name="YearlyRecurrence edge cases should handle month-end dates" time="0">
    </testcase>
    <testcase classname="YearlyRecurrence edge cases should handle -1 for last day of month" name="YearlyRecurrence edge cases should handle -1 for last day of month" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DailyRecurrence" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.177" tests="8">
    <testcase classname="DailyRecurrence calculate should return next day at same time when no specific time given" name="DailyRecurrence calculate should return next day at same time when no specific time given" time="0.004">
    </testcase>
    <testcase classname="DailyRecurrence calculate should return today at specified time if time has not passed" name="DailyRecurrence calculate should return today at specified time if time has not passed" time="0.001">
    </testcase>
    <testcase classname="DailyRecurrence calculate should return tomorrow at specified time if time has passed" name="DailyRecurrence calculate should return tomorrow at specified time if time has passed" time="0.001">
    </testcase>
    <testcase classname="DailyRecurrence calculate should handle timezone correctly when calculating next occurrence" name="DailyRecurrence calculate should handle timezone correctly when calculating next occurrence" time="0.003">
    </testcase>
    <testcase classname="DailyRecurrence calculate should handle timezone when time has passed" name="DailyRecurrence calculate should handle timezone when time has passed" time="0.001">
    </testcase>
    <testcase classname="DailyRecurrence calculate should work with empty string as UTC timezone" name="DailyRecurrence calculate should work with empty string as UTC timezone" time="0.001">
    </testcase>
    <testcase classname="DailyRecurrence calculate should handle exact same time as current (edge case)" name="DailyRecurrence calculate should handle exact same time as current (edge case)" time="0.001">
    </testcase>
    <testcase classname="DailyRecurrence calculate should preserve seconds and milliseconds as 0" name="DailyRecurrence calculate should preserve seconds and milliseconds as 0" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="daysUntil refactoring helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.286" tests="19">
    <testcase classname="daysUntil refactoring helpers resolveTimezone should return default timezone when undefined" name="daysUntil refactoring helpers resolveTimezone should return default timezone when undefined" time="0.006">
    </testcase>
    <testcase classname="daysUntil refactoring helpers resolveTimezone should return UTC when empty string" name="daysUntil refactoring helpers resolveTimezone should return UTC when empty string" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers resolveTimezone should return provided timezone when valid" name="daysUntil refactoring helpers resolveTimezone should return provided timezone when valid" time="0">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should parse Unix timestamp string" name="daysUntil refactoring helpers parseTargetDate should parse Unix timestamp string" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should parse numeric Unix timestamp" name="daysUntil refactoring helpers parseTargetDate should parse numeric Unix timestamp" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should parse ISO date string" name="daysUntil refactoring helpers parseTargetDate should parse ISO date string" time="0.002">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should parse date without timezone info" name="daysUntil refactoring helpers parseTargetDate should parse date without timezone info" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should throw for invalid Unix timestamp" name="daysUntil refactoring helpers parseTargetDate should throw for invalid Unix timestamp" time="0.029">
    </testcase>
    <testcase classname="daysUntil refactoring helpers parseTargetDate should throw for invalid date string" name="daysUntil refactoring helpers parseTargetDate should throw for invalid date string" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers convertToTimezone should return same date for UTC timezone" name="daysUntil refactoring helpers convertToTimezone should return same date for UTC timezone" time="0">
    </testcase>
    <testcase classname="daysUntil refactoring helpers convertToTimezone should convert to specified timezone" name="daysUntil refactoring helpers convertToTimezone should convert to specified timezone" time="0.009">
    </testcase>
    <testcase classname="daysUntil refactoring helpers formatDaysUntil should return &quot;Today&quot; for 0 days" name="daysUntil refactoring helpers formatDaysUntil should return &quot;Today&quot; for 0 days" time="0">
    </testcase>
    <testcase classname="daysUntil refactoring helpers formatDaysUntil should return &quot;Tomorrow&quot; for 1 day" name="daysUntil refactoring helpers formatDaysUntil should return &quot;Tomorrow&quot; for 1 day" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers formatDaysUntil should return &quot;Yesterday&quot; for -1 day" name="daysUntil refactoring helpers formatDaysUntil should return &quot;Yesterday&quot; for -1 day" time="0">
    </testcase>
    <testcase classname="daysUntil refactoring helpers formatDaysUntil should return &quot;in X days&quot; for positive days" name="daysUntil refactoring helpers formatDaysUntil should return &quot;in X days&quot; for positive days" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers formatDaysUntil should return &quot;X days ago&quot; for negative days" name="daysUntil refactoring helpers formatDaysUntil should return &quot;X days ago&quot; for negative days" time="0">
    </testcase>
    <testcase classname="daysUntil refactoring helpers getCacheTTL should return CURRENT_TIME TTL for today (0 days)" name="daysUntil refactoring helpers getCacheTTL should return CURRENT_TIME TTL for today (0 days)" time="0.008">
    </testcase>
    <testcase classname="daysUntil refactoring helpers getCacheTTL should return CALCULATIONS TTL for future dates" name="daysUntil refactoring helpers getCacheTTL should return CALCULATIONS TTL for future dates" time="0.001">
    </testcase>
    <testcase classname="daysUntil refactoring helpers getCacheTTL should return CALCULATIONS TTL for past dates" name="daysUntil refactoring helpers getCacheTTL should return CALCULATIONS TTL for past dates" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Canada (CA) Holidays" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.212" tests="22">
    <testcase classname="Canada (CA) Holidays 2025 holidays should have correct number of federal holidays" name="Canada (CA) Holidays 2025 holidays should have correct number of federal holidays" time="0.002">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have New Year&apos;s Day" name="Canada (CA) Holidays 2025 holidays should have New Year&apos;s Day" time="0">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Canada Day on July 1" name="Canada (CA) Holidays 2025 holidays should have Canada Day on July 1" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Victoria Day on Monday before May 25" name="Canada (CA) Holidays 2025 holidays should have Victoria Day on Monday before May 25" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Labour Day on first Monday in September" name="Canada (CA) Holidays 2025 holidays should have Labour Day on first Monday in September" time="0">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Thanksgiving on second Monday in October" name="Canada (CA) Holidays 2025 holidays should have Thanksgiving on second Monday in October" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Christmas Day" name="Canada (CA) Holidays 2025 holidays should have Christmas Day" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Boxing Day" name="Canada (CA) Holidays 2025 holidays should have Boxing Day" time="0">
    </testcase>
    <testcase classname="Canada (CA) Holidays 2025 holidays should have Remembrance Day" name="Canada (CA) Holidays 2025 holidays should have Remembrance Day" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays Victoria Day calculation should calculate Victoria Day correctly for multiple years" name="Canada (CA) Holidays Victoria Day calculation should calculate Victoria Day correctly for multiple years" time="0.004">
    </testcase>
    <testcase classname="Canada (CA) Holidays Weekend observations should observe Canada Day on Monday when it falls on Sunday" name="Canada (CA) Holidays Weekend observations should observe Canada Day on Monday when it falls on Sunday" time="0.001">
    </testcase>
    <testcase classname="Canada (CA) Holidays isHoliday function should identify Canadian holidays" name="Canada (CA) Holidays isHoliday function should identify Canadian holidays" time="0.005">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have correct number of national holidays" name="Australia (AU) Holidays 2025 holidays should have correct number of national holidays" time="0.001">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have New Year&apos;s Day" name="Australia (AU) Holidays 2025 holidays should have New Year&apos;s Day" time="0">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have Australia Day on January 26" name="Australia (AU) Holidays 2025 holidays should have Australia Day on January 26" time="0.001">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have Anzac Day on April 25" name="Australia (AU) Holidays 2025 holidays should have Anzac Day on April 25" time="0">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have Queen&apos;s Birthday on second Monday in June" name="Australia (AU) Holidays 2025 holidays should have Queen&apos;s Birthday on second Monday in June" time="0">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have Christmas Day" name="Australia (AU) Holidays 2025 holidays should have Christmas Day" time="0.005">
    </testcase>
    <testcase classname="Australia (AU) Holidays 2025 holidays should have Boxing Day" name="Australia (AU) Holidays 2025 holidays should have Boxing Day" time="0.001">
    </testcase>
    <testcase classname="Australia (AU) Holidays Weekend observations - Australian rules should observe Australia Day on Monday when it falls on Sunday" name="Australia (AU) Holidays Weekend observations - Australian rules should observe Australia Day on Monday when it falls on Sunday" time="0">
    </testcase>
    <testcase classname="Australia (AU) Holidays Weekend observations - Australian rules should NOT observe on Monday when holiday falls on Saturday" name="Australia (AU) Holidays Weekend observations - Australian rules should NOT observe on Monday when holiday falls on Saturday" time="0">
    </testcase>
    <testcase classname="Australia (AU) Holidays isHoliday function should identify Australian holidays" name="Australia (AU) Holidays isHoliday function should identify Australian holidays" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Debug utilities" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.118" tests="11">
    <testcase classname="Debug utilities debug namespaces should create namespaced debug functions" name="Debug utilities debug namespaces should create namespaced debug functions" time="0.007">
    </testcase>
    <testcase classname="Debug utilities debug namespaces should output to stderr when DEBUG env is set" name="Debug utilities debug namespaces should output to stderr when DEBUG env is set" time="0.004">
    </testcase>
    <testcase classname="Debug utilities debug namespaces should not output when DEBUG env is not set" name="Debug utilities debug namespaces should not output when DEBUG env is not set" time="0.003">
    </testcase>
    <testcase classname="Debug utilities debug namespaces should support multiple namespaces" name="Debug utilities debug namespaces should support multiple namespaces" time="0.004">
    </testcase>
    <testcase classname="Debug utilities debug namespaces should support wildcard namespace" name="Debug utilities debug namespaces should support wildcard namespace" time="0.003">
    </testcase>
    <testcase classname="Debug utilities logEnvironment should log environment variables when debug is enabled" name="Debug utilities logEnvironment should log environment variables when debug is enabled" time="0.004">
    </testcase>
    <testcase classname="Debug utilities logEnvironment should show defaults when environment variables are not set" name="Debug utilities logEnvironment should show defaults when environment variables are not set" time="0.004">
    </testcase>
    <testcase classname="Debug utilities logEnvironment should not log when debug is disabled" name="Debug utilities logEnvironment should not log when debug is disabled" time="0.004">
    </testcase>
    <testcase classname="Debug utilities debugJson should format objects for debug output" name="Debug utilities debugJson should format objects for debug output" time="0.008">
    </testcase>
    <testcase classname="Debug utilities debugJson should not output when namespace is disabled" name="Debug utilities debugJson should not output when namespace is disabled" time="0.004">
    </testcase>
    <testcase classname="Debug utilities rate limit debugging should be able to debug rate limit operations" name="Debug utilities rate limit debugging should be able to debug rate limit operations" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="calculateDuration calculation helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.188" tests="14">
    <testcase classname="calculateDuration calculation helpers calculateDurationValues should calculate all duration units correctly" name="calculateDuration calculation helpers calculateDurationValues should calculate all duration units correctly" time="0.003">
    </testcase>
    <testcase classname="calculateDuration calculation helpers calculateDurationValues should handle negative durations" name="calculateDuration calculation helpers calculateDurationValues should handle negative durations" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers calculateDurationValues should handle zero duration" name="calculateDuration calculation helpers calculateDurationValues should handle zero duration" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers calculateDurationValues should handle millisecond precision" name="calculateDuration calculation helpers calculateDurationValues should handle millisecond precision" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format with auto unit" name="calculateDuration calculation helpers formatDurationResult should format with auto unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format with seconds unit" name="calculateDuration calculation helpers formatDurationResult should format with seconds unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format with minutes unit" name="calculateDuration calculation helpers formatDurationResult should format with minutes unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format with hours unit" name="calculateDuration calculation helpers formatDurationResult should format with hours unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format with days unit" name="calculateDuration calculation helpers formatDurationResult should format with days unit" time="0">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format negative durations with auto" name="calculateDuration calculation helpers formatDurationResult should format negative durations with auto" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format zero duration" name="calculateDuration calculation helpers formatDurationResult should format zero duration" time="0">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should format milliseconds unit" name="calculateDuration calculation helpers formatDurationResult should format milliseconds unit" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers formatDurationResult should handle sub-second durations with auto" name="calculateDuration calculation helpers formatDurationResult should handle sub-second durations with auto" time="0.001">
    </testcase>
    <testcase classname="calculateDuration calculation helpers Debug logging should log calculation values" name="calculateDuration calculation helpers Debug logging should log calculation values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TimeServerConfig" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.133" tests="15">
    <testcase classname="TimeServerConfig System timezone detection should detect system timezone when no environment variables are set" name="TimeServerConfig System timezone detection should detect system timezone when no environment variables are set" time="0.004">
    </testcase>
    <testcase classname="TimeServerConfig System timezone detection should fall back to UTC if system timezone is invalid" name="TimeServerConfig System timezone detection should fall back to UTC if system timezone is invalid" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig System timezone detection should handle missing Intl.DateTimeFormat gracefully" name="TimeServerConfig System timezone detection should handle missing Intl.DateTimeFormat gracefully" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Environment variable precedence should use DEFAULT_TIMEZONE when set and valid" name="TimeServerConfig Environment variable precedence should use DEFAULT_TIMEZONE when set and valid" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Environment variable precedence should ignore DEFAULT_TIMEZONE if invalid" name="TimeServerConfig Environment variable precedence should ignore DEFAULT_TIMEZONE if invalid" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Environment variable precedence should ignore empty DEFAULT_TIMEZONE" name="TimeServerConfig Environment variable precedence should ignore empty DEFAULT_TIMEZONE" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Environment variable precedence should respect TZ environment variable through Intl.DateTimeFormat" name="TimeServerConfig Environment variable precedence should respect TZ environment variable through Intl.DateTimeFormat" time="0">
    </testcase>
    <testcase classname="TimeServerConfig Environment variable precedence should prioritize DEFAULT_TIMEZONE over TZ" name="TimeServerConfig Environment variable precedence should prioritize DEFAULT_TIMEZONE over TZ" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Caching behavior should cache the configuration" name="TimeServerConfig Caching behavior should cache the configuration" time="0.002">
    </testcase>
    <testcase classname="TimeServerConfig Caching behavior should allow cache reset" name="TimeServerConfig Caching behavior should allow cache reset" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Edge cases should handle Intl.DateTimeFormat throwing an error" name="TimeServerConfig Edge cases should handle Intl.DateTimeFormat throwing an error" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Edge cases should handle resolvedOptions() throwing an error" name="TimeServerConfig Edge cases should handle resolvedOptions() throwing an error" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Edge cases should handle unusual but valid timezone strings" name="TimeServerConfig Edge cases should handle unusual but valid timezone strings" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Configuration object should return a complete TimeServerConfig object" name="TimeServerConfig Configuration object should return a complete TimeServerConfig object" time="0.001">
    </testcase>
    <testcase classname="TimeServerConfig Configuration object should be immutable" name="TimeServerConfig Configuration object should be immutable" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="MonthlyRecurrence" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.216" tests="13">
    <testcase classname="MonthlyRecurrence basic monthly recurrence should calculate next month for mid-month dates" name="MonthlyRecurrence basic monthly recurrence should calculate next month for mid-month dates" time="0.002">
    </testcase>
    <testcase classname="MonthlyRecurrence basic monthly recurrence should handle month-end overflow (31st to Feb)" name="MonthlyRecurrence basic monthly recurrence should handle month-end overflow (31st to Feb)" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence basic monthly recurrence should handle month-end overflow (31st to April)" name="MonthlyRecurrence basic monthly recurrence should handle month-end overflow (31st to April)" time="0">
    </testcase>
    <testcase classname="MonthlyRecurrence basic monthly recurrence should handle non-leap year February" name="MonthlyRecurrence basic monthly recurrence should handle non-leap year February" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence with time specification should set specific time on target day" name="MonthlyRecurrence with time specification should set specific time on target day" time="0">
    </testcase>
    <testcase classname="MonthlyRecurrence with time specification should advance to next month if target datetime has passed" name="MonthlyRecurrence with time specification should advance to next month if target datetime has passed" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence with timezone should calculate in specified timezone" name="MonthlyRecurrence with timezone should calculate in specified timezone" time="0.002">
    </testcase>
    <testcase classname="MonthlyRecurrence with timezone should handle DST transitions correctly" name="MonthlyRecurrence with timezone should handle DST transitions correctly" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence with timezone should handle month-end in timezone context" name="MonthlyRecurrence with timezone should handle month-end in timezone context" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence edge cases should handle current day being target day" name="MonthlyRecurrence edge cases should handle current day being target day" time="0">
    </testcase>
    <testcase classname="MonthlyRecurrence edge cases should handle last day of month request" name="MonthlyRecurrence edge cases should handle last day of month request" time="0.002">
    </testcase>
    <testcase classname="MonthlyRecurrence edge cases should handle year boundary" name="MonthlyRecurrence edge cases should handle year boundary" time="0.001">
    </testcase>
    <testcase classname="MonthlyRecurrence edge cases should advance to next year if needed" name="MonthlyRecurrence edge cases should advance to next year if needed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="addTime result formatting helper" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.191" tests="7">
    <testcase classname="addTime result formatting helper formatAddTimeResult should format Unix timestamp without timezone parameter" name="addTime result formatting helper formatAddTimeResult should format Unix timestamp without timezone parameter" time="0.003">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult should format Unix timestamp with timezone parameter" name="addTime result formatting helper formatAddTimeResult should format Unix timestamp with timezone parameter" time="0.003">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult should format ISO string with Z suffix" name="addTime result formatting helper formatAddTimeResult should format ISO string with Z suffix" time="0">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult should format string with explicit offset" name="addTime result formatting helper formatAddTimeResult should format string with explicit offset" time="0.001">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult should format local time string" name="addTime result formatting helper formatAddTimeResult should format local time string" time="0.003">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult should include Unix timestamps in result" name="addTime result formatting helper formatAddTimeResult should include Unix timestamps in result" time="0.001">
    </testcase>
    <testcase classname="addTime result formatting helper formatAddTimeResult Debug logging should log formatting attempts" name="addTime result formatting helper formatAddTimeResult Debug logging should log formatting attempts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SlidingWindowRateLimiter" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.178" tests="16">
    <testcase classname="SlidingWindowRateLimiter constructor should create rate limiter with default values" name="SlidingWindowRateLimiter constructor should create rate limiter with default values" time="0.003">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter constructor should create rate limiter with custom values" name="SlidingWindowRateLimiter constructor should create rate limiter with custom values" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter constructor should read from environment variables" name="SlidingWindowRateLimiter constructor should read from environment variables" time="0.041">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter checkLimit should allow requests under the limit" name="SlidingWindowRateLimiter checkLimit should allow requests under the limit" time="0.002">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter checkLimit should deny requests over the limit" name="SlidingWindowRateLimiter checkLimit should deny requests over the limit" time="0.002">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter checkLimit should allow requests after window expires" name="SlidingWindowRateLimiter checkLimit should allow requests after window expires" time="0.002">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter checkLimit should use sliding window algorithm" name="SlidingWindowRateLimiter checkLimit should use sliding window algorithm" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getCurrentUsage should return current usage count" name="SlidingWindowRateLimiter getCurrentUsage should return current usage count" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getCurrentUsage should exclude expired requests from count" name="SlidingWindowRateLimiter getCurrentUsage should exclude expired requests from count" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getRetryAfter should return 0 when under limit" name="SlidingWindowRateLimiter getRetryAfter should return 0 when under limit" time="0">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getRetryAfter should return time until oldest request expires" name="SlidingWindowRateLimiter getRetryAfter should return time until oldest request expires" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getRetryAfter should handle edge case of no requests" name="SlidingWindowRateLimiter getRetryAfter should handle edge case of no requests" time="0">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter reset should clear all request history" name="SlidingWindowRateLimiter reset should clear all request history" time="0.002">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter memory management should clean up old timestamps automatically" name="SlidingWindowRateLimiter memory management should clean up old timestamps automatically" time="0.009">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getInfo should return rate limiter information" name="SlidingWindowRateLimiter getInfo should return rate limiter information" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter getInfo should show retry after when at limit" name="SlidingWindowRateLimiter getInfo should show retry after when at limit" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getBusinessDays with holiday calendar support" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.21" tests="13">
    <testcase classname="getBusinessDays with holiday calendar support holiday_calendar parameter should subtract US holidays from business days" name="getBusinessDays with holiday calendar support holiday_calendar parameter should subtract US holidays from business days" time="0.009">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support holiday_calendar parameter should handle observed holidays correctly" name="getBusinessDays with holiday calendar support holiday_calendar parameter should handle observed holidays correctly" time="0.003">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support holiday_calendar parameter should work with UK holidays" name="getBusinessDays with holiday calendar support holiday_calendar parameter should work with UK holidays" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support holiday_calendar parameter should handle unknown country gracefully" name="getBusinessDays with holiday calendar support holiday_calendar parameter should handle unknown country gracefully" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support include_observed parameter should use observed dates when include_observed is true (default)" name="getBusinessDays with holiday calendar support include_observed parameter should use observed dates when include_observed is true (default)" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support include_observed parameter should ignore observed dates when include_observed is false" name="getBusinessDays with holiday calendar support include_observed parameter should ignore observed dates when include_observed is false" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support custom_holidays parameter should combine calendar and custom holidays" name="getBusinessDays with holiday calendar support custom_holidays parameter should combine calendar and custom holidays" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support custom_holidays parameter should not double-count holidays" name="getBusinessDays with holiday calendar support custom_holidays parameter should not double-count holidays" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support backward compatibility should still work with legacy holidays parameter" name="getBusinessDays with holiday calendar support backward compatibility should still work with legacy holidays parameter" time="0.001">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support backward compatibility should combine all holiday sources" name="getBusinessDays with holiday calendar support backward compatibility should combine all holiday sources" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support timezone handling with holidays should interpret holiday dates in the business timezone" name="getBusinessDays with holiday calendar support timezone handling with holidays should interpret holiday dates in the business timezone" time="0.002">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support caching with holiday calendar should cache results with holiday calendar in key" name="getBusinessDays with holiday calendar support caching with holiday calendar should cache results with holiday calendar in key" time="0.003">
    </testcase>
    <testcase classname="getBusinessDays with holiday calendar support caching with holiday calendar should use different cache for different calendars" name="getBusinessDays with holiday calendar support caching with holiday calendar should use different cache for different calendars" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MemoryAwareCache" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.116" tests="12">
    <testcase classname="MemoryAwareCache constructor should create cache with default 10MB limit" name="MemoryAwareCache constructor should create cache with default 10MB limit" time="0.005">
    </testcase>
    <testcase classname="MemoryAwareCache constructor should accept custom memory limit" name="MemoryAwareCache constructor should accept custom memory limit" time="0.001">
    </testcase>
    <testcase classname="MemoryAwareCache memory tracking should track memory usage when adding entries" name="MemoryAwareCache memory tracking should track memory usage when adding entries" time="0.003">
    </testcase>
    <testcase classname="MemoryAwareCache memory tracking should calculate object size consistently" name="MemoryAwareCache memory tracking should calculate object size consistently" time="0.001">
    </testcase>
    <testcase classname="MemoryAwareCache memory tracking should reduce memory usage when deleting entries" name="MemoryAwareCache memory tracking should reduce memory usage when deleting entries" time="0.001">
    </testcase>
    <testcase classname="MemoryAwareCache memory limits should reject set when memory limit would be exceeded" name="MemoryAwareCache memory limits should reject set when memory limit would be exceeded" time="0.001">
    </testcase>
    <testcase classname="MemoryAwareCache memory limits should emit memory warning at 90% usage" name="MemoryAwareCache memory limits should emit memory warning at 90% usage" time="0.002">
    </testcase>
    <testcase classname="MemoryAwareCache memory limits should evict oldest entries when eviction enabled" name="MemoryAwareCache memory limits should evict oldest entries when eviction enabled" time="0.002">
    </testcase>
    <testcase classname="MemoryAwareCache getMemoryStats should return accurate memory statistics" name="MemoryAwareCache getMemoryStats should return accurate memory statistics" time="0.002">
    </testcase>
    <testcase classname="MemoryAwareCache getMemoryStats should calculate hit rate correctly" name="MemoryAwareCache getMemoryStats should calculate hit rate correctly" time="0.001">
    </testcase>
    <testcase classname="MemoryAwareCache memory calculation accuracy should handle various data types" name="MemoryAwareCache memory calculation accuracy should handle various data types" time="0.003">
    </testcase>
    <testcase classname="MemoryAwareCache memory calculation accuracy should account for key size in memory calculation" name="MemoryAwareCache memory calculation accuracy should account for key size in memory calculation" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Rate limiter debug output" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.137" tests="5">
    <testcase classname="Rate limiter debug output should log rate limiter creation when debug is enabled" name="Rate limiter debug output should log rate limiter creation when debug is enabled" time="0.012">
    </testcase>
    <testcase classname="Rate limiter debug output should log when requests are allowed" name="Rate limiter debug output should log when requests are allowed" time="0.004">
    </testcase>
    <testcase classname="Rate limiter debug output should log when rate limit is exceeded" name="Rate limiter debug output should log when rate limit is exceeded" time="0.005">
    </testcase>
    <testcase classname="Rate limiter debug output should not log when debug is disabled" name="Rate limiter debug output should not log when debug is disabled" time="0.003">
    </testcase>
    <testcase classname="Rate limiter debug output should log cleanup operations" name="Rate limiter debug output should log cleanup operations" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="MCP Server with Rate Limiting" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.191" tests="6">
    <testcase classname="MCP Server with Rate Limiting Rate limiting on tool calls should allow requests when under rate limit" name="MCP Server with Rate Limiting Rate limiting on tool calls should allow requests when under rate limit" time="0.007">
    </testcase>
    <testcase classname="MCP Server with Rate Limiting Rate limiting on tool calls should deny requests when rate limit exceeded" name="MCP Server with Rate Limiting Rate limiting on tool calls should deny requests when rate limit exceeded" time="0.003">
    </testcase>
    <testcase classname="MCP Server with Rate Limiting Rate limiting on tool calls should not apply rate limiting to tools/list" name="MCP Server with Rate Limiting Rate limiting on tool calls should not apply rate limiting to tools/list" time="0.003">
    </testcase>
    <testcase classname="MCP Server with Rate Limiting Rate limiting on tool calls should track each tool call separately" name="MCP Server with Rate Limiting Rate limiting on tool calls should track each tool call separately" time="0.002">
    </testcase>
    <testcase classname="MCP Server with Rate Limiting Rate limiting on tool calls should create rate limiter with environment configuration" name="MCP Server with Rate Limiting Rate limiting on tool calls should create rate limiter with environment configuration" time="0.002">
    </testcase>
    <testcase classname="MCP Server with Rate Limiting Error handling with rate limiting should handle tool errors normally when under rate limit" name="MCP Server with Rate Limiting Error handling with rate limiting should handle tool errors normally when under rate limit" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="addTime validation helpers" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.211" tests="8">
    <testcase classname="addTime validation helpers validateUnit should accept valid units" name="addTime validation helpers validateUnit should accept valid units" time="0.002">
    </testcase>
    <testcase classname="addTime validation helpers validateUnit should throw for invalid unit" name="addTime validation helpers validateUnit should throw for invalid unit" time="0.002">
    </testcase>
    <testcase classname="addTime validation helpers validateUnit should throw with correct error code and message" name="addTime validation helpers validateUnit should throw with correct error code and message" time="0.001">
    </testcase>
    <testcase classname="addTime validation helpers validateAmount should accept valid numbers" name="addTime validation helpers validateAmount should accept valid numbers" time="0.001">
    </testcase>
    <testcase classname="addTime validation helpers validateAmount should throw for NaN" name="addTime validation helpers validateAmount should throw for NaN" time="0.001">
    </testcase>
    <testcase classname="addTime validation helpers validateAmount should throw for Infinity" name="addTime validation helpers validateAmount should throw for Infinity" time="0.001">
    </testcase>
    <testcase classname="addTime validation helpers validateAmount should throw with correct error code and message" name="addTime validation helpers validateAmount should throw with correct error code and message" time="0">
    </testcase>
    <testcase classname="addTime validation helpers Debug logging should log validation attempts" name="addTime validation helpers Debug logging should log validation attempts" time="0">
    </testcase>
  </testsuite>
  <testsuite name="serverConfig environment variable support" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.109" tests="8">
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should use MAX_LISTENERS from environment when set" name="serverConfig environment variable support MAX_LISTENERS environment variable should use MAX_LISTENERS from environment when set" time="0.002">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should use default value (20) when MAX_LISTENERS not set" name="serverConfig environment variable support MAX_LISTENERS environment variable should use default value (20) when MAX_LISTENERS not set" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should handle invalid MAX_LISTENERS gracefully" name="serverConfig environment variable support MAX_LISTENERS environment variable should handle invalid MAX_LISTENERS gracefully" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should enforce minimum value of 10" name="serverConfig environment variable support MAX_LISTENERS environment variable should enforce minimum value of 10" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should handle very large values" name="serverConfig environment variable support MAX_LISTENERS environment variable should handle very large values" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should handle zero as invalid and use default" name="serverConfig environment variable support MAX_LISTENERS environment variable should handle zero as invalid and use default" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should handle negative values as invalid" name="serverConfig environment variable support MAX_LISTENERS environment variable should handle negative values as invalid" time="0.001">
    </testcase>
    <testcase classname="serverConfig environment variable support MAX_LISTENERS environment variable should parse decimal values as integers" name="serverConfig environment variable support MAX_LISTENERS environment variable should parse decimal values as integers" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="addTime date parsing helper" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.197" tests="9">
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse Unix timestamp" name="addTime date parsing helper parseDateWithTimezone should parse Unix timestamp" time="0.002">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse Unix timestamp with timezone parameter" name="addTime date parsing helper parseDateWithTimezone should parse Unix timestamp with timezone parameter" time="0.001">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse ISO string with Z suffix" name="addTime date parsing helper parseDateWithTimezone should parse ISO string with Z suffix" time="0.001">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse ISO string with Z suffix and timezone parameter" name="addTime date parsing helper parseDateWithTimezone should parse ISO string with Z suffix and timezone parameter" time="0.001">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse string with explicit offset" name="addTime date parsing helper parseDateWithTimezone should parse string with explicit offset" time="0.001">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should parse local time string" name="addTime date parsing helper parseDateWithTimezone should parse local time string" time="0.002">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should throw for invalid date format" name="addTime date parsing helper parseDateWithTimezone should throw for invalid date format" time="0.002">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone should throw for invalid Unix timestamp" name="addTime date parsing helper parseDateWithTimezone should throw for invalid Unix timestamp" time="0.001">
    </testcase>
    <testcase classname="addTime date parsing helper parseDateWithTimezone Debug logging should log parsing attempts" name="addTime date parsing helper parseDateWithTimezone Debug logging should log parsing attempts" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SlidingWindowRateLimiter Environment Variables" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.076" tests="8">
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should use environment variables when no constructor params provided" name="SlidingWindowRateLimiter Environment Variables environment variable handling should use environment variables when no constructor params provided" time="0.002">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should use defaults when environment variables are not set" name="SlidingWindowRateLimiter Environment Variables environment variable handling should use defaults when environment variables are not set" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should prefer constructor parameters over environment variables" name="SlidingWindowRateLimiter Environment Variables environment variable handling should prefer constructor parameters over environment variables" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should handle invalid environment variable values gracefully" name="SlidingWindowRateLimiter Environment Variables environment variable handling should handle invalid environment variable values gracefully" time="0">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should handle empty string environment variables" name="SlidingWindowRateLimiter Environment Variables environment variable handling should handle empty string environment variables" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should handle negative values in environment variables" name="SlidingWindowRateLimiter Environment Variables environment variable handling should handle negative values in environment variables" time="0.001">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should handle zero values in environment variables" name="SlidingWindowRateLimiter Environment Variables environment variable handling should handle zero values in environment variables" time="0">
    </testcase>
    <testcase classname="SlidingWindowRateLimiter Environment Variables environment variable handling should handle floating point values in environment variables" name="SlidingWindowRateLimiter Environment Variables environment variable handling should handle floating point values in environment variables" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RecurrenceFactory" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:13" time="0.249" tests="15">
    <testcase classname="RecurrenceFactory pattern selection should create DailyRecurrence for daily pattern" name="RecurrenceFactory pattern selection should create DailyRecurrence for daily pattern" time="0.002">
    </testcase>
    <testcase classname="RecurrenceFactory pattern selection should create WeeklyRecurrence for weekly pattern" name="RecurrenceFactory pattern selection should create WeeklyRecurrence for weekly pattern" time="0">
    </testcase>
    <testcase classname="RecurrenceFactory pattern selection should create MonthlyRecurrence for monthly pattern" name="RecurrenceFactory pattern selection should create MonthlyRecurrence for monthly pattern" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory pattern selection should create YearlyRecurrence for yearly pattern" name="RecurrenceFactory pattern selection should create YearlyRecurrence for yearly pattern" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory validation should validate params before creating instance" name="RecurrenceFactory validation should validate params before creating instance" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory validation should throw validation error for invalid pattern" name="RecurrenceFactory validation should throw validation error for invalid pattern" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory validation should throw validation error for missing required fields" name="RecurrenceFactory validation should throw validation error for missing required fields" time="0">
    </testcase>
    <testcase classname="RecurrenceFactory calculate method should validate and calculate in one step" name="RecurrenceFactory calculate method should validate and calculate in one step" time="0">
    </testcase>
    <testcase classname="RecurrenceFactory calculate method should handle weekly calculation" name="RecurrenceFactory calculate method should handle weekly calculation" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory calculate method should handle monthly calculation" name="RecurrenceFactory calculate method should handle monthly calculation" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory calculate method should handle yearly calculation" name="RecurrenceFactory calculate method should handle yearly calculation" time="0.001">
    </testcase>
    <testcase classname="RecurrenceFactory calculate method should throw for invalid params in calculate" name="RecurrenceFactory calculate method should throw for invalid params in calculate" time="0">
    </testcase>
    <testcase classname="RecurrenceFactory timezone handling should pass timezone to recurrence instance" name="RecurrenceFactory timezone handling should pass timezone to recurrence instance" time="0.002">
    </testcase>
    <testcase classname="RecurrenceFactory timezone handling should handle UTC timezone (empty string)" name="RecurrenceFactory timezone handling should handle UTC timezone (empty string)" time="0">
    </testcase>
    <testcase classname="RecurrenceFactory timezone handling should use system timezone when undefined" name="RecurrenceFactory timezone handling should use system timezone when undefined" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MCP Security Tests - Attack Vectors" errors="0" failures="0" skipped="0" timestamp="2025-07-30T23:35:02" time="20.496" tests="20">
    <testcase classname="MCP Security Tests - Attack Vectors Path Traversal Attacks should reject path traversal in date parameters" name="MCP Security Tests - Attack Vectors Path Traversal Attacks should reject path traversal in date parameters" time="0.073">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Path Traversal Attacks should reject path traversal in timezone parameters" name="MCP Security Tests - Attack Vectors Path Traversal Attacks should reject path traversal in timezone parameters" time="0.017">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors SQL Injection Attacks should reject SQL injection in timezone" name="MCP Security Tests - Attack Vectors SQL Injection Attacks should reject SQL injection in timezone" time="0.013">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors SQL Injection Attacks should reject SQL injection in date parameters" name="MCP Security Tests - Attack Vectors SQL Injection Attacks should reject SQL injection in date parameters" time="0.01">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors XSS Attacks should sanitize XSS attempts in format strings" name="MCP Security Tests - Attack Vectors XSS Attacks should sanitize XSS attempts in format strings" time="0.012">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors XSS Attacks should reject XSS in timezone parameters" name="MCP Security Tests - Attack Vectors XSS Attacks should reject XSS in timezone parameters" time="0.012">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Command Injection Attacks should reject command injection via timezone" name="MCP Security Tests - Attack Vectors Command Injection Attacks should reject command injection via timezone" time="0.005">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Command Injection Attacks should safely handle command injection in format strings" name="MCP Security Tests - Attack Vectors Command Injection Attacks should safely handle command injection in format strings" time="0.011">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle extremely long timezone strings" name="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle extremely long timezone strings" time="0.006">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle extremely large date ranges" name="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle extremely large date ranges" time="10.318">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle large holiday arrays" name="MCP Security Tests - Attack Vectors DoS Attack Vectors should handle large holiday arrays" time="0.005">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Prototype Pollution Attacks should ignore __proto__ in parameters" name="MCP Security Tests - Attack Vectors Prototype Pollution Attacks should ignore __proto__ in parameters" time="0.005">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Prototype Pollution Attacks should ignore constructor.prototype in parameters" name="MCP Security Tests - Attack Vectors Prototype Pollution Attacks should ignore constructor.prototype in parameters" time="0.006">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Invalid Input Handling should handle null timezone gracefully" name="MCP Security Tests - Attack Vectors Invalid Input Handling should handle null timezone gracefully" time="0.004">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Invalid Input Handling should reject non-string date inputs" name="MCP Security Tests - Attack Vectors Invalid Input Handling should reject non-string date inputs" time="0.004">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Invalid Input Handling should handle negative amount overflow" name="MCP Security Tests - Attack Vectors Invalid Input Handling should handle negative amount overflow" time="0.004">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Invalid Input Handling should validate unit types strictly" name="MCP Security Tests - Attack Vectors Invalid Input Handling should validate unit types strictly" time="0.003">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Cache Key Attacks should sanitize cache keys with null bytes" name="MCP Security Tests - Attack Vectors Cache Key Attacks should sanitize cache keys with null bytes" time="0.003">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Cache Key Attacks should reject cache keys with path traversal" name="MCP Security Tests - Attack Vectors Cache Key Attacks should reject cache keys with path traversal" time="0.003">
    </testcase>
    <testcase classname="MCP Security Tests - Attack Vectors Cache Key Attacks should prevent cache poisoning attempts" name="MCP Security Tests - Attack Vectors Cache Key Attacks should prevent cache poisoning attempts" time="0.004">
    </testcase>
  </testsuite>
</testsuites>